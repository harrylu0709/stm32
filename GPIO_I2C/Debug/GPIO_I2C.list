
GPIO_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a7c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c24  08000c2c  00010c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c24  08000c24  00010c2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c24  08000c24  00010c2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c24  08000c2c  00010c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c28  08000c28  00010c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c2c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c2c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f84  00000000  00000000  00010c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003e9  00000000  00000000  00011be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00011fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00012120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000252f  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012b7  00000000  00000000  00014777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e2d  00000000  00000000  00015a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001f85b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f8  00000000  00000000  0001f8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c0c 	.word	0x08000c0c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c0c 	.word	0x08000c0c

080001e8 <delay>:
// void delay(void)
// {
// 	for(uint32_t i =0; i < 5000 ; i++);
// }
void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80001ee:	4b18      	ldr	r3, [pc, #96]	; (8000250 <delay+0x68>)
 80001f0:	60fb      	str	r3, [r7, #12]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <delay+0x6c>)
 80001f4:	60bb      	str	r3, [r7, #8]
	uint32_t temp;
    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/200000)-1;// if 1 second, then tick_hz = 1, if 1 millisecond, then tick_hz = 1000
 80001f6:	234f      	movs	r3, #79	; 0x4f
 80001f8:	607b      	str	r3, [r7, #4]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]

	*pSCSR &= ~(0x00FFFFFFFF);
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	431a      	orrs	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source (HSI = 16MHz)
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0204 	orr.w	r2, r3, #4
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]

    // *pSCSR |= ( 1 << 1); //Enables SysTick exception request:

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]

	do
	{
		temp = *pSCSR;
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	603b      	str	r3, [r7, #0]
	} while ((temp & (0x01) && (!(temp & (1<<16)))));
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d004      	beq.n	8000244 <delay+0x5c>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f2      	beq.n	800022a <delay+0x42>
	
	SysTick Control and Status Register
	[16] COUNTFLAG : Returns 1 if timer counted to 0 since last time this was read. 
	
	*/
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e014 	.word	0xe000e014
 8000254:	e000e010 	.word	0xe000e010

08000258 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <GPIO_ButtonInit+0x2c>)
 8000260:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000262:	2300      	movs	r3, #0
 8000264:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000266:	2300      	movs	r3, #0
 8000268:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026a:	2302      	movs	r3, #2
 800026c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fac5 	bl	8000804 <GPIO_Init>
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40020000 	.word	0x40020000

08000288 <i2c_scl_low>:

void i2c_scl_low(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 0);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	78f9      	ldrb	r1, [r7, #3]
 800029a:	2200      	movs	r2, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fc63 	bl	8000b68 <GPIO_WriteToOutputPin>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <i2c_scl_high>:

void i2c_scl_high(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	460b      	mov	r3, r1
 80002b4:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	78f9      	ldrb	r1, [r7, #3]
 80002bc:	2201      	movs	r2, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fc52 	bl	8000b68 <GPIO_WriteToOutputPin>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <i2c_sda_low>:

void i2c_sda_low(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	460b      	mov	r3, r1
 80002d6:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 0);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	78f9      	ldrb	r1, [r7, #3]
 80002de:	2200      	movs	r2, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fc41 	bl	8000b68 <GPIO_WriteToOutputPin>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <i2c_sda_high>:

void i2c_sda_high(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b082      	sub	sp, #8
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 1);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	78f9      	ldrb	r1, [r7, #3]
 8000300:	2201      	movs	r2, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fc30 	bl	8000b68 <GPIO_WriteToOutputPin>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <i2c_sda_input>:

void i2c_sda_input(GPIO_Handle_t* I2CPins)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	715a      	strb	r2, [r3, #5]
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	71da      	strb	r2, [r3, #7]
	GPIO_Init(I2CPins);
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 fa6a 	bl	8000804 <GPIO_Init>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <i2c_sda_output>:

void i2c_sda_output(GPIO_Handle_t* I2CPins)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2201      	movs	r2, #1
 8000344:	715a      	strb	r2, [r3, #5]
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	721a      	strb	r2, [r3, #8]
	I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2201      	movs	r2, #1
 8000350:	71da      	strb	r2, [r3, #7]
	GPIO_Init(I2CPins);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 fa56 	bl	8000804 <GPIO_Init>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <I2C_GPIOinits>:

void I2C_GPIOinits(GPIO_Handle_t* I2CPins)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    I2CPins->pGPIOx = GPIOB;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <I2C_GPIOinits+0x58>)
 800036c:	601a      	str	r2, [r3, #0]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2201      	movs	r2, #1
 8000372:	715a      	strb	r2, [r3, #5]
    // I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    // I2CPins->GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2201      	movs	r2, #1
 8000378:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2201      	movs	r2, #1
 800037e:	71da      	strb	r2, [r3, #7]
    I2CPins->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2202      	movs	r2, #2
 8000384:	719a      	strb	r2, [r3, #6]


	// I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	// I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
    //scl
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C1_SCL;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2206      	movs	r2, #6
 800038a:	711a      	strb	r2, [r3, #4]
    GPIO_Init(I2CPins);
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 fa39 	bl	8000804 <GPIO_Init>
	i2c_scl_high(I2CPins, I2C1_SCL);
 8000392:	2106      	movs	r1, #6
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff88 	bl	80002aa <i2c_scl_high>
    // //scl
    // I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
    // GPIO_Init(&I2CPins);

    //sda
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C1_SDA;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2207      	movs	r2, #7
 800039e:	711a      	strb	r2, [r3, #4]
    GPIO_Init(I2CPins);
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f000 fa2f 	bl	8000804 <GPIO_Init>
	i2c_sda_high(I2CPins, I2C1_SDA);
 80003a6:	2107      	movs	r1, #7
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ffa0 	bl	80002ee <i2c_sda_high>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40020400 	.word	0x40020400

080003bc <I2C_Slave_GPIOinits>:

void I2C_Slave_GPIOinits(GPIO_Handle_t* I2CPins)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    I2CPins->pGPIOx = GPIOB;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <I2C_Slave_GPIOinits+0x48>)
 80003c8:	601a      	str	r2, [r3, #0]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	715a      	strb	r2, [r3, #5]
    // I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    // I2CPins->GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	71da      	strb	r2, [r3, #7]
    I2CPins->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2202      	movs	r2, #2
 80003e0:	719a      	strb	r2, [r3, #6]


	// I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	// I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
    //scl
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C2_SCL;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	220a      	movs	r2, #10
 80003e6:	711a      	strb	r2, [r3, #4]
    GPIO_Init(I2CPins);
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 fa0b 	bl	8000804 <GPIO_Init>

    //sda
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C2_SDA;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	220b      	movs	r2, #11
 80003f2:	711a      	strb	r2, [r3, #4]
    GPIO_Init(I2CPins);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 fa05 	bl	8000804 <GPIO_Init>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40020400 	.word	0x40020400

08000408 <read_i2c_sda>:

static uint8_t read_i2c_sda(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	70fb      	strb	r3, [r7, #3]
	int temp;
	temp = GPIO_ReadFromInputPin(I2CPins->pGPIOx, PinNum);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	78fa      	ldrb	r2, [r7, #3]
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fb8d 	bl	8000b3c <GPIO_ReadFromInputPin>
 8000422:	4603      	mov	r3, r0
 8000424:	60fb      	str	r3, [r7, #12]
	return temp;
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	b2db      	uxtb	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <i2c_start>:



static i2c_start(GPIO_Handle_t* I2CPins)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
	i2c_sda_high(I2CPins, I2C1_SDA);
 800043a:	2107      	movs	r1, #7
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff ff56 	bl	80002ee <i2c_sda_high>
	delay();
 8000442:	f7ff fed1 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 8000446:	2106      	movs	r1, #6
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff2e 	bl	80002aa <i2c_scl_high>
	delay();
 800044e:	f7ff fecb 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 8000452:	2107      	movs	r1, #7
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff39 	bl	80002cc <i2c_sda_low>
	delay();
 800045a:	f7ff fec5 	bl	80001e8 <delay>
	i2c_scl_low(I2CPins, I2C1_SCL);
 800045e:	2106      	movs	r1, #6
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ff11 	bl	8000288 <i2c_scl_low>
	delay();
 8000466:	f7ff febf 	bl	80001e8 <delay>
}
 800046a:	bf00      	nop
 800046c:	4618      	mov	r0, r3
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <i2c_stop>:

static i2c_stop(GPIO_Handle_t* I2CPins)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	i2c_scl_low(I2CPins, I2C1_SCL);
 800047c:	2106      	movs	r1, #6
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ff02 	bl	8000288 <i2c_scl_low>
	delay();
 8000484:	f7ff feb0 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 8000488:	2107      	movs	r1, #7
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff ff1e 	bl	80002cc <i2c_sda_low>
	delay();
 8000490:	f7ff feaa 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 8000494:	2106      	movs	r1, #6
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff ff07 	bl	80002aa <i2c_scl_high>
	delay();
 800049c:	f7ff fea4 	bl	80001e8 <delay>
	i2c_sda_high(I2CPins, I2C1_SDA);
 80004a0:	2107      	movs	r1, #7
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff ff23 	bl	80002ee <i2c_sda_high>
	delay();
 80004a8:	f7ff fe9e 	bl	80001e8 <delay>
}
 80004ac:	bf00      	nop
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <i2c_wait_ack>:
	i2c_sda_low(I2CPins, I2C1_SDA);
	delay();
}

static uint8_t i2c_wait_ack(GPIO_Handle_t* I2CPins, GPIO_Handle_t* I2CSlave, uint8_t *ack_flag)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b086      	sub	sp, #24
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	60f8      	str	r0, [r7, #12]
 80004be:	60b9      	str	r1, [r7, #8]
 80004c0:	607a      	str	r2, [r7, #4]
	
	// *ack_flag |= 0xff;
	i2c_sda_output(I2CSlave);
 80004c2:	68b8      	ldr	r0, [r7, #8]
 80004c4:	f7ff ff38 	bl	8000338 <i2c_sda_output>
	i2c_sda_input(I2CPins);
 80004c8:	68f8      	ldr	r0, [r7, #12]
 80004ca:	f7ff ff21 	bl	8000310 <i2c_sda_input>
	if(*ack_flag)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d004      	beq.n	80004e0 <i2c_wait_ack+0x2a>
	{
		i2c_sda_high(I2CSlave, I2C2_SDA);
 80004d6:	210b      	movs	r1, #11
 80004d8:	68b8      	ldr	r0, [r7, #8]
 80004da:	f7ff ff08 	bl	80002ee <i2c_sda_high>
 80004de:	e003      	b.n	80004e8 <i2c_wait_ack+0x32>
	}
	else
	{
		i2c_sda_low(I2CSlave, I2C2_SDA);
 80004e0:	210b      	movs	r1, #11
 80004e2:	68b8      	ldr	r0, [r7, #8]
 80004e4:	f7ff fef2 	bl	80002cc <i2c_sda_low>
	}
	delay();
 80004e8:	f7ff fe7e 	bl	80001e8 <delay>
	uint8_t wait_time;
	uint8_t ack_nack = 1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	75fb      	strb	r3, [r7, #23]
	// 	{
	// 		ack_nack = 0;
	// 		break;
	// 	}
	// }
	i2c_scl_high(I2CPins, I2C1_SCL);
 80004f0:	2106      	movs	r1, #6
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	f7ff fed9 	bl	80002aa <i2c_scl_high>
	delay();
 80004f8:	f7ff fe76 	bl	80001e8 <delay>
	i2c_scl_low(I2CPins, I2C1_SCL);
 80004fc:	2106      	movs	r1, #6
 80004fe:	68f8      	ldr	r0, [r7, #12]
 8000500:	f7ff fec2 	bl	8000288 <i2c_scl_low>
	delay();
 8000504:	f7ff fe70 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 8000508:	2107      	movs	r1, #7
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f7ff fede 	bl	80002cc <i2c_sda_low>
	delay();
 8000510:	f7ff fe6a 	bl	80001e8 <delay>
	i2c_sda_output(I2CPins);
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f7ff ff0f 	bl	8000338 <i2c_sda_output>
	i2c_sda_input(I2CSlave);
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f7ff fef8 	bl	8000310 <i2c_sda_input>
	(*ack_flag) &= ~(0xff);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
	return ack_nack;
 8000526:	7dfb      	ldrb	r3, [r7, #23]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <i2c_write_byte>:

static void i2c_write_byte(GPIO_Handle_t* I2CPins, uint8_t data, GPIO_Handle_t* I2CSlave, uint8_t *ack_flag)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	607a      	str	r2, [r7, #4]
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	460b      	mov	r3, r1
 800053e:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < 8 ;i++)
 8000540:	2300      	movs	r3, #0
 8000542:	75fb      	strb	r3, [r7, #23]
 8000544:	e03b      	b.n	80005be <i2c_write_byte+0x8e>
	{
		i2c_scl_low(I2CPins, I2C1_SCL);
 8000546:	2106      	movs	r1, #6
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f7ff fe9d 	bl	8000288 <i2c_scl_low>

		if(data & 0x80)
 800054e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000552:	2b00      	cmp	r3, #0
 8000554:	da04      	bge.n	8000560 <i2c_write_byte+0x30>
		{
			i2c_sda_high(I2CPins, I2C1_SDA);
 8000556:	2107      	movs	r1, #7
 8000558:	68f8      	ldr	r0, [r7, #12]
 800055a:	f7ff fec8 	bl	80002ee <i2c_sda_high>
 800055e:	e003      	b.n	8000568 <i2c_write_byte+0x38>
		}
		else
		{
			i2c_sda_low(I2CPins, I2C1_SDA);
 8000560:	2107      	movs	r1, #7
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff feb2 	bl	80002cc <i2c_sda_low>
		}
		delay();
 8000568:	f7ff fe3e 	bl	80001e8 <delay>

		if(read_i2c_sda(I2CSlave, I2C2_SDA) != ((I2CPins->pGPIOx->ODR >>I2C1_SDA) & 0x1))	(*ack_flag) |= (1<<i);
 800056c:	210b      	movs	r1, #11
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ff4a 	bl	8000408 <read_i2c_sda>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	09db      	lsrs	r3, r3, #7
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	429a      	cmp	r2, r3
 8000586:	d00c      	beq.n	80005a2 <i2c_write_byte+0x72>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b25a      	sxtb	r2, r3
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	2101      	movs	r1, #1
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	b25b      	sxtb	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b25b      	sxtb	r3, r3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	701a      	strb	r2, [r3, #0]

		delay();
 80005a2:	f7ff fe21 	bl	80001e8 <delay>

		i2c_scl_high(I2CPins, I2C1_SCL);
 80005a6:	2106      	movs	r1, #6
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff fe7e 	bl	80002aa <i2c_scl_high>
		delay();
 80005ae:	f7ff fe1b 	bl	80001e8 <delay>
		data <<= 1;
 80005b2:	7afb      	ldrb	r3, [r7, #11]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < 8 ;i++)
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	3301      	adds	r3, #1
 80005bc:	75fb      	strb	r3, [r7, #23]
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d9c0      	bls.n	8000546 <i2c_write_byte+0x16>
	}
	i2c_scl_low(I2CPins, I2C1_SCL);
 80005c4:	2106      	movs	r1, #6
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f7ff fe5e 	bl	8000288 <i2c_scl_low>
	i2c_sda_low(I2CPins, I2C1_SDA);
 80005cc:	2107      	movs	r1, #7
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	f7ff fe7c 	bl	80002cc <i2c_sda_low>
	delay();
 80005d4:	f7ff fe08 	bl	80001e8 <delay>
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <i2c_write_Nbyte>:

void i2c_write_Nbyte(GPIO_Handle_t* I2CPins, uint8_t data, uint8_t slaveAddr, GPIO_Handle_t* I2CSlave)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	72fb      	strb	r3, [r7, #11]
 80005ee:	4613      	mov	r3, r2
 80005f0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
#if I2C_7bit_addr
	data <<= 1;
 80005f2:	7afb      	ldrb	r3, [r7, #11]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	72fb      	strb	r3, [r7, #11]
	slaveAddr <<= 1;
 80005f8:	7abb      	ldrb	r3, [r7, #10]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	72bb      	strb	r3, [r7, #10]
#endif
	uint8_t ack_flag = 0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	75fb      	strb	r3, [r7, #23]
	i2c_start(I2CPins);
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ff15 	bl	8000432 <i2c_start>
	i2c_write_byte(I2CPins, slaveAddr, I2CSlave, &ack_flag);
 8000608:	f107 0317 	add.w	r3, r7, #23
 800060c:	7ab9      	ldrb	r1, [r7, #10]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f7ff ff8d 	bl	8000530 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 8000616:	f107 0317 	add.w	r3, r7, #23
 800061a:	461a      	mov	r2, r3
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	68f8      	ldr	r0, [r7, #12]
 8000620:	f7ff ff49 	bl	80004b6 <i2c_wait_ack>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
		goto _err;

	_err:
 8000628:	bf00      	nop
	i2c_stop(I2CPins);
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f7ff ff22 	bl	8000474 <i2c_stop>
	// return 0;
}
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <main>:
	delay();
	i2c_sda_output(I2CPins);
}

int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1Pins, I2C2Pins;
	memset(&I2C1Pins, 0 , sizeof(I2C1Pins));
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	220c      	movs	r2, #12
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fad8 	bl	8000bfc <memset>
	memset(&I2C2Pins, 0 , sizeof(I2C2Pins));
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	220c      	movs	r2, #12
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fad2 	bl	8000bfc <memset>

	I2C_GPIOinits(&I2C1Pins);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe7f 	bl	8000360 <I2C_GPIOinits>
	I2C_Slave_GPIOinits(&I2C2Pins);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fea9 	bl	80003bc <I2C_Slave_GPIOinits>

    GPIO_ButtonInit();
 800066a:	f7ff fdf5 	bl	8000258 <GPIO_ButtonInit>
	while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800066e:	bf00      	nop
 8000670:	2100      	movs	r1, #0
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x68>)
 8000674:	f000 fa62 	bl	8000b3c <GPIO_ReadFromInputPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f8      	beq.n	8000670 <main+0x38>
	delay();
 800067e:	f7ff fdb3 	bl	80001e8 <delay>

	uint8_t commandcode = 0x51;
 8000682:	2351      	movs	r3, #81	; 0x51
 8000684:	77fb      	strb	r3, [r7, #31]
	i2c_write_Nbyte(&I2C1Pins, commandcode,  SLAVE_ADDR, &I2C2Pins);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	7ff9      	ldrb	r1, [r7, #31]
 800068a:	f107 0010 	add.w	r0, r7, #16
 800068e:	2268      	movs	r2, #104	; 0x68
 8000690:	f7ff ffa6 	bl	80005e0 <i2c_write_Nbyte>
	// i2c_stop(&I2C1Pins);

//     /* Loop forever */
// 	printf("test\n");
	//this is led gpio configuration
	return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 fa6f 	bl	8000bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff ffaf 	bl	8000638 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006e8:	08000c2c 	.word	0x08000c2c
  ldr r2, =_sbss
 80006ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f0:	2000001c 	.word	0x2000001c

080006f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d161      	bne.n	80007ce <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a33      	ldr	r2, [pc, #204]	; (80007dc <GPIO_PeriClockControl+0xe4>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000712:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800071e:	e056      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a30      	ldr	r2, [pc, #192]	; (80007e4 <GPIO_PeriClockControl+0xec>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 800072e:	f043 0302 	orr.w	r3, r3, #2
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000734:	e04b      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <GPIO_PeriClockControl+0xf0>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074a:	e040      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a27      	ldr	r2, [pc, #156]	; (80007ec <GPIO_PeriClockControl+0xf4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000760:	e035      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <GPIO_PeriClockControl+0xf8>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000776:	e02a      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <GPIO_PeriClockControl+0xfc>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078c:	e01f      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <GPIO_PeriClockControl+0x100>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a2:	e014      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <GPIO_PeriClockControl+0x104>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 80007b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e009      	b.n	80007ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <GPIO_PeriClockControl+0x108>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d105      	bne.n	80007ce <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <GPIO_PeriClockControl+0xe8>)
 80007c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40021800 	.word	0x40021800
 80007fc:	40021c00 	.word	0x40021c00
 8000800:	40022000 	.word	0x40022000

08000804 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff6e 	bl	80006f8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d820      	bhi.n	8000866 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	795b      	ldrb	r3, [r3, #5]
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2103      	movs	r1, #3
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	430a      	orrs	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e0cb      	b.n	80009fe <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d117      	bne.n	800089e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <GPIO_Init+0x198>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	7912      	ldrb	r2, [r2, #4]
 8000876:	4611      	mov	r1, r2
 8000878:	2201      	movs	r2, #1
 800087a:	408a      	lsls	r2, r1
 800087c:	4611      	mov	r1, r2
 800087e:	4a47      	ldr	r2, [pc, #284]	; (800099c <GPIO_Init+0x198>)
 8000880:	430b      	orrs	r3, r1
 8000882:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000884:	4b45      	ldr	r3, [pc, #276]	; (800099c <GPIO_Init+0x198>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	7912      	ldrb	r2, [r2, #4]
 800088c:	4611      	mov	r1, r2
 800088e:	2201      	movs	r2, #1
 8000890:	408a      	lsls	r2, r1
 8000892:	43d2      	mvns	r2, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4a41      	ldr	r2, [pc, #260]	; (800099c <GPIO_Init+0x198>)
 8000898:	400b      	ands	r3, r1
 800089a:	6093      	str	r3, [r2, #8]
 800089c:	e035      	b.n	800090a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	795b      	ldrb	r3, [r3, #5]
 80008a2:	2b05      	cmp	r3, #5
 80008a4:	d117      	bne.n	80008d6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a6:	4b3d      	ldr	r3, [pc, #244]	; (800099c <GPIO_Init+0x198>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	7912      	ldrb	r2, [r2, #4]
 80008ae:	4611      	mov	r1, r2
 80008b0:	2201      	movs	r2, #1
 80008b2:	408a      	lsls	r2, r1
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a39      	ldr	r2, [pc, #228]	; (800099c <GPIO_Init+0x198>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008bc:	4b37      	ldr	r3, [pc, #220]	; (800099c <GPIO_Init+0x198>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	7912      	ldrb	r2, [r2, #4]
 80008c4:	4611      	mov	r1, r2
 80008c6:	2201      	movs	r2, #1
 80008c8:	408a      	lsls	r2, r1
 80008ca:	43d2      	mvns	r2, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <GPIO_Init+0x198>)
 80008d0:	400b      	ands	r3, r1
 80008d2:	60d3      	str	r3, [r2, #12]
 80008d4:	e019      	b.n	800090a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	795b      	ldrb	r3, [r3, #5]
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d115      	bne.n	800090a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <GPIO_Init+0x198>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	7912      	ldrb	r2, [r2, #4]
 80008e6:	4611      	mov	r1, r2
 80008e8:	2201      	movs	r2, #1
 80008ea:	408a      	lsls	r2, r1
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a2b      	ldr	r2, [pc, #172]	; (800099c <GPIO_Init+0x198>)
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <GPIO_Init+0x198>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	7912      	ldrb	r2, [r2, #4]
 80008fc:	4611      	mov	r1, r2
 80008fe:	2201      	movs	r2, #1
 8000900:	408a      	lsls	r2, r1
 8000902:	4611      	mov	r1, r2
 8000904:	4a25      	ldr	r2, [pc, #148]	; (800099c <GPIO_Init+0x198>)
 8000906:	430b      	orrs	r3, r1
 8000908:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	791b      	ldrb	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <GPIO_Init+0x19c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d04e      	beq.n	80009c4 <GPIO_Init+0x1c0>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <GPIO_Init+0x1a0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d032      	beq.n	8000996 <GPIO_Init+0x192>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <GPIO_Init+0x1a4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d02b      	beq.n	8000992 <GPIO_Init+0x18e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <GPIO_Init+0x1a8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d024      	beq.n	800098e <GPIO_Init+0x18a>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <GPIO_Init+0x1ac>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d01d      	beq.n	800098a <GPIO_Init+0x186>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <GPIO_Init+0x1b0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d016      	beq.n	8000986 <GPIO_Init+0x182>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <GPIO_Init+0x1b4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d00f      	beq.n	8000982 <GPIO_Init+0x17e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <GPIO_Init+0x1b8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d008      	beq.n	800097e <GPIO_Init+0x17a>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <GPIO_Init+0x1bc>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <GPIO_Init+0x176>
 8000976:	2308      	movs	r3, #8
 8000978:	e025      	b.n	80009c6 <GPIO_Init+0x1c2>
 800097a:	2300      	movs	r3, #0
 800097c:	e023      	b.n	80009c6 <GPIO_Init+0x1c2>
 800097e:	2307      	movs	r3, #7
 8000980:	e021      	b.n	80009c6 <GPIO_Init+0x1c2>
 8000982:	2306      	movs	r3, #6
 8000984:	e01f      	b.n	80009c6 <GPIO_Init+0x1c2>
 8000986:	2305      	movs	r3, #5
 8000988:	e01d      	b.n	80009c6 <GPIO_Init+0x1c2>
 800098a:	2304      	movs	r3, #4
 800098c:	e01b      	b.n	80009c6 <GPIO_Init+0x1c2>
 800098e:	2303      	movs	r3, #3
 8000990:	e019      	b.n	80009c6 <GPIO_Init+0x1c2>
 8000992:	2302      	movs	r3, #2
 8000994:	e017      	b.n	80009c6 <GPIO_Init+0x1c2>
 8000996:	2301      	movs	r3, #1
 8000998:	e015      	b.n	80009c6 <GPIO_Init+0x1c2>
 800099a:	bf00      	nop
 800099c:	40013c00 	.word	0x40013c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40021400 	.word	0x40021400
 80009b8:	40021800 	.word	0x40021800
 80009bc:	40021c00 	.word	0x40021c00
 80009c0:	40022000 	.word	0x40022000
 80009c4:	2300      	movs	r3, #0
 80009c6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80009c8:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <GPIO_Init+0x32c>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	4a58      	ldr	r2, [pc, #352]	; (8000b30 <GPIO_Init+0x32c>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80009d4:	7c7a      	ldrb	r2, [r7, #17]
 80009d6:	7cbb      	ldrb	r3, [r7, #18]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	fa02 f103 	lsl.w	r1, r2, r3
 80009de:	4a55      	ldr	r2, [pc, #340]	; (8000b34 <GPIO_Init+0x330>)
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	3302      	adds	r3, #2
 80009e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80009e8:	4b53      	ldr	r3, [pc, #332]	; (8000b38 <GPIO_Init+0x334>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	7912      	ldrb	r2, [r2, #4]
 80009f0:	4611      	mov	r1, r2
 80009f2:	2201      	movs	r2, #1
 80009f4:	408a      	lsls	r2, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <GPIO_Init+0x334>)
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	799b      	ldrb	r3, [r3, #6]
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	791b      	ldrb	r3, [r3, #4]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6899      	ldr	r1, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	79db      	ldrb	r3, [r3, #7]
 8000a42:	461a      	mov	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68d9      	ldr	r1, [r3, #12]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7a1b      	ldrb	r3, [r3, #8]
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	791b      	ldrb	r3, [r3, #4]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	408b      	lsls	r3, r1
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6859      	ldr	r1, [r3, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	795b      	ldrb	r3, [r3, #5]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d131      	bne.n	8000b26 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	08db      	lsrs	r3, r3, #3
 8000ac8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	7c3a      	ldrb	r2, [r7, #16]
 8000ada:	3208      	adds	r2, #8
 8000adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	7c3a      	ldrb	r2, [r7, #16]
 8000af4:	4001      	ands	r1, r0
 8000af6:	3208      	adds	r2, #8
 8000af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	7c3a      	ldrb	r2, [r7, #16]
 8000b02:	3208      	adds	r2, #8
 8000b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7a5b      	ldrb	r3, [r3, #9]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	7c3a      	ldrb	r2, [r7, #16]
 8000b1e:	4301      	orrs	r1, r0
 8000b20:	3208      	adds	r2, #8
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40013c00 	.word	0x40013c00

08000b3c <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691a      	ldr	r2, [r3, #16]
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]

   return value;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
 8000b74:	4613      	mov	r3, r2
 8000b76:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000b78:	78bb      	ldrb	r3, [r7, #2]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d109      	bne.n	8000b92 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000b90:	e009      	b.n	8000ba6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	43d2      	mvns	r2, r2
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	615a      	str	r2, [r3, #20]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <__libc_init_array>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	4d0d      	ldr	r5, [pc, #52]	; (8000bec <__libc_init_array+0x38>)
 8000bb8:	4c0d      	ldr	r4, [pc, #52]	; (8000bf0 <__libc_init_array+0x3c>)
 8000bba:	1b64      	subs	r4, r4, r5
 8000bbc:	10a4      	asrs	r4, r4, #2
 8000bbe:	2600      	movs	r6, #0
 8000bc0:	42a6      	cmp	r6, r4
 8000bc2:	d109      	bne.n	8000bd8 <__libc_init_array+0x24>
 8000bc4:	4d0b      	ldr	r5, [pc, #44]	; (8000bf4 <__libc_init_array+0x40>)
 8000bc6:	4c0c      	ldr	r4, [pc, #48]	; (8000bf8 <__libc_init_array+0x44>)
 8000bc8:	f000 f820 	bl	8000c0c <_init>
 8000bcc:	1b64      	subs	r4, r4, r5
 8000bce:	10a4      	asrs	r4, r4, #2
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	42a6      	cmp	r6, r4
 8000bd4:	d105      	bne.n	8000be2 <__libc_init_array+0x2e>
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bdc:	4798      	blx	r3
 8000bde:	3601      	adds	r6, #1
 8000be0:	e7ee      	b.n	8000bc0 <__libc_init_array+0xc>
 8000be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be6:	4798      	blx	r3
 8000be8:	3601      	adds	r6, #1
 8000bea:	e7f2      	b.n	8000bd2 <__libc_init_array+0x1e>
 8000bec:	08000c24 	.word	0x08000c24
 8000bf0:	08000c24 	.word	0x08000c24
 8000bf4:	08000c24 	.word	0x08000c24
 8000bf8:	08000c28 	.word	0x08000c28

08000bfc <memset>:
 8000bfc:	4402      	add	r2, r0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d100      	bne.n	8000c06 <memset+0xa>
 8000c04:	4770      	bx	lr
 8000c06:	f803 1b01 	strb.w	r1, [r3], #1
 8000c0a:	e7f9      	b.n	8000c00 <memset+0x4>

08000c0c <_init>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr

08000c18 <_fini>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr
