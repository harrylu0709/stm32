
GPIO_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018ec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001a94  08001a94  00011a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b08  08001b08  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001b08  08001b08  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b08  08001b08  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b08  08001b08  00011b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000190b  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000688  00000000  00000000  0002199f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00022028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001e0  00000000  00000000  00022250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000032ce  00000000  00000000  00022430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020ea  00000000  00000000  000256fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b695  00000000  00000000  000277e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00032e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ec0  00000000  00000000  00032ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001a7c 	.word	0x08001a7c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001a7c 	.word	0x08001a7c

080001e8 <delay>:
// void delay(void)
// {
// 	for(uint32_t i =0; i < 5000 ; i++);
// }
void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80001ee:	4b18      	ldr	r3, [pc, #96]	; (8000250 <delay+0x68>)
 80001f0:	60fb      	str	r3, [r7, #12]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <delay+0x6c>)
 80001f4:	60bb      	str	r3, [r7, #8]
	uint32_t temp;
    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/200000)-1;// if 1 second, then tick_hz = 1, if 1 millisecond, then tick_hz = 1000
 80001f6:	234f      	movs	r3, #79	; 0x4f
 80001f8:	607b      	str	r3, [r7, #4]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]

	*pSCSR &= ~(0x00FFFFFFFF);
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	431a      	orrs	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source (HSI = 16MHz)
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0204 	orr.w	r2, r3, #4
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]

    // *pSCSR |= ( 1 << 1); //Enables SysTick exception request:

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]

	do
	{
		temp = *pSCSR;
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	603b      	str	r3, [r7, #0]
	} while ((temp & (0x01) && (!(temp & (1<<16)))));
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d004      	beq.n	8000244 <delay+0x5c>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f2      	beq.n	800022a <delay+0x42>
	
	SysTick Control and Status Register
	[16] COUNTFLAG : Returns 1 if timer counted to 0 since last time this was read. 
	
	*/
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e014 	.word	0xe000e014
 8000254:	e000e010 	.word	0xe000e010

08000258 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <GPIO_ButtonInit+0x2c>)
 8000260:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000262:	2300      	movs	r3, #0
 8000264:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000266:	2300      	movs	r3, #0
 8000268:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026a:	2302      	movs	r3, #2
 800026c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fcf9 	bl	8000c6c <GPIO_Init>
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40020000 	.word	0x40020000

08000288 <i2c_scl_low>:

void i2c_scl_low(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 0);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	78f9      	ldrb	r1, [r7, #3]
 800029a:	2200      	movs	r2, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fe97 	bl	8000fd0 <GPIO_WriteToOutputPin>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <i2c_scl_high>:

void i2c_scl_high(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	460b      	mov	r3, r1
 80002b4:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	78f9      	ldrb	r1, [r7, #3]
 80002bc:	2201      	movs	r2, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fe86 	bl	8000fd0 <GPIO_WriteToOutputPin>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <i2c_sda_low>:

void i2c_sda_low(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	460b      	mov	r3, r1
 80002d6:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 0);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	78f9      	ldrb	r1, [r7, #3]
 80002de:	2200      	movs	r2, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fe75 	bl	8000fd0 <GPIO_WriteToOutputPin>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <i2c_sda_high>:

void i2c_sda_high(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b082      	sub	sp, #8
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 1);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	78f9      	ldrb	r1, [r7, #3]
 8000300:	2201      	movs	r2, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fe64 	bl	8000fd0 <GPIO_WriteToOutputPin>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <i2c_sda_input>:

void i2c_sda_input(GPIO_Handle_t* I2CPins)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	715a      	strb	r2, [r3, #5]
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	71da      	strb	r2, [r3, #7]
	GPIO_Init(I2CPins);
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 fc9e 	bl	8000c6c <GPIO_Init>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <i2c_sda_output>:

void i2c_sda_output(GPIO_Handle_t* I2CPins)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2201      	movs	r2, #1
 8000344:	715a      	strb	r2, [r3, #5]
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	721a      	strb	r2, [r3, #8]
	I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2201      	movs	r2, #1
 8000350:	71da      	strb	r2, [r3, #7]
	GPIO_Init(I2CPins);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 fc8a 	bl	8000c6c <GPIO_Init>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <I2C_GPIOinits>:

void I2C_GPIOinits(GPIO_Handle_t* I2CPins)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    I2CPins->pGPIOx = GPIOB;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <I2C_GPIOinits+0x64>)
 800036c:	601a      	str	r2, [r3, #0]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2201      	movs	r2, #1
 8000372:	715a      	strb	r2, [r3, #5]
    // I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    // I2CPins->GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2201      	movs	r2, #1
 8000378:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2201      	movs	r2, #1
 800037e:	71da      	strb	r2, [r3, #7]
    I2CPins->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2202      	movs	r2, #2
 8000384:	719a      	strb	r2, [r3, #6]


	// I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	// I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
    //scl
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C1_SCL;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2206      	movs	r2, #6
 800038a:	711a      	strb	r2, [r3, #4]
	I2CPins->scl = I2C1_SCL;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2206      	movs	r2, #6
 8000390:	729a      	strb	r2, [r3, #10]
    GPIO_Init(I2CPins);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 fc6a 	bl	8000c6c <GPIO_Init>
	i2c_scl_high(I2CPins, I2C1_SCL);
 8000398:	2106      	movs	r1, #6
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f7ff ff85 	bl	80002aa <i2c_scl_high>
    // //scl
    // I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
    // GPIO_Init(&I2CPins);

    //sda
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C1_SDA;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2207      	movs	r2, #7
 80003a4:	711a      	strb	r2, [r3, #4]
	I2CPins->sda = I2C1_SDA;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2207      	movs	r2, #7
 80003aa:	72da      	strb	r2, [r3, #11]
    GPIO_Init(I2CPins);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f000 fc5d 	bl	8000c6c <GPIO_Init>
	i2c_sda_high(I2CPins, I2C1_SDA);
 80003b2:	2107      	movs	r1, #7
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff9a 	bl	80002ee <i2c_sda_high>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40020400 	.word	0x40020400

080003c8 <I2C_Slave_GPIOinits>:

void I2C_Slave_GPIOinits(GPIO_Handle_t* I2CPins)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    I2CPins->pGPIOx = GPIOB;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <I2C_Slave_GPIOinits+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	715a      	strb	r2, [r3, #5]
    // I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    // I2CPins->GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	71da      	strb	r2, [r3, #7]
    I2CPins->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2202      	movs	r2, #2
 80003ec:	719a      	strb	r2, [r3, #6]


	// I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	// I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
    //scl
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C2_SCL;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	220a      	movs	r2, #10
 80003f2:	711a      	strb	r2, [r3, #4]
	I2CPins->scl = I2C2_SCL;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	220a      	movs	r2, #10
 80003f8:	729a      	strb	r2, [r3, #10]
    GPIO_Init(I2CPins);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 fc36 	bl	8000c6c <GPIO_Init>

    //sda
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C2_SDA;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	220b      	movs	r2, #11
 8000404:	711a      	strb	r2, [r3, #4]
	I2CPins->sda = I2C2_SDA;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	220b      	movs	r2, #11
 800040a:	72da      	strb	r2, [r3, #11]
    GPIO_Init(I2CPins);
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 fc2d 	bl	8000c6c <GPIO_Init>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40020400 	.word	0x40020400

08000420 <read_i2c_sda>:

static uint8_t read_i2c_sda(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
	int res;
	res = GPIO_ReadFromInputPin(I2CPins->pGPIOx, PinNum);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	78fa      	ldrb	r2, [r7, #3]
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fdb5 	bl	8000fa4 <GPIO_ReadFromInputPin>
 800043a:	4603      	mov	r3, r0
 800043c:	60fb      	str	r3, [r7, #12]
	return res;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	b2db      	uxtb	r3, r3
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <i2c_start>:



static i2c_start(GPIO_Handle_t* I2CPins)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
	i2c_sda_high(I2CPins, I2C1_SDA);
 8000452:	2107      	movs	r1, #7
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff4a 	bl	80002ee <i2c_sda_high>
	delay();
 800045a:	f7ff fec5 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 800045e:	2106      	movs	r1, #6
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ff22 	bl	80002aa <i2c_scl_high>
	delay();
 8000466:	f7ff febf 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 800046a:	2107      	movs	r1, #7
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff ff2d 	bl	80002cc <i2c_sda_low>
	delay();
 8000472:	f7ff feb9 	bl	80001e8 <delay>
	i2c_scl_low(I2CPins, I2C1_SCL);
 8000476:	2106      	movs	r1, #6
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f7ff ff05 	bl	8000288 <i2c_scl_low>
	delay();
 800047e:	f7ff feb3 	bl	80001e8 <delay>
}
 8000482:	bf00      	nop
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <i2c_stop>:

static i2c_stop(GPIO_Handle_t* I2CPins)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	i2c_scl_low(I2CPins, I2C1_SCL);
 8000494:	2106      	movs	r1, #6
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff fef6 	bl	8000288 <i2c_scl_low>
	delay();
 800049c:	f7ff fea4 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 80004a0:	2107      	movs	r1, #7
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff ff12 	bl	80002cc <i2c_sda_low>
	delay();
 80004a8:	f7ff fe9e 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 80004ac:	2106      	movs	r1, #6
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff fefb 	bl	80002aa <i2c_scl_high>
	delay();
 80004b4:	f7ff fe98 	bl	80001e8 <delay>
	i2c_sda_high(I2CPins, I2C1_SDA);
 80004b8:	2107      	movs	r1, #7
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff ff17 	bl	80002ee <i2c_sda_high>
	delay();
 80004c0:	f7ff fe92 	bl	80001e8 <delay>
}
 80004c4:	bf00      	nop
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <i2c_send_nack>:
	i2c_scl_low(I2CPins, I2C1_SCL);
	delay();
}

static void i2c_send_nack(GPIO_Handle_t* I2CPins)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	i2c_sda_high(I2CPins, I2C1_SDA);
 80004d6:	2107      	movs	r1, #7
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff08 	bl	80002ee <i2c_sda_high>
	delay();
 80004de:	f7ff fe83 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 80004e2:	2106      	movs	r1, #6
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff fee0 	bl	80002aa <i2c_scl_high>
	delay();
 80004ea:	f7ff fe7d 	bl	80001e8 <delay>
	i2c_scl_low(I2CPins, I2C1_SCL);
 80004ee:	2106      	movs	r1, #6
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff fec9 	bl	8000288 <i2c_scl_low>
	delay();
 80004f6:	f7ff fe77 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 80004fa:	2107      	movs	r1, #7
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fee5 	bl	80002cc <i2c_sda_low>
	delay();
 8000502:	f7ff fe71 	bl	80001e8 <delay>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <i2c_wait_ack>:

static uint8_t i2c_wait_ack(GPIO_Handle_t* I2CPins, GPIO_Handle_t* I2CSlave, uint8_t *ack_flag)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
	
	// *ack_flag |= 0xff;
	if(I2CSlave->sda == I2C2_SDA)
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	7adb      	ldrb	r3, [r3, #11]
 800051e:	2b0b      	cmp	r3, #11
 8000520:	d102      	bne.n	8000528 <i2c_wait_ack+0x1a>
		i2c_sda_output(I2CSlave);
 8000522:	68b8      	ldr	r0, [r7, #8]
 8000524:	f7ff ff08 	bl	8000338 <i2c_sda_output>
		
	if(*ack_flag)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d006      	beq.n	800053e <i2c_wait_ack+0x30>
	{
		i2c_sda_high(I2CSlave, I2CSlave->sda);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	7adb      	ldrb	r3, [r3, #11]
 8000534:	4619      	mov	r1, r3
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f7ff fed9 	bl	80002ee <i2c_sda_high>
 800053c:	e005      	b.n	800054a <i2c_wait_ack+0x3c>
	}
	else
	{
		i2c_sda_low(I2CSlave, I2CSlave->sda);
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	7adb      	ldrb	r3, [r3, #11]
 8000542:	4619      	mov	r1, r3
 8000544:	68b8      	ldr	r0, [r7, #8]
 8000546:	f7ff fec1 	bl	80002cc <i2c_sda_low>
	}
	delay();
 800054a:	f7ff fe4d 	bl	80001e8 <delay>
	uint8_t wait_time;
	uint8_t ack_nack = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	75fb      	strb	r3, [r7, #23]
	// 	{
	// 		ack_nack = 0;
	// 		break;
	// 	}
	// }
	I2CPins->scl == I2C1_SCL ? i2c_scl_high(I2CPins, I2CPins->scl): i2c_scl_high(I2CSlave, I2CSlave->scl);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	7a9b      	ldrb	r3, [r3, #10]
 8000556:	2b06      	cmp	r3, #6
 8000558:	d106      	bne.n	8000568 <i2c_wait_ack+0x5a>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	7a9b      	ldrb	r3, [r3, #10]
 800055e:	4619      	mov	r1, r3
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f7ff fea2 	bl	80002aa <i2c_scl_high>
 8000566:	e005      	b.n	8000574 <i2c_wait_ack+0x66>
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	7a9b      	ldrb	r3, [r3, #10]
 800056c:	4619      	mov	r1, r3
 800056e:	68b8      	ldr	r0, [r7, #8]
 8000570:	f7ff fe9b 	bl	80002aa <i2c_scl_high>
	delay();
 8000574:	f7ff fe38 	bl	80001e8 <delay>
	I2CPins->scl == I2C1_SCL ? i2c_scl_low(I2CPins, I2CPins->scl): i2c_scl_low(I2CSlave, I2CSlave->scl);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	7a9b      	ldrb	r3, [r3, #10]
 800057c:	2b06      	cmp	r3, #6
 800057e:	d106      	bne.n	800058e <i2c_wait_ack+0x80>
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	7a9b      	ldrb	r3, [r3, #10]
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f7ff fe7e 	bl	8000288 <i2c_scl_low>
 800058c:	e005      	b.n	800059a <i2c_wait_ack+0x8c>
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	7a9b      	ldrb	r3, [r3, #10]
 8000592:	4619      	mov	r1, r3
 8000594:	68b8      	ldr	r0, [r7, #8]
 8000596:	f7ff fe77 	bl	8000288 <i2c_scl_low>
	delay();
 800059a:	f7ff fe25 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2CPins->sda);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	7adb      	ldrb	r3, [r3, #11]
 80005a2:	4619      	mov	r1, r3
 80005a4:	68f8      	ldr	r0, [r7, #12]
 80005a6:	f7ff fe91 	bl	80002cc <i2c_sda_low>
	delay();
 80005aa:	f7ff fe1d 	bl	80001e8 <delay>
	// i2c_sda_output(I2CPins);
	// if(I2CSlave->sda == I2C2_SDA)	
		i2c_sda_input(I2CSlave);
 80005ae:	68b8      	ldr	r0, [r7, #8]
 80005b0:	f7ff feae 	bl	8000310 <i2c_sda_input>
	(*ack_flag) &= ~(0xff);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	return ack_nack;
 80005ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <i2c_write_byte>:

static void i2c_write_byte(GPIO_Handle_t* I2CPins, uint8_t data, GPIO_Handle_t* I2CSlave, uint8_t *ack_flag)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	460b      	mov	r3, r1
 80005d2:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	for(i = 0; i < 8 ;i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	75fb      	strb	r3, [r7, #23]
 80005d8:	e05d      	b.n	8000696 <i2c_write_byte+0xd2>
	{

		I2CPins->scl == I2C1_SCL ? i2c_scl_low(I2CPins, I2CPins->scl): i2c_scl_low(I2CSlave, I2CSlave->scl);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	7a9b      	ldrb	r3, [r3, #10]
 80005de:	2b06      	cmp	r3, #6
 80005e0:	d106      	bne.n	80005f0 <i2c_write_byte+0x2c>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	7a9b      	ldrb	r3, [r3, #10]
 80005e6:	4619      	mov	r1, r3
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f7ff fe4d 	bl	8000288 <i2c_scl_low>
 80005ee:	e005      	b.n	80005fc <i2c_write_byte+0x38>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7a9b      	ldrb	r3, [r3, #10]
 80005f4:	4619      	mov	r1, r3
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fe46 	bl	8000288 <i2c_scl_low>
		
		if(data & 0x80)
 80005fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000600:	2b00      	cmp	r3, #0
 8000602:	da06      	bge.n	8000612 <i2c_write_byte+0x4e>
		{
			i2c_sda_high(I2CPins, I2CPins->sda);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	7adb      	ldrb	r3, [r3, #11]
 8000608:	4619      	mov	r1, r3
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f7ff fe6f 	bl	80002ee <i2c_sda_high>
 8000610:	e005      	b.n	800061e <i2c_write_byte+0x5a>
		}
		else
		{
			i2c_sda_low(I2CPins, I2CPins->sda);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	7adb      	ldrb	r3, [r3, #11]
 8000616:	4619      	mov	r1, r3
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f7ff fe57 	bl	80002cc <i2c_sda_low>
		}
		delay();
 800061e:	f7ff fde3 	bl	80001e8 <delay>

		if(read_i2c_sda(I2CSlave, I2CPins->sda) != ((I2CPins->pGPIOx->ODR >>I2CPins->sda) & 0x1))	(*ack_flag) |= (1<<i);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	7adb      	ldrb	r3, [r3, #11]
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff fef9 	bl	8000420 <read_i2c_sda>
 800062e:	4603      	mov	r3, r0
 8000630:	4619      	mov	r1, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	7ad2      	ldrb	r2, [r2, #11]
 800063c:	40d3      	lsrs	r3, r2
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	4299      	cmp	r1, r3
 8000644:	d00c      	beq.n	8000660 <i2c_write_byte+0x9c>
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25a      	sxtb	r2, r3
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	b25b      	sxtb	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b25b      	sxtb	r3, r3
 800065a:	b2da      	uxtb	r2, r3
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	701a      	strb	r2, [r3, #0]

		delay();
 8000660:	f7ff fdc2 	bl	80001e8 <delay>

		I2CPins->scl == I2C1_SCL ? i2c_scl_high(I2CPins, I2CPins->scl): i2c_scl_high(I2CSlave, I2CSlave->scl);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	7a9b      	ldrb	r3, [r3, #10]
 8000668:	2b06      	cmp	r3, #6
 800066a:	d106      	bne.n	800067a <i2c_write_byte+0xb6>
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	7a9b      	ldrb	r3, [r3, #10]
 8000670:	4619      	mov	r1, r3
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f7ff fe19 	bl	80002aa <i2c_scl_high>
 8000678:	e005      	b.n	8000686 <i2c_write_byte+0xc2>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7a9b      	ldrb	r3, [r3, #10]
 800067e:	4619      	mov	r1, r3
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fe12 	bl	80002aa <i2c_scl_high>
		delay();
 8000686:	f7ff fdaf 	bl	80001e8 <delay>
		data <<= 1;
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < 8 ;i++)
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	3301      	adds	r3, #1
 8000694:	75fb      	strb	r3, [r7, #23]
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d99e      	bls.n	80005da <i2c_write_byte+0x16>
	}
	I2CPins->scl == I2C1_SCL ? i2c_scl_low(I2CPins, I2CPins->scl): i2c_scl_low(I2CSlave, I2CSlave->scl);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	7a9b      	ldrb	r3, [r3, #10]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d106      	bne.n	80006b2 <i2c_write_byte+0xee>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	7a9b      	ldrb	r3, [r3, #10]
 80006a8:	4619      	mov	r1, r3
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff fdec 	bl	8000288 <i2c_scl_low>
 80006b0:	e005      	b.n	80006be <i2c_write_byte+0xfa>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a9b      	ldrb	r3, [r3, #10]
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff fde5 	bl	8000288 <i2c_scl_low>
	// i2c_sda_low(I2CPins, I2CPins->sda);
	delay();
 80006be:	f7ff fd93 	bl	80001e8 <delay>
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <i2c_write_Nbyte>:

void i2c_write_Nbyte(GPIO_Handle_t* I2CPins, uint8_t data, uint8_t slave_addr, GPIO_Handle_t* I2CSlave)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b086      	sub	sp, #24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	72fb      	strb	r3, [r7, #11]
 80006d8:	4613      	mov	r3, r2
 80006da:	72bb      	strb	r3, [r7, #10]
	
	uint8_t i;
#if I2C_7bit_addr
	if(I2CPins->scl == I2C1_SCL)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	7a9b      	ldrb	r3, [r3, #10]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d106      	bne.n	80006f2 <i2c_write_Nbyte+0x28>
	{
		slave_addr <<= 1;
 80006e4:	7abb      	ldrb	r3, [r7, #10]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	72bb      	strb	r3, [r7, #10]
		slave_addr &= ~(1);
 80006ea:	7abb      	ldrb	r3, [r7, #10]
 80006ec:	f023 0301 	bic.w	r3, r3, #1
 80006f0:	72bb      	strb	r3, [r7, #10]
	}	
#endif
	uint8_t ack_flag = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]

		// i2c_start(I2CPins);

	if(I2CPins->sda == I2C2_SDA)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	7adb      	ldrb	r3, [r3, #11]
 80006fa:	2b0b      	cmp	r3, #11
 80006fc:	d102      	bne.n	8000704 <i2c_write_Nbyte+0x3a>
	{
		i2c_sda_output(I2CPins);
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe1a 	bl	8000338 <i2c_sda_output>
		// i2c_sda_input(I2CSlave);	
	}

	i2c_write_byte(I2CPins, slave_addr, I2CSlave, &ack_flag);
 8000704:	f107 0317 	add.w	r3, r7, #23
 8000708:	7ab9      	ldrb	r1, [r7, #10]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f7ff ff59 	bl	80005c4 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 8000712:	f107 0317 	add.w	r3, r7, #23
 8000716:	461a      	mov	r2, r3
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff fef7 	bl	800050e <i2c_wait_ack>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d018      	beq.n	8000758 <i2c_write_Nbyte+0x8e>
		goto _err;
	
	i2c_sda_high(I2CPins, I2CPins->sda);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	7adb      	ldrb	r3, [r3, #11]
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fdde 	bl	80002ee <i2c_sda_high>
	delay();
 8000732:	f7ff fd59 	bl	80001e8 <delay>

	i2c_write_byte(I2CPins, data, I2CSlave, &ack_flag);
 8000736:	f107 0317 	add.w	r3, r7, #23
 800073a:	7af9      	ldrb	r1, [r7, #11]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f7ff ff40 	bl	80005c4 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 8000744:	f107 0317 	add.w	r3, r7, #23
 8000748:	461a      	mov	r2, r3
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff fede 	bl	800050e <i2c_wait_ack>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
		goto _err;

	_err:
 8000756:	e000      	b.n	800075a <i2c_write_Nbyte+0x90>
		goto _err;
 8000758:	bf00      	nop
	i2c_sda_high(I2CPins, I2CPins->sda);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	7adb      	ldrb	r3, [r3, #11]
 800075e:	4619      	mov	r1, r3
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff fdc4 	bl	80002ee <i2c_sda_high>
	delay();
 8000766:	f7ff fd3f 	bl	80001e8 <delay>

	if(I2CPins->sda == I2C2_SDA)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	7adb      	ldrb	r3, [r3, #11]
 800076e:	2b0b      	cmp	r3, #11
 8000770:	d103      	bne.n	800077a <i2c_write_Nbyte+0xb0>
	{
		// i2c_sda_output(I2CSlave);
		i2c_sda_input(I2CPins);
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff fdcc 	bl	8000310 <i2c_sda_input>
	}
	return;
 8000778:	bf00      	nop
 800077a:	bf00      	nop
}
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <i2c_read_Nbyte>:
	i2c_scl_low(I2CPins, I2C1_SCL);
	delay();
}

void i2c_read_Nbyte(GPIO_Handle_t* I2CPins, uint8_t* data, uint8_t slave_addr, GPIO_Handle_t* I2CSlave, int len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4613      	mov	r3, r2
 8000792:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
#if I2C_7bit_addr
	if(I2CPins->scl == I2C1_SCL)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	7a9b      	ldrb	r3, [r3, #10]
 8000798:	2b06      	cmp	r3, #6
 800079a:	d106      	bne.n	80007aa <i2c_read_Nbyte+0x26>
	{
		slave_addr <<= 1;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
		slave_addr |= 1;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
	}	
#endif
	uint8_t some_data[] = "slave send\n";
 80007aa:	4a30      	ldr	r2, [pc, #192]	; (800086c <i2c_read_Nbyte+0xe8>)
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t ack_flag = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	75fb      	strb	r3, [r7, #23]
	// {
	// 	i2c_sda_output(I2CPins);
	// 	// i2c_sda_input(I2CSlave);	
	// }

	i2c_write_byte(I2CPins, slave_addr, I2CSlave, &ack_flag);
 80007ba:	f107 0317 	add.w	r3, r7, #23
 80007be:	79f9      	ldrb	r1, [r7, #7]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff fefe 	bl	80005c4 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 80007c8:	f107 0317 	add.w	r3, r7, #23
 80007cc:	461a      	mov	r2, r3
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff fe9c 	bl	800050e <i2c_wait_ack>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d042      	beq.n	8000862 <i2c_read_Nbyte+0xde>
		goto _err;
	i2c_sda_high(I2CPins, I2CPins->sda);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	7adb      	ldrb	r3, [r3, #11]
 80007e0:	4619      	mov	r1, r3
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f7ff fd83 	bl	80002ee <i2c_sda_high>
	delay();
 80007e8:	f7ff fcfe 	bl	80001e8 <delay>
	// i2c_sda_output(I2CSlave);
	// I2CSlave->pGPIOx->ODR = 0xb;
	// i2c_sda_input(I2CSlave);
	// i2c_read_byte(I2CPins, i2c1_read, I2CSlave);

	i2c_sda_output(I2CSlave);
 80007ec:	6838      	ldr	r0, [r7, #0]
 80007ee:	f7ff fda3 	bl	8000338 <i2c_sda_output>


	
	for(i = 0; i< len; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007f8:	e02d      	b.n	8000856 <i2c_read_Nbyte+0xd2>
	{
		i2c_write_byte(I2CSlave, data[i], I2CPins, &ack_flag);
 80007fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	7819      	ldrb	r1, [r3, #0]
 8000804:	f107 0317 	add.w	r3, r7, #23
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	6838      	ldr	r0, [r7, #0]
 800080c:	f7ff feda 	bl	80005c4 <i2c_write_byte>
		// printf("%d\n",data[i]);
		if(i == len-1)
 8000810:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000816:	3b01      	subs	r3, #1
 8000818:	429a      	cmp	r2, r3
 800081a:	d109      	bne.n	8000830 <i2c_read_Nbyte+0xac>
		{
			i2c_sda_input(I2CSlave);//next
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f7ff fd77 	bl	8000310 <i2c_sda_input>
			i2c_sda_output(I2CPins);//next
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff fd88 	bl	8000338 <i2c_sda_output>
			i2c_send_nack(I2CPins);
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fe50 	bl	80004ce <i2c_send_nack>
 800082e:	e00d      	b.n	800084c <i2c_read_Nbyte+0xc8>
		}
		else
		{
			if(!i2c_wait_ack(I2CSlave, I2CPins, &ack_flag))//next
 8000830:	f107 0317 	add.w	r3, r7, #23
 8000834:	461a      	mov	r2, r3
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f7ff fe68 	bl	800050e <i2c_wait_ack>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d103      	bne.n	800084c <i2c_read_Nbyte+0xc8>
			{
				printf("err\n");
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <i2c_read_Nbyte+0xec>)
 8000846:	f000 fc89 	bl	800115c <puts>
				goto _err;
 800084a:	e00b      	b.n	8000864 <i2c_read_Nbyte+0xe0>
	for(i = 0; i< len; i++)
 800084c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000850:	3301      	adds	r3, #1
 8000852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800085a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800085c:	429a      	cmp	r2, r3
 800085e:	dccc      	bgt.n	80007fa <i2c_read_Nbyte+0x76>
			}
				
		}
	}

	_err:
 8000860:	e000      	b.n	8000864 <i2c_read_Nbyte+0xe0>
		goto _err;
 8000862:	bf00      	nop
	return;
 8000864:	bf00      	nop
}
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08001a98 	.word	0x08001a98
 8000870:	08001a94 	.word	0x08001a94

08000874 <main>:



int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af02      	add	r7, sp, #8
	uint8_t some_data[] = "slave send\n";
 800087a:	4a3c      	ldr	r2, [pc, #240]	; (800096c <main+0xf8>)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	ca07      	ldmia	r2, {r0, r1, r2}
 8000882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_Handle_t I2C1Pins, I2C2Pins;
	memset(&I2C1Pins, 0 , sizeof(I2C1Pins));
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	220c      	movs	r2, #12
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fbee 	bl	8001070 <memset>
	memset(&I2C2Pins, 0 , sizeof(I2C2Pins));
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	220c      	movs	r2, #12
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fbe8 	bl	8001070 <memset>

	I2C_GPIOinits(&I2C1Pins);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd5b 	bl	8000360 <I2C_GPIOinits>
	I2C_Slave_GPIOinits(&I2C2Pins);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd8b 	bl	80003c8 <I2C_Slave_GPIOinits>

    GPIO_ButtonInit();
 80008b2:	f7ff fcd1 	bl	8000258 <GPIO_ButtonInit>
	while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80008b6:	bf00      	nop
 80008b8:	2100      	movs	r1, #0
 80008ba:	482d      	ldr	r0, [pc, #180]	; (8000970 <main+0xfc>)
 80008bc:	f000 fb72 	bl	8000fa4 <GPIO_ReadFromInputPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f8      	beq.n	80008b8 <main+0x44>
	delay();
 80008c6:	f7ff fc8f 	bl	80001e8 <delay>

	i2c_start(&I2C1Pins);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fdbb 	bl	800044a <i2c_start>
	i2c_write_Nbyte(&I2C1Pins, 0x51, SLAVE_ADDR, &I2C2Pins);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	f107 0010 	add.w	r0, r7, #16
 80008da:	2268      	movs	r2, #104	; 0x68
 80008dc:	2151      	movs	r1, #81	; 0x51
 80008de:	f7ff fef4 	bl	80006ca <i2c_write_Nbyte>
	// i2c_write_Nbyte(&I2C2Pins, commandcode, &I2C1Pins);
	i2c_stop(&I2C1Pins);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fdd0 	bl	800048c <i2c_stop>

	int len = 11;
 80008ec:	230b      	movs	r3, #11
 80008ee:	603b      	str	r3, [r7, #0]
	i2c_start(&I2C1Pins);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fda8 	bl	800044a <i2c_start>
	i2c_read_Nbyte(&I2C1Pins, &len, SLAVE_ADDR, &I2C2Pins, 1);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4639      	mov	r1, r7
 80008fe:	f107 0010 	add.w	r0, r7, #16
 8000902:	2201      	movs	r2, #1
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	2268      	movs	r2, #104	; 0x68
 8000908:	f7ff ff3c 	bl	8000784 <i2c_read_Nbyte>
	i2c_stop(&I2C1Pins);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fdbb 	bl	800048c <i2c_stop>

	i2c_start(&I2C1Pins);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fd95 	bl	800044a <i2c_start>
	i2c_write_Nbyte(&I2C1Pins, 0x52, SLAVE_ADDR, &I2C2Pins);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	f107 0010 	add.w	r0, r7, #16
 8000926:	2268      	movs	r2, #104	; 0x68
 8000928:	2152      	movs	r1, #82	; 0x52
 800092a:	f7ff fece 	bl	80006ca <i2c_write_Nbyte>
	i2c_stop(&I2C1Pins);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fdaa 	bl	800048c <i2c_stop>
	
	i2c_start(&I2C1Pins);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd84 	bl	800044a <i2c_start>
	i2c_read_Nbyte(&I2C1Pins, some_data, SLAVE_ADDR, &I2C2Pins, 11);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	f107 011c 	add.w	r1, r7, #28
 8000948:	f107 0010 	add.w	r0, r7, #16
 800094c:	220b      	movs	r2, #11
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	2268      	movs	r2, #104	; 0x68
 8000952:	f7ff ff17 	bl	8000784 <i2c_read_Nbyte>
	i2c_stop(&I2C1Pins);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fd96 	bl	800048c <i2c_stop>
	// delay();

//     /* Loop forever */
// 	printf("test\n");
	//this is led gpio configuration
	return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	08001a98 	.word	0x08001a98
 8000970:	40020000 	.word	0x40020000

08000974 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <ITM_SendChar+0x48>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <ITM_SendChar+0x48>)
 8000984:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000988:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <ITM_SendChar+0x4c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <ITM_SendChar+0x4c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000996:	bf00      	nop
 8000998:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f8      	beq.n	8000998 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	6013      	str	r3, [r2, #0]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000edfc 	.word	0xe000edfc
 80009c0:	e0000e00 	.word	0xe0000e00

080009c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e00a      	b.n	80009ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d6:	f3af 8000 	nop.w
 80009da:	4601      	mov	r1, r0
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	b2ca      	uxtb	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf0      	blt.n	80009d6 <_read+0x12>
	}

return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e009      	b.n	8000a24 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffab 	bl	8000974 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf1      	blt.n	8000a10 <_write+0x12>
	}
	return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_close>:

int _close(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_isatty>:

int _isatty(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	return 1;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f000 faa4 	bl	800101c <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20020000 	.word	0x20020000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	20000080 	.word	0x20000080
 8000b08:	20000098 	.word	0x20000098

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b3a:	f000 fa75 	bl	8001028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff fe99 	bl	8000874 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   r0, =_estack
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b50:	08001b10 	.word	0x08001b10
  ldr r2, =_sbss
 8000b54:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b58:	20000094 	.word	0x20000094

08000b5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d161      	bne.n	8000c36 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a33      	ldr	r2, [pc, #204]	; (8000c44 <GPIO_PeriClockControl+0xe4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d106      	bne.n	8000b88 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000b86:	e056      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a30      	ldr	r2, [pc, #192]	; (8000c4c <GPIO_PeriClockControl+0xec>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d106      	bne.n	8000b9e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b9c:	e04b      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <GPIO_PeriClockControl+0xf0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d106      	bne.n	8000bb4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bb2:	e040      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <GPIO_PeriClockControl+0xf4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d106      	bne.n	8000bca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bc8:	e035      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <GPIO_PeriClockControl+0xf8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d106      	bne.n	8000be0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bde:	e02a      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <GPIO_PeriClockControl+0xfc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d106      	bne.n	8000bf6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bf4:	e01f      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <GPIO_PeriClockControl+0x100>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d106      	bne.n	8000c0c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c0a:	e014      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <GPIO_PeriClockControl+0x104>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d106      	bne.n	8000c22 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c20:	e009      	b.n	8000c36 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <GPIO_PeriClockControl+0x108>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d105      	bne.n	8000c36 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <GPIO_PeriClockControl+0xe8>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40021400 	.word	0x40021400
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40021c00 	.word	0x40021c00
 8000c68:	40022000 	.word	0x40022000

08000c6c <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff6e 	bl	8000b60 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	795b      	ldrb	r3, [r3, #5]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d820      	bhi.n	8000cce <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	795b      	ldrb	r3, [r3, #5]
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2103      	movs	r1, #3
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	400a      	ands	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	e0cb      	b.n	8000e66 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	795b      	ldrb	r3, [r3, #5]
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d117      	bne.n	8000d06 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cd6:	4b4b      	ldr	r3, [pc, #300]	; (8000e04 <GPIO_Init+0x198>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	7912      	ldrb	r2, [r2, #4]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	408a      	lsls	r2, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a47      	ldr	r2, [pc, #284]	; (8000e04 <GPIO_Init+0x198>)
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <GPIO_Init+0x198>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	7912      	ldrb	r2, [r2, #4]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	408a      	lsls	r2, r1
 8000cfa:	43d2      	mvns	r2, r2
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4a41      	ldr	r2, [pc, #260]	; (8000e04 <GPIO_Init+0x198>)
 8000d00:	400b      	ands	r3, r1
 8000d02:	6093      	str	r3, [r2, #8]
 8000d04:	e035      	b.n	8000d72 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	d117      	bne.n	8000d3e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <GPIO_Init+0x198>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	7912      	ldrb	r2, [r2, #4]
 8000d16:	4611      	mov	r1, r2
 8000d18:	2201      	movs	r2, #1
 8000d1a:	408a      	lsls	r2, r1
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <GPIO_Init+0x198>)
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <GPIO_Init+0x198>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	7912      	ldrb	r2, [r2, #4]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	2201      	movs	r2, #1
 8000d30:	408a      	lsls	r2, r1
 8000d32:	43d2      	mvns	r2, r2
 8000d34:	4611      	mov	r1, r2
 8000d36:	4a33      	ldr	r2, [pc, #204]	; (8000e04 <GPIO_Init+0x198>)
 8000d38:	400b      	ands	r3, r1
 8000d3a:	60d3      	str	r3, [r2, #12]
 8000d3c:	e019      	b.n	8000d72 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	795b      	ldrb	r3, [r3, #5]
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d115      	bne.n	8000d72 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <GPIO_Init+0x198>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	7912      	ldrb	r2, [r2, #4]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	2201      	movs	r2, #1
 8000d52:	408a      	lsls	r2, r1
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <GPIO_Init+0x198>)
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <GPIO_Init+0x198>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	7912      	ldrb	r2, [r2, #4]
 8000d64:	4611      	mov	r1, r2
 8000d66:	2201      	movs	r2, #1
 8000d68:	408a      	lsls	r2, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <GPIO_Init+0x198>)
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <GPIO_Init+0x19c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d04e      	beq.n	8000e2c <GPIO_Init+0x1c0>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <GPIO_Init+0x1a0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d032      	beq.n	8000dfe <GPIO_Init+0x192>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <GPIO_Init+0x1a4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d02b      	beq.n	8000dfa <GPIO_Init+0x18e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <GPIO_Init+0x1a8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d024      	beq.n	8000df6 <GPIO_Init+0x18a>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <GPIO_Init+0x1ac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01d      	beq.n	8000df2 <GPIO_Init+0x186>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <GPIO_Init+0x1b0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d016      	beq.n	8000dee <GPIO_Init+0x182>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <GPIO_Init+0x1b4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00f      	beq.n	8000dea <GPIO_Init+0x17e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <GPIO_Init+0x1b8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d008      	beq.n	8000de6 <GPIO_Init+0x17a>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <GPIO_Init+0x1bc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <GPIO_Init+0x176>
 8000dde:	2308      	movs	r3, #8
 8000de0:	e025      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000de2:	2300      	movs	r3, #0
 8000de4:	e023      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e021      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000dea:	2306      	movs	r3, #6
 8000dec:	e01f      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e01d      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e01b      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e019      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e017      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e015      	b.n	8000e2e <GPIO_Init+0x1c2>
 8000e02:	bf00      	nop
 8000e04:	40013c00 	.word	0x40013c00
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40021400 	.word	0x40021400
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40021c00 	.word	0x40021c00
 8000e28:	40022000 	.word	0x40022000
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000e30:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <GPIO_Init+0x32c>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <GPIO_Init+0x32c>)
 8000e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000e3c:	7c7a      	ldrb	r2, [r7, #17]
 8000e3e:	7cbb      	ldrb	r3, [r7, #18]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	fa02 f103 	lsl.w	r1, r2, r3
 8000e46:	4a55      	ldr	r2, [pc, #340]	; (8000f9c <GPIO_Init+0x330>)
 8000e48:	7cfb      	ldrb	r3, [r7, #19]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <GPIO_Init+0x334>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	7912      	ldrb	r2, [r2, #4]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	408a      	lsls	r2, r1
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <GPIO_Init+0x334>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	799b      	ldrb	r3, [r3, #6]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2103      	movs	r1, #3
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	400a      	ands	r2, r1
 8000e94:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6899      	ldr	r1, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	79db      	ldrb	r3, [r3, #7]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68d9      	ldr	r1, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7a1b      	ldrb	r3, [r3, #8]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	791b      	ldrb	r3, [r3, #4]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	4619      	mov	r1, r3
 8000f02:	2301      	movs	r3, #1
 8000f04:	408b      	lsls	r3, r1
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4619      	mov	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	400a      	ands	r2, r1
 8000f10:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6859      	ldr	r1, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	795b      	ldrb	r3, [r3, #5]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d131      	bne.n	8000f8e <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	7c3a      	ldrb	r2, [r7, #16]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	7c3a      	ldrb	r2, [r7, #16]
 8000f5c:	4001      	ands	r1, r0
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	7c3a      	ldrb	r2, [r7, #16]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7a5b      	ldrb	r3, [r3, #9]
 8000f74:	461a      	mov	r2, r3
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	7c3a      	ldrb	r2, [r7, #16]
 8000f86:	4301      	orrs	r1, r0
 8000f88:	3208      	adds	r2, #8
 8000f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]

   return value;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000fe0:	78bb      	ldrb	r3, [r7, #2]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d109      	bne.n	8000ffa <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000ff8:	e009      	b.n	800100e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	43d2      	mvns	r2, r2
 8001008:	401a      	ands	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	615a      	str	r2, [r3, #20]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <__errno>:
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <__errno+0x8>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <__libc_init_array>:
 8001028:	b570      	push	{r4, r5, r6, lr}
 800102a:	4d0d      	ldr	r5, [pc, #52]	; (8001060 <__libc_init_array+0x38>)
 800102c:	4c0d      	ldr	r4, [pc, #52]	; (8001064 <__libc_init_array+0x3c>)
 800102e:	1b64      	subs	r4, r4, r5
 8001030:	10a4      	asrs	r4, r4, #2
 8001032:	2600      	movs	r6, #0
 8001034:	42a6      	cmp	r6, r4
 8001036:	d109      	bne.n	800104c <__libc_init_array+0x24>
 8001038:	4d0b      	ldr	r5, [pc, #44]	; (8001068 <__libc_init_array+0x40>)
 800103a:	4c0c      	ldr	r4, [pc, #48]	; (800106c <__libc_init_array+0x44>)
 800103c:	f000 fd1e 	bl	8001a7c <_init>
 8001040:	1b64      	subs	r4, r4, r5
 8001042:	10a4      	asrs	r4, r4, #2
 8001044:	2600      	movs	r6, #0
 8001046:	42a6      	cmp	r6, r4
 8001048:	d105      	bne.n	8001056 <__libc_init_array+0x2e>
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001050:	4798      	blx	r3
 8001052:	3601      	adds	r6, #1
 8001054:	e7ee      	b.n	8001034 <__libc_init_array+0xc>
 8001056:	f855 3b04 	ldr.w	r3, [r5], #4
 800105a:	4798      	blx	r3
 800105c:	3601      	adds	r6, #1
 800105e:	e7f2      	b.n	8001046 <__libc_init_array+0x1e>
 8001060:	08001b08 	.word	0x08001b08
 8001064:	08001b08 	.word	0x08001b08
 8001068:	08001b08 	.word	0x08001b08
 800106c:	08001b0c 	.word	0x08001b0c

08001070 <memset>:
 8001070:	4402      	add	r2, r0
 8001072:	4603      	mov	r3, r0
 8001074:	4293      	cmp	r3, r2
 8001076:	d100      	bne.n	800107a <memset+0xa>
 8001078:	4770      	bx	lr
 800107a:	f803 1b01 	strb.w	r1, [r3], #1
 800107e:	e7f9      	b.n	8001074 <memset+0x4>

08001080 <_puts_r>:
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	460e      	mov	r6, r1
 8001084:	4605      	mov	r5, r0
 8001086:	b118      	cbz	r0, 8001090 <_puts_r+0x10>
 8001088:	6983      	ldr	r3, [r0, #24]
 800108a:	b90b      	cbnz	r3, 8001090 <_puts_r+0x10>
 800108c:	f000 fa48 	bl	8001520 <__sinit>
 8001090:	69ab      	ldr	r3, [r5, #24]
 8001092:	68ac      	ldr	r4, [r5, #8]
 8001094:	b913      	cbnz	r3, 800109c <_puts_r+0x1c>
 8001096:	4628      	mov	r0, r5
 8001098:	f000 fa42 	bl	8001520 <__sinit>
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <_puts_r+0xd0>)
 800109e:	429c      	cmp	r4, r3
 80010a0:	d120      	bne.n	80010e4 <_puts_r+0x64>
 80010a2:	686c      	ldr	r4, [r5, #4]
 80010a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010a6:	07db      	lsls	r3, r3, #31
 80010a8:	d405      	bmi.n	80010b6 <_puts_r+0x36>
 80010aa:	89a3      	ldrh	r3, [r4, #12]
 80010ac:	0598      	lsls	r0, r3, #22
 80010ae:	d402      	bmi.n	80010b6 <_puts_r+0x36>
 80010b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010b2:	f000 fad3 	bl	800165c <__retarget_lock_acquire_recursive>
 80010b6:	89a3      	ldrh	r3, [r4, #12]
 80010b8:	0719      	lsls	r1, r3, #28
 80010ba:	d51d      	bpl.n	80010f8 <_puts_r+0x78>
 80010bc:	6923      	ldr	r3, [r4, #16]
 80010be:	b1db      	cbz	r3, 80010f8 <_puts_r+0x78>
 80010c0:	3e01      	subs	r6, #1
 80010c2:	68a3      	ldr	r3, [r4, #8]
 80010c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010c8:	3b01      	subs	r3, #1
 80010ca:	60a3      	str	r3, [r4, #8]
 80010cc:	bb39      	cbnz	r1, 800111e <_puts_r+0x9e>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da38      	bge.n	8001144 <_puts_r+0xc4>
 80010d2:	4622      	mov	r2, r4
 80010d4:	210a      	movs	r1, #10
 80010d6:	4628      	mov	r0, r5
 80010d8:	f000 f848 	bl	800116c <__swbuf_r>
 80010dc:	3001      	adds	r0, #1
 80010de:	d011      	beq.n	8001104 <_puts_r+0x84>
 80010e0:	250a      	movs	r5, #10
 80010e2:	e011      	b.n	8001108 <_puts_r+0x88>
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <_puts_r+0xd4>)
 80010e6:	429c      	cmp	r4, r3
 80010e8:	d101      	bne.n	80010ee <_puts_r+0x6e>
 80010ea:	68ac      	ldr	r4, [r5, #8]
 80010ec:	e7da      	b.n	80010a4 <_puts_r+0x24>
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <_puts_r+0xd8>)
 80010f0:	429c      	cmp	r4, r3
 80010f2:	bf08      	it	eq
 80010f4:	68ec      	ldreq	r4, [r5, #12]
 80010f6:	e7d5      	b.n	80010a4 <_puts_r+0x24>
 80010f8:	4621      	mov	r1, r4
 80010fa:	4628      	mov	r0, r5
 80010fc:	f000 f888 	bl	8001210 <__swsetup_r>
 8001100:	2800      	cmp	r0, #0
 8001102:	d0dd      	beq.n	80010c0 <_puts_r+0x40>
 8001104:	f04f 35ff 	mov.w	r5, #4294967295
 8001108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800110a:	07da      	lsls	r2, r3, #31
 800110c:	d405      	bmi.n	800111a <_puts_r+0x9a>
 800110e:	89a3      	ldrh	r3, [r4, #12]
 8001110:	059b      	lsls	r3, r3, #22
 8001112:	d402      	bmi.n	800111a <_puts_r+0x9a>
 8001114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001116:	f000 faa2 	bl	800165e <__retarget_lock_release_recursive>
 800111a:	4628      	mov	r0, r5
 800111c:	bd70      	pop	{r4, r5, r6, pc}
 800111e:	2b00      	cmp	r3, #0
 8001120:	da04      	bge.n	800112c <_puts_r+0xac>
 8001122:	69a2      	ldr	r2, [r4, #24]
 8001124:	429a      	cmp	r2, r3
 8001126:	dc06      	bgt.n	8001136 <_puts_r+0xb6>
 8001128:	290a      	cmp	r1, #10
 800112a:	d004      	beq.n	8001136 <_puts_r+0xb6>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	6022      	str	r2, [r4, #0]
 8001132:	7019      	strb	r1, [r3, #0]
 8001134:	e7c5      	b.n	80010c2 <_puts_r+0x42>
 8001136:	4622      	mov	r2, r4
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f817 	bl	800116c <__swbuf_r>
 800113e:	3001      	adds	r0, #1
 8001140:	d1bf      	bne.n	80010c2 <_puts_r+0x42>
 8001142:	e7df      	b.n	8001104 <_puts_r+0x84>
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	250a      	movs	r5, #10
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	6022      	str	r2, [r4, #0]
 800114c:	701d      	strb	r5, [r3, #0]
 800114e:	e7db      	b.n	8001108 <_puts_r+0x88>
 8001150:	08001ac8 	.word	0x08001ac8
 8001154:	08001ae8 	.word	0x08001ae8
 8001158:	08001aa8 	.word	0x08001aa8

0800115c <puts>:
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <puts+0xc>)
 800115e:	4601      	mov	r1, r0
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	f7ff bf8d 	b.w	8001080 <_puts_r>
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000

0800116c <__swbuf_r>:
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116e:	460e      	mov	r6, r1
 8001170:	4614      	mov	r4, r2
 8001172:	4605      	mov	r5, r0
 8001174:	b118      	cbz	r0, 800117e <__swbuf_r+0x12>
 8001176:	6983      	ldr	r3, [r0, #24]
 8001178:	b90b      	cbnz	r3, 800117e <__swbuf_r+0x12>
 800117a:	f000 f9d1 	bl	8001520 <__sinit>
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <__swbuf_r+0x98>)
 8001180:	429c      	cmp	r4, r3
 8001182:	d12b      	bne.n	80011dc <__swbuf_r+0x70>
 8001184:	686c      	ldr	r4, [r5, #4]
 8001186:	69a3      	ldr	r3, [r4, #24]
 8001188:	60a3      	str	r3, [r4, #8]
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	071a      	lsls	r2, r3, #28
 800118e:	d52f      	bpl.n	80011f0 <__swbuf_r+0x84>
 8001190:	6923      	ldr	r3, [r4, #16]
 8001192:	b36b      	cbz	r3, 80011f0 <__swbuf_r+0x84>
 8001194:	6923      	ldr	r3, [r4, #16]
 8001196:	6820      	ldr	r0, [r4, #0]
 8001198:	1ac0      	subs	r0, r0, r3
 800119a:	6963      	ldr	r3, [r4, #20]
 800119c:	b2f6      	uxtb	r6, r6
 800119e:	4283      	cmp	r3, r0
 80011a0:	4637      	mov	r7, r6
 80011a2:	dc04      	bgt.n	80011ae <__swbuf_r+0x42>
 80011a4:	4621      	mov	r1, r4
 80011a6:	4628      	mov	r0, r5
 80011a8:	f000 f926 	bl	80013f8 <_fflush_r>
 80011ac:	bb30      	cbnz	r0, 80011fc <__swbuf_r+0x90>
 80011ae:	68a3      	ldr	r3, [r4, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60a3      	str	r3, [r4, #8]
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	6022      	str	r2, [r4, #0]
 80011ba:	701e      	strb	r6, [r3, #0]
 80011bc:	6963      	ldr	r3, [r4, #20]
 80011be:	3001      	adds	r0, #1
 80011c0:	4283      	cmp	r3, r0
 80011c2:	d004      	beq.n	80011ce <__swbuf_r+0x62>
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	07db      	lsls	r3, r3, #31
 80011c8:	d506      	bpl.n	80011d8 <__swbuf_r+0x6c>
 80011ca:	2e0a      	cmp	r6, #10
 80011cc:	d104      	bne.n	80011d8 <__swbuf_r+0x6c>
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	f000 f911 	bl	80013f8 <_fflush_r>
 80011d6:	b988      	cbnz	r0, 80011fc <__swbuf_r+0x90>
 80011d8:	4638      	mov	r0, r7
 80011da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <__swbuf_r+0x9c>)
 80011de:	429c      	cmp	r4, r3
 80011e0:	d101      	bne.n	80011e6 <__swbuf_r+0x7a>
 80011e2:	68ac      	ldr	r4, [r5, #8]
 80011e4:	e7cf      	b.n	8001186 <__swbuf_r+0x1a>
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <__swbuf_r+0xa0>)
 80011e8:	429c      	cmp	r4, r3
 80011ea:	bf08      	it	eq
 80011ec:	68ec      	ldreq	r4, [r5, #12]
 80011ee:	e7ca      	b.n	8001186 <__swbuf_r+0x1a>
 80011f0:	4621      	mov	r1, r4
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 f80c 	bl	8001210 <__swsetup_r>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0cb      	beq.n	8001194 <__swbuf_r+0x28>
 80011fc:	f04f 37ff 	mov.w	r7, #4294967295
 8001200:	e7ea      	b.n	80011d8 <__swbuf_r+0x6c>
 8001202:	bf00      	nop
 8001204:	08001ac8 	.word	0x08001ac8
 8001208:	08001ae8 	.word	0x08001ae8
 800120c:	08001aa8 	.word	0x08001aa8

08001210 <__swsetup_r>:
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <__swsetup_r+0xcc>)
 8001212:	b570      	push	{r4, r5, r6, lr}
 8001214:	681d      	ldr	r5, [r3, #0]
 8001216:	4606      	mov	r6, r0
 8001218:	460c      	mov	r4, r1
 800121a:	b125      	cbz	r5, 8001226 <__swsetup_r+0x16>
 800121c:	69ab      	ldr	r3, [r5, #24]
 800121e:	b913      	cbnz	r3, 8001226 <__swsetup_r+0x16>
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f97d 	bl	8001520 <__sinit>
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <__swsetup_r+0xd0>)
 8001228:	429c      	cmp	r4, r3
 800122a:	d10f      	bne.n	800124c <__swsetup_r+0x3c>
 800122c:	686c      	ldr	r4, [r5, #4]
 800122e:	89a3      	ldrh	r3, [r4, #12]
 8001230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001234:	0719      	lsls	r1, r3, #28
 8001236:	d42c      	bmi.n	8001292 <__swsetup_r+0x82>
 8001238:	06dd      	lsls	r5, r3, #27
 800123a:	d411      	bmi.n	8001260 <__swsetup_r+0x50>
 800123c:	2309      	movs	r3, #9
 800123e:	6033      	str	r3, [r6, #0]
 8001240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001244:	81a3      	strh	r3, [r4, #12]
 8001246:	f04f 30ff 	mov.w	r0, #4294967295
 800124a:	e03e      	b.n	80012ca <__swsetup_r+0xba>
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <__swsetup_r+0xd4>)
 800124e:	429c      	cmp	r4, r3
 8001250:	d101      	bne.n	8001256 <__swsetup_r+0x46>
 8001252:	68ac      	ldr	r4, [r5, #8]
 8001254:	e7eb      	b.n	800122e <__swsetup_r+0x1e>
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <__swsetup_r+0xd8>)
 8001258:	429c      	cmp	r4, r3
 800125a:	bf08      	it	eq
 800125c:	68ec      	ldreq	r4, [r5, #12]
 800125e:	e7e6      	b.n	800122e <__swsetup_r+0x1e>
 8001260:	0758      	lsls	r0, r3, #29
 8001262:	d512      	bpl.n	800128a <__swsetup_r+0x7a>
 8001264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001266:	b141      	cbz	r1, 800127a <__swsetup_r+0x6a>
 8001268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800126c:	4299      	cmp	r1, r3
 800126e:	d002      	beq.n	8001276 <__swsetup_r+0x66>
 8001270:	4630      	mov	r0, r6
 8001272:	f000 fa5b 	bl	800172c <_free_r>
 8001276:	2300      	movs	r3, #0
 8001278:	6363      	str	r3, [r4, #52]	; 0x34
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	2300      	movs	r3, #0
 8001284:	6063      	str	r3, [r4, #4]
 8001286:	6923      	ldr	r3, [r4, #16]
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	89a3      	ldrh	r3, [r4, #12]
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	81a3      	strh	r3, [r4, #12]
 8001292:	6923      	ldr	r3, [r4, #16]
 8001294:	b94b      	cbnz	r3, 80012aa <__swsetup_r+0x9a>
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800129c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a0:	d003      	beq.n	80012aa <__swsetup_r+0x9a>
 80012a2:	4621      	mov	r1, r4
 80012a4:	4630      	mov	r0, r6
 80012a6:	f000 fa01 	bl	80016ac <__smakebuf_r>
 80012aa:	89a0      	ldrh	r0, [r4, #12]
 80012ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012b0:	f010 0301 	ands.w	r3, r0, #1
 80012b4:	d00a      	beq.n	80012cc <__swsetup_r+0xbc>
 80012b6:	2300      	movs	r3, #0
 80012b8:	60a3      	str	r3, [r4, #8]
 80012ba:	6963      	ldr	r3, [r4, #20]
 80012bc:	425b      	negs	r3, r3
 80012be:	61a3      	str	r3, [r4, #24]
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	b943      	cbnz	r3, 80012d6 <__swsetup_r+0xc6>
 80012c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012c8:	d1ba      	bne.n	8001240 <__swsetup_r+0x30>
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	0781      	lsls	r1, r0, #30
 80012ce:	bf58      	it	pl
 80012d0:	6963      	ldrpl	r3, [r4, #20]
 80012d2:	60a3      	str	r3, [r4, #8]
 80012d4:	e7f4      	b.n	80012c0 <__swsetup_r+0xb0>
 80012d6:	2000      	movs	r0, #0
 80012d8:	e7f7      	b.n	80012ca <__swsetup_r+0xba>
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000
 80012e0:	08001ac8 	.word	0x08001ac8
 80012e4:	08001ae8 	.word	0x08001ae8
 80012e8:	08001aa8 	.word	0x08001aa8

080012ec <__sflush_r>:
 80012ec:	898a      	ldrh	r2, [r1, #12]
 80012ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f2:	4605      	mov	r5, r0
 80012f4:	0710      	lsls	r0, r2, #28
 80012f6:	460c      	mov	r4, r1
 80012f8:	d458      	bmi.n	80013ac <__sflush_r+0xc0>
 80012fa:	684b      	ldr	r3, [r1, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dc05      	bgt.n	800130c <__sflush_r+0x20>
 8001300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	dc02      	bgt.n	800130c <__sflush_r+0x20>
 8001306:	2000      	movs	r0, #0
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800130c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800130e:	2e00      	cmp	r6, #0
 8001310:	d0f9      	beq.n	8001306 <__sflush_r+0x1a>
 8001312:	2300      	movs	r3, #0
 8001314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001318:	682f      	ldr	r7, [r5, #0]
 800131a:	602b      	str	r3, [r5, #0]
 800131c:	d032      	beq.n	8001384 <__sflush_r+0x98>
 800131e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	075a      	lsls	r2, r3, #29
 8001324:	d505      	bpl.n	8001332 <__sflush_r+0x46>
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	1ac0      	subs	r0, r0, r3
 800132a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800132c:	b10b      	cbz	r3, 8001332 <__sflush_r+0x46>
 800132e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	2300      	movs	r3, #0
 8001334:	4602      	mov	r2, r0
 8001336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001338:	6a21      	ldr	r1, [r4, #32]
 800133a:	4628      	mov	r0, r5
 800133c:	47b0      	blx	r6
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	d106      	bne.n	8001352 <__sflush_r+0x66>
 8001344:	6829      	ldr	r1, [r5, #0]
 8001346:	291d      	cmp	r1, #29
 8001348:	d82c      	bhi.n	80013a4 <__sflush_r+0xb8>
 800134a:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <__sflush_r+0x108>)
 800134c:	40ca      	lsrs	r2, r1
 800134e:	07d6      	lsls	r6, r2, #31
 8001350:	d528      	bpl.n	80013a4 <__sflush_r+0xb8>
 8001352:	2200      	movs	r2, #0
 8001354:	6062      	str	r2, [r4, #4]
 8001356:	04d9      	lsls	r1, r3, #19
 8001358:	6922      	ldr	r2, [r4, #16]
 800135a:	6022      	str	r2, [r4, #0]
 800135c:	d504      	bpl.n	8001368 <__sflush_r+0x7c>
 800135e:	1c42      	adds	r2, r0, #1
 8001360:	d101      	bne.n	8001366 <__sflush_r+0x7a>
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	b903      	cbnz	r3, 8001368 <__sflush_r+0x7c>
 8001366:	6560      	str	r0, [r4, #84]	; 0x54
 8001368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800136a:	602f      	str	r7, [r5, #0]
 800136c:	2900      	cmp	r1, #0
 800136e:	d0ca      	beq.n	8001306 <__sflush_r+0x1a>
 8001370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001374:	4299      	cmp	r1, r3
 8001376:	d002      	beq.n	800137e <__sflush_r+0x92>
 8001378:	4628      	mov	r0, r5
 800137a:	f000 f9d7 	bl	800172c <_free_r>
 800137e:	2000      	movs	r0, #0
 8001380:	6360      	str	r0, [r4, #52]	; 0x34
 8001382:	e7c1      	b.n	8001308 <__sflush_r+0x1c>
 8001384:	6a21      	ldr	r1, [r4, #32]
 8001386:	2301      	movs	r3, #1
 8001388:	4628      	mov	r0, r5
 800138a:	47b0      	blx	r6
 800138c:	1c41      	adds	r1, r0, #1
 800138e:	d1c7      	bne.n	8001320 <__sflush_r+0x34>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0c4      	beq.n	8001320 <__sflush_r+0x34>
 8001396:	2b1d      	cmp	r3, #29
 8001398:	d001      	beq.n	800139e <__sflush_r+0xb2>
 800139a:	2b16      	cmp	r3, #22
 800139c:	d101      	bne.n	80013a2 <__sflush_r+0xb6>
 800139e:	602f      	str	r7, [r5, #0]
 80013a0:	e7b1      	b.n	8001306 <__sflush_r+0x1a>
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	e7ad      	b.n	8001308 <__sflush_r+0x1c>
 80013ac:	690f      	ldr	r7, [r1, #16]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d0a9      	beq.n	8001306 <__sflush_r+0x1a>
 80013b2:	0793      	lsls	r3, r2, #30
 80013b4:	680e      	ldr	r6, [r1, #0]
 80013b6:	bf08      	it	eq
 80013b8:	694b      	ldreq	r3, [r1, #20]
 80013ba:	600f      	str	r7, [r1, #0]
 80013bc:	bf18      	it	ne
 80013be:	2300      	movne	r3, #0
 80013c0:	eba6 0807 	sub.w	r8, r6, r7
 80013c4:	608b      	str	r3, [r1, #8]
 80013c6:	f1b8 0f00 	cmp.w	r8, #0
 80013ca:	dd9c      	ble.n	8001306 <__sflush_r+0x1a>
 80013cc:	6a21      	ldr	r1, [r4, #32]
 80013ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d0:	4643      	mov	r3, r8
 80013d2:	463a      	mov	r2, r7
 80013d4:	4628      	mov	r0, r5
 80013d6:	47b0      	blx	r6
 80013d8:	2800      	cmp	r0, #0
 80013da:	dc06      	bgt.n	80013ea <__sflush_r+0xfe>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	e78e      	b.n	8001308 <__sflush_r+0x1c>
 80013ea:	4407      	add	r7, r0
 80013ec:	eba8 0800 	sub.w	r8, r8, r0
 80013f0:	e7e9      	b.n	80013c6 <__sflush_r+0xda>
 80013f2:	bf00      	nop
 80013f4:	20400001 	.word	0x20400001

080013f8 <_fflush_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	690b      	ldr	r3, [r1, #16]
 80013fc:	4605      	mov	r5, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	b913      	cbnz	r3, 8001408 <_fflush_r+0x10>
 8001402:	2500      	movs	r5, #0
 8001404:	4628      	mov	r0, r5
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	b118      	cbz	r0, 8001412 <_fflush_r+0x1a>
 800140a:	6983      	ldr	r3, [r0, #24]
 800140c:	b90b      	cbnz	r3, 8001412 <_fflush_r+0x1a>
 800140e:	f000 f887 	bl	8001520 <__sinit>
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <_fflush_r+0x6c>)
 8001414:	429c      	cmp	r4, r3
 8001416:	d11b      	bne.n	8001450 <_fflush_r+0x58>
 8001418:	686c      	ldr	r4, [r5, #4]
 800141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ef      	beq.n	8001402 <_fflush_r+0xa>
 8001422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001424:	07d0      	lsls	r0, r2, #31
 8001426:	d404      	bmi.n	8001432 <_fflush_r+0x3a>
 8001428:	0599      	lsls	r1, r3, #22
 800142a:	d402      	bmi.n	8001432 <_fflush_r+0x3a>
 800142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800142e:	f000 f915 	bl	800165c <__retarget_lock_acquire_recursive>
 8001432:	4628      	mov	r0, r5
 8001434:	4621      	mov	r1, r4
 8001436:	f7ff ff59 	bl	80012ec <__sflush_r>
 800143a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800143c:	07da      	lsls	r2, r3, #31
 800143e:	4605      	mov	r5, r0
 8001440:	d4e0      	bmi.n	8001404 <_fflush_r+0xc>
 8001442:	89a3      	ldrh	r3, [r4, #12]
 8001444:	059b      	lsls	r3, r3, #22
 8001446:	d4dd      	bmi.n	8001404 <_fflush_r+0xc>
 8001448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144a:	f000 f908 	bl	800165e <__retarget_lock_release_recursive>
 800144e:	e7d9      	b.n	8001404 <_fflush_r+0xc>
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <_fflush_r+0x70>)
 8001452:	429c      	cmp	r4, r3
 8001454:	d101      	bne.n	800145a <_fflush_r+0x62>
 8001456:	68ac      	ldr	r4, [r5, #8]
 8001458:	e7df      	b.n	800141a <_fflush_r+0x22>
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <_fflush_r+0x74>)
 800145c:	429c      	cmp	r4, r3
 800145e:	bf08      	it	eq
 8001460:	68ec      	ldreq	r4, [r5, #12]
 8001462:	e7da      	b.n	800141a <_fflush_r+0x22>
 8001464:	08001ac8 	.word	0x08001ac8
 8001468:	08001ae8 	.word	0x08001ae8
 800146c:	08001aa8 	.word	0x08001aa8

08001470 <std>:
 8001470:	2300      	movs	r3, #0
 8001472:	b510      	push	{r4, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	e9c0 3300 	strd	r3, r3, [r0]
 800147a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800147e:	6083      	str	r3, [r0, #8]
 8001480:	8181      	strh	r1, [r0, #12]
 8001482:	6643      	str	r3, [r0, #100]	; 0x64
 8001484:	81c2      	strh	r2, [r0, #14]
 8001486:	6183      	str	r3, [r0, #24]
 8001488:	4619      	mov	r1, r3
 800148a:	2208      	movs	r2, #8
 800148c:	305c      	adds	r0, #92	; 0x5c
 800148e:	f7ff fdef 	bl	8001070 <memset>
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <std+0x38>)
 8001494:	6263      	str	r3, [r4, #36]	; 0x24
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <std+0x3c>)
 8001498:	62a3      	str	r3, [r4, #40]	; 0x28
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <std+0x40>)
 800149c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <std+0x44>)
 80014a0:	6224      	str	r4, [r4, #32]
 80014a2:	6323      	str	r3, [r4, #48]	; 0x30
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	bf00      	nop
 80014a8:	0800190d 	.word	0x0800190d
 80014ac:	0800192f 	.word	0x0800192f
 80014b0:	08001967 	.word	0x08001967
 80014b4:	0800198b 	.word	0x0800198b

080014b8 <_cleanup_r>:
 80014b8:	4901      	ldr	r1, [pc, #4]	; (80014c0 <_cleanup_r+0x8>)
 80014ba:	f000 b8af 	b.w	800161c <_fwalk_reent>
 80014be:	bf00      	nop
 80014c0:	080013f9 	.word	0x080013f9

080014c4 <__sfmoreglue>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	2268      	movs	r2, #104	; 0x68
 80014c8:	1e4d      	subs	r5, r1, #1
 80014ca:	4355      	muls	r5, r2
 80014cc:	460e      	mov	r6, r1
 80014ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014d2:	f000 f997 	bl	8001804 <_malloc_r>
 80014d6:	4604      	mov	r4, r0
 80014d8:	b140      	cbz	r0, 80014ec <__sfmoreglue+0x28>
 80014da:	2100      	movs	r1, #0
 80014dc:	e9c0 1600 	strd	r1, r6, [r0]
 80014e0:	300c      	adds	r0, #12
 80014e2:	60a0      	str	r0, [r4, #8]
 80014e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014e8:	f7ff fdc2 	bl	8001070 <memset>
 80014ec:	4620      	mov	r0, r4
 80014ee:	bd70      	pop	{r4, r5, r6, pc}

080014f0 <__sfp_lock_acquire>:
 80014f0:	4801      	ldr	r0, [pc, #4]	; (80014f8 <__sfp_lock_acquire+0x8>)
 80014f2:	f000 b8b3 	b.w	800165c <__retarget_lock_acquire_recursive>
 80014f6:	bf00      	nop
 80014f8:	20000085 	.word	0x20000085

080014fc <__sfp_lock_release>:
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <__sfp_lock_release+0x8>)
 80014fe:	f000 b8ae 	b.w	800165e <__retarget_lock_release_recursive>
 8001502:	bf00      	nop
 8001504:	20000085 	.word	0x20000085

08001508 <__sinit_lock_acquire>:
 8001508:	4801      	ldr	r0, [pc, #4]	; (8001510 <__sinit_lock_acquire+0x8>)
 800150a:	f000 b8a7 	b.w	800165c <__retarget_lock_acquire_recursive>
 800150e:	bf00      	nop
 8001510:	20000086 	.word	0x20000086

08001514 <__sinit_lock_release>:
 8001514:	4801      	ldr	r0, [pc, #4]	; (800151c <__sinit_lock_release+0x8>)
 8001516:	f000 b8a2 	b.w	800165e <__retarget_lock_release_recursive>
 800151a:	bf00      	nop
 800151c:	20000086 	.word	0x20000086

08001520 <__sinit>:
 8001520:	b510      	push	{r4, lr}
 8001522:	4604      	mov	r4, r0
 8001524:	f7ff fff0 	bl	8001508 <__sinit_lock_acquire>
 8001528:	69a3      	ldr	r3, [r4, #24]
 800152a:	b11b      	cbz	r3, 8001534 <__sinit+0x14>
 800152c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001530:	f7ff bff0 	b.w	8001514 <__sinit_lock_release>
 8001534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001538:	6523      	str	r3, [r4, #80]	; 0x50
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <__sinit+0x68>)
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <__sinit+0x6c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	62a2      	str	r2, [r4, #40]	; 0x28
 8001542:	42a3      	cmp	r3, r4
 8001544:	bf04      	itt	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	61a3      	streq	r3, [r4, #24]
 800154a:	4620      	mov	r0, r4
 800154c:	f000 f820 	bl	8001590 <__sfp>
 8001550:	6060      	str	r0, [r4, #4]
 8001552:	4620      	mov	r0, r4
 8001554:	f000 f81c 	bl	8001590 <__sfp>
 8001558:	60a0      	str	r0, [r4, #8]
 800155a:	4620      	mov	r0, r4
 800155c:	f000 f818 	bl	8001590 <__sfp>
 8001560:	2200      	movs	r2, #0
 8001562:	60e0      	str	r0, [r4, #12]
 8001564:	2104      	movs	r1, #4
 8001566:	6860      	ldr	r0, [r4, #4]
 8001568:	f7ff ff82 	bl	8001470 <std>
 800156c:	68a0      	ldr	r0, [r4, #8]
 800156e:	2201      	movs	r2, #1
 8001570:	2109      	movs	r1, #9
 8001572:	f7ff ff7d 	bl	8001470 <std>
 8001576:	68e0      	ldr	r0, [r4, #12]
 8001578:	2202      	movs	r2, #2
 800157a:	2112      	movs	r1, #18
 800157c:	f7ff ff78 	bl	8001470 <std>
 8001580:	2301      	movs	r3, #1
 8001582:	61a3      	str	r3, [r4, #24]
 8001584:	e7d2      	b.n	800152c <__sinit+0xc>
 8001586:	bf00      	nop
 8001588:	08001aa4 	.word	0x08001aa4
 800158c:	080014b9 	.word	0x080014b9

08001590 <__sfp>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	4607      	mov	r7, r0
 8001594:	f7ff ffac 	bl	80014f0 <__sfp_lock_acquire>
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <__sfp+0x84>)
 800159a:	681e      	ldr	r6, [r3, #0]
 800159c:	69b3      	ldr	r3, [r6, #24]
 800159e:	b913      	cbnz	r3, 80015a6 <__sfp+0x16>
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff ffbd 	bl	8001520 <__sinit>
 80015a6:	3648      	adds	r6, #72	; 0x48
 80015a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	d503      	bpl.n	80015b8 <__sfp+0x28>
 80015b0:	6833      	ldr	r3, [r6, #0]
 80015b2:	b30b      	cbz	r3, 80015f8 <__sfp+0x68>
 80015b4:	6836      	ldr	r6, [r6, #0]
 80015b6:	e7f7      	b.n	80015a8 <__sfp+0x18>
 80015b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015bc:	b9d5      	cbnz	r5, 80015f4 <__sfp+0x64>
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <__sfp+0x88>)
 80015c0:	60e3      	str	r3, [r4, #12]
 80015c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015c6:	6665      	str	r5, [r4, #100]	; 0x64
 80015c8:	f000 f847 	bl	800165a <__retarget_lock_init_recursive>
 80015cc:	f7ff ff96 	bl	80014fc <__sfp_lock_release>
 80015d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015d8:	6025      	str	r5, [r4, #0]
 80015da:	61a5      	str	r5, [r4, #24]
 80015dc:	2208      	movs	r2, #8
 80015de:	4629      	mov	r1, r5
 80015e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015e4:	f7ff fd44 	bl	8001070 <memset>
 80015e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015f0:	4620      	mov	r0, r4
 80015f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f4:	3468      	adds	r4, #104	; 0x68
 80015f6:	e7d9      	b.n	80015ac <__sfp+0x1c>
 80015f8:	2104      	movs	r1, #4
 80015fa:	4638      	mov	r0, r7
 80015fc:	f7ff ff62 	bl	80014c4 <__sfmoreglue>
 8001600:	4604      	mov	r4, r0
 8001602:	6030      	str	r0, [r6, #0]
 8001604:	2800      	cmp	r0, #0
 8001606:	d1d5      	bne.n	80015b4 <__sfp+0x24>
 8001608:	f7ff ff78 	bl	80014fc <__sfp_lock_release>
 800160c:	230c      	movs	r3, #12
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	e7ee      	b.n	80015f0 <__sfp+0x60>
 8001612:	bf00      	nop
 8001614:	08001aa4 	.word	0x08001aa4
 8001618:	ffff0001 	.word	0xffff0001

0800161c <_fwalk_reent>:
 800161c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001620:	4606      	mov	r6, r0
 8001622:	4688      	mov	r8, r1
 8001624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001628:	2700      	movs	r7, #0
 800162a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800162e:	f1b9 0901 	subs.w	r9, r9, #1
 8001632:	d505      	bpl.n	8001640 <_fwalk_reent+0x24>
 8001634:	6824      	ldr	r4, [r4, #0]
 8001636:	2c00      	cmp	r4, #0
 8001638:	d1f7      	bne.n	800162a <_fwalk_reent+0xe>
 800163a:	4638      	mov	r0, r7
 800163c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001640:	89ab      	ldrh	r3, [r5, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d907      	bls.n	8001656 <_fwalk_reent+0x3a>
 8001646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800164a:	3301      	adds	r3, #1
 800164c:	d003      	beq.n	8001656 <_fwalk_reent+0x3a>
 800164e:	4629      	mov	r1, r5
 8001650:	4630      	mov	r0, r6
 8001652:	47c0      	blx	r8
 8001654:	4307      	orrs	r7, r0
 8001656:	3568      	adds	r5, #104	; 0x68
 8001658:	e7e9      	b.n	800162e <_fwalk_reent+0x12>

0800165a <__retarget_lock_init_recursive>:
 800165a:	4770      	bx	lr

0800165c <__retarget_lock_acquire_recursive>:
 800165c:	4770      	bx	lr

0800165e <__retarget_lock_release_recursive>:
 800165e:	4770      	bx	lr

08001660 <__swhatbuf_r>:
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	460e      	mov	r6, r1
 8001664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001668:	2900      	cmp	r1, #0
 800166a:	b096      	sub	sp, #88	; 0x58
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	da08      	bge.n	8001684 <__swhatbuf_r+0x24>
 8001672:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	602a      	str	r2, [r5, #0]
 800167a:	061a      	lsls	r2, r3, #24
 800167c:	d410      	bmi.n	80016a0 <__swhatbuf_r+0x40>
 800167e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001682:	e00e      	b.n	80016a2 <__swhatbuf_r+0x42>
 8001684:	466a      	mov	r2, sp
 8001686:	f000 f9a7 	bl	80019d8 <_fstat_r>
 800168a:	2800      	cmp	r0, #0
 800168c:	dbf1      	blt.n	8001672 <__swhatbuf_r+0x12>
 800168e:	9a01      	ldr	r2, [sp, #4]
 8001690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001698:	425a      	negs	r2, r3
 800169a:	415a      	adcs	r2, r3
 800169c:	602a      	str	r2, [r5, #0]
 800169e:	e7ee      	b.n	800167e <__swhatbuf_r+0x1e>
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	2000      	movs	r0, #0
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	b016      	add	sp, #88	; 0x58
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080016ac <__smakebuf_r>:
 80016ac:	898b      	ldrh	r3, [r1, #12]
 80016ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016b0:	079d      	lsls	r5, r3, #30
 80016b2:	4606      	mov	r6, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	d507      	bpl.n	80016c8 <__smakebuf_r+0x1c>
 80016b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016bc:	6023      	str	r3, [r4, #0]
 80016be:	6123      	str	r3, [r4, #16]
 80016c0:	2301      	movs	r3, #1
 80016c2:	6163      	str	r3, [r4, #20]
 80016c4:	b002      	add	sp, #8
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
 80016c8:	ab01      	add	r3, sp, #4
 80016ca:	466a      	mov	r2, sp
 80016cc:	f7ff ffc8 	bl	8001660 <__swhatbuf_r>
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	4605      	mov	r5, r0
 80016d4:	4630      	mov	r0, r6
 80016d6:	f000 f895 	bl	8001804 <_malloc_r>
 80016da:	b948      	cbnz	r0, 80016f0 <__smakebuf_r+0x44>
 80016dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016e0:	059a      	lsls	r2, r3, #22
 80016e2:	d4ef      	bmi.n	80016c4 <__smakebuf_r+0x18>
 80016e4:	f023 0303 	bic.w	r3, r3, #3
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	81a3      	strh	r3, [r4, #12]
 80016ee:	e7e3      	b.n	80016b8 <__smakebuf_r+0xc>
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <__smakebuf_r+0x7c>)
 80016f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	6020      	str	r0, [r4, #0]
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	81a3      	strh	r3, [r4, #12]
 80016fe:	9b00      	ldr	r3, [sp, #0]
 8001700:	6163      	str	r3, [r4, #20]
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	6120      	str	r0, [r4, #16]
 8001706:	b15b      	cbz	r3, 8001720 <__smakebuf_r+0x74>
 8001708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800170c:	4630      	mov	r0, r6
 800170e:	f000 f975 	bl	80019fc <_isatty_r>
 8001712:	b128      	cbz	r0, 8001720 <__smakebuf_r+0x74>
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	81a3      	strh	r3, [r4, #12]
 8001720:	89a0      	ldrh	r0, [r4, #12]
 8001722:	4305      	orrs	r5, r0
 8001724:	81a5      	strh	r5, [r4, #12]
 8001726:	e7cd      	b.n	80016c4 <__smakebuf_r+0x18>
 8001728:	080014b9 	.word	0x080014b9

0800172c <_free_r>:
 800172c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800172e:	2900      	cmp	r1, #0
 8001730:	d044      	beq.n	80017bc <_free_r+0x90>
 8001732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001736:	9001      	str	r0, [sp, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f1a1 0404 	sub.w	r4, r1, #4
 800173e:	bfb8      	it	lt
 8001740:	18e4      	addlt	r4, r4, r3
 8001742:	f000 f97d 	bl	8001a40 <__malloc_lock>
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <_free_r+0x94>)
 8001748:	9801      	ldr	r0, [sp, #4]
 800174a:	6813      	ldr	r3, [r2, #0]
 800174c:	b933      	cbnz	r3, 800175c <_free_r+0x30>
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	6014      	str	r4, [r2, #0]
 8001752:	b003      	add	sp, #12
 8001754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001758:	f000 b978 	b.w	8001a4c <__malloc_unlock>
 800175c:	42a3      	cmp	r3, r4
 800175e:	d908      	bls.n	8001772 <_free_r+0x46>
 8001760:	6825      	ldr	r5, [r4, #0]
 8001762:	1961      	adds	r1, r4, r5
 8001764:	428b      	cmp	r3, r1
 8001766:	bf01      	itttt	eq
 8001768:	6819      	ldreq	r1, [r3, #0]
 800176a:	685b      	ldreq	r3, [r3, #4]
 800176c:	1949      	addeq	r1, r1, r5
 800176e:	6021      	streq	r1, [r4, #0]
 8001770:	e7ed      	b.n	800174e <_free_r+0x22>
 8001772:	461a      	mov	r2, r3
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	b10b      	cbz	r3, 800177c <_free_r+0x50>
 8001778:	42a3      	cmp	r3, r4
 800177a:	d9fa      	bls.n	8001772 <_free_r+0x46>
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	1855      	adds	r5, r2, r1
 8001780:	42a5      	cmp	r5, r4
 8001782:	d10b      	bne.n	800179c <_free_r+0x70>
 8001784:	6824      	ldr	r4, [r4, #0]
 8001786:	4421      	add	r1, r4
 8001788:	1854      	adds	r4, r2, r1
 800178a:	42a3      	cmp	r3, r4
 800178c:	6011      	str	r1, [r2, #0]
 800178e:	d1e0      	bne.n	8001752 <_free_r+0x26>
 8001790:	681c      	ldr	r4, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	6053      	str	r3, [r2, #4]
 8001796:	4421      	add	r1, r4
 8001798:	6011      	str	r1, [r2, #0]
 800179a:	e7da      	b.n	8001752 <_free_r+0x26>
 800179c:	d902      	bls.n	80017a4 <_free_r+0x78>
 800179e:	230c      	movs	r3, #12
 80017a0:	6003      	str	r3, [r0, #0]
 80017a2:	e7d6      	b.n	8001752 <_free_r+0x26>
 80017a4:	6825      	ldr	r5, [r4, #0]
 80017a6:	1961      	adds	r1, r4, r5
 80017a8:	428b      	cmp	r3, r1
 80017aa:	bf04      	itt	eq
 80017ac:	6819      	ldreq	r1, [r3, #0]
 80017ae:	685b      	ldreq	r3, [r3, #4]
 80017b0:	6063      	str	r3, [r4, #4]
 80017b2:	bf04      	itt	eq
 80017b4:	1949      	addeq	r1, r1, r5
 80017b6:	6021      	streq	r1, [r4, #0]
 80017b8:	6054      	str	r4, [r2, #4]
 80017ba:	e7ca      	b.n	8001752 <_free_r+0x26>
 80017bc:	b003      	add	sp, #12
 80017be:	bd30      	pop	{r4, r5, pc}
 80017c0:	20000088 	.word	0x20000088

080017c4 <sbrk_aligned>:
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	4e0e      	ldr	r6, [pc, #56]	; (8001800 <sbrk_aligned+0x3c>)
 80017c8:	460c      	mov	r4, r1
 80017ca:	6831      	ldr	r1, [r6, #0]
 80017cc:	4605      	mov	r5, r0
 80017ce:	b911      	cbnz	r1, 80017d6 <sbrk_aligned+0x12>
 80017d0:	f000 f88c 	bl	80018ec <_sbrk_r>
 80017d4:	6030      	str	r0, [r6, #0]
 80017d6:	4621      	mov	r1, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 f887 	bl	80018ec <_sbrk_r>
 80017de:	1c43      	adds	r3, r0, #1
 80017e0:	d00a      	beq.n	80017f8 <sbrk_aligned+0x34>
 80017e2:	1cc4      	adds	r4, r0, #3
 80017e4:	f024 0403 	bic.w	r4, r4, #3
 80017e8:	42a0      	cmp	r0, r4
 80017ea:	d007      	beq.n	80017fc <sbrk_aligned+0x38>
 80017ec:	1a21      	subs	r1, r4, r0
 80017ee:	4628      	mov	r0, r5
 80017f0:	f000 f87c 	bl	80018ec <_sbrk_r>
 80017f4:	3001      	adds	r0, #1
 80017f6:	d101      	bne.n	80017fc <sbrk_aligned+0x38>
 80017f8:	f04f 34ff 	mov.w	r4, #4294967295
 80017fc:	4620      	mov	r0, r4
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
 8001800:	2000008c 	.word	0x2000008c

08001804 <_malloc_r>:
 8001804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001808:	1ccd      	adds	r5, r1, #3
 800180a:	f025 0503 	bic.w	r5, r5, #3
 800180e:	3508      	adds	r5, #8
 8001810:	2d0c      	cmp	r5, #12
 8001812:	bf38      	it	cc
 8001814:	250c      	movcc	r5, #12
 8001816:	2d00      	cmp	r5, #0
 8001818:	4607      	mov	r7, r0
 800181a:	db01      	blt.n	8001820 <_malloc_r+0x1c>
 800181c:	42a9      	cmp	r1, r5
 800181e:	d905      	bls.n	800182c <_malloc_r+0x28>
 8001820:	230c      	movs	r3, #12
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	2600      	movs	r6, #0
 8001826:	4630      	mov	r0, r6
 8001828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800182c:	4e2e      	ldr	r6, [pc, #184]	; (80018e8 <_malloc_r+0xe4>)
 800182e:	f000 f907 	bl	8001a40 <__malloc_lock>
 8001832:	6833      	ldr	r3, [r6, #0]
 8001834:	461c      	mov	r4, r3
 8001836:	bb34      	cbnz	r4, 8001886 <_malloc_r+0x82>
 8001838:	4629      	mov	r1, r5
 800183a:	4638      	mov	r0, r7
 800183c:	f7ff ffc2 	bl	80017c4 <sbrk_aligned>
 8001840:	1c43      	adds	r3, r0, #1
 8001842:	4604      	mov	r4, r0
 8001844:	d14d      	bne.n	80018e2 <_malloc_r+0xde>
 8001846:	6834      	ldr	r4, [r6, #0]
 8001848:	4626      	mov	r6, r4
 800184a:	2e00      	cmp	r6, #0
 800184c:	d140      	bne.n	80018d0 <_malloc_r+0xcc>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	4631      	mov	r1, r6
 8001852:	4638      	mov	r0, r7
 8001854:	eb04 0803 	add.w	r8, r4, r3
 8001858:	f000 f848 	bl	80018ec <_sbrk_r>
 800185c:	4580      	cmp	r8, r0
 800185e:	d13a      	bne.n	80018d6 <_malloc_r+0xd2>
 8001860:	6821      	ldr	r1, [r4, #0]
 8001862:	3503      	adds	r5, #3
 8001864:	1a6d      	subs	r5, r5, r1
 8001866:	f025 0503 	bic.w	r5, r5, #3
 800186a:	3508      	adds	r5, #8
 800186c:	2d0c      	cmp	r5, #12
 800186e:	bf38      	it	cc
 8001870:	250c      	movcc	r5, #12
 8001872:	4629      	mov	r1, r5
 8001874:	4638      	mov	r0, r7
 8001876:	f7ff ffa5 	bl	80017c4 <sbrk_aligned>
 800187a:	3001      	adds	r0, #1
 800187c:	d02b      	beq.n	80018d6 <_malloc_r+0xd2>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	442b      	add	r3, r5
 8001882:	6023      	str	r3, [r4, #0]
 8001884:	e00e      	b.n	80018a4 <_malloc_r+0xa0>
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	1b52      	subs	r2, r2, r5
 800188a:	d41e      	bmi.n	80018ca <_malloc_r+0xc6>
 800188c:	2a0b      	cmp	r2, #11
 800188e:	d916      	bls.n	80018be <_malloc_r+0xba>
 8001890:	1961      	adds	r1, r4, r5
 8001892:	42a3      	cmp	r3, r4
 8001894:	6025      	str	r5, [r4, #0]
 8001896:	bf18      	it	ne
 8001898:	6059      	strne	r1, [r3, #4]
 800189a:	6863      	ldr	r3, [r4, #4]
 800189c:	bf08      	it	eq
 800189e:	6031      	streq	r1, [r6, #0]
 80018a0:	5162      	str	r2, [r4, r5]
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	4638      	mov	r0, r7
 80018a6:	f104 060b 	add.w	r6, r4, #11
 80018aa:	f000 f8cf 	bl	8001a4c <__malloc_unlock>
 80018ae:	f026 0607 	bic.w	r6, r6, #7
 80018b2:	1d23      	adds	r3, r4, #4
 80018b4:	1af2      	subs	r2, r6, r3
 80018b6:	d0b6      	beq.n	8001826 <_malloc_r+0x22>
 80018b8:	1b9b      	subs	r3, r3, r6
 80018ba:	50a3      	str	r3, [r4, r2]
 80018bc:	e7b3      	b.n	8001826 <_malloc_r+0x22>
 80018be:	6862      	ldr	r2, [r4, #4]
 80018c0:	42a3      	cmp	r3, r4
 80018c2:	bf0c      	ite	eq
 80018c4:	6032      	streq	r2, [r6, #0]
 80018c6:	605a      	strne	r2, [r3, #4]
 80018c8:	e7ec      	b.n	80018a4 <_malloc_r+0xa0>
 80018ca:	4623      	mov	r3, r4
 80018cc:	6864      	ldr	r4, [r4, #4]
 80018ce:	e7b2      	b.n	8001836 <_malloc_r+0x32>
 80018d0:	4634      	mov	r4, r6
 80018d2:	6876      	ldr	r6, [r6, #4]
 80018d4:	e7b9      	b.n	800184a <_malloc_r+0x46>
 80018d6:	230c      	movs	r3, #12
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4638      	mov	r0, r7
 80018dc:	f000 f8b6 	bl	8001a4c <__malloc_unlock>
 80018e0:	e7a1      	b.n	8001826 <_malloc_r+0x22>
 80018e2:	6025      	str	r5, [r4, #0]
 80018e4:	e7de      	b.n	80018a4 <_malloc_r+0xa0>
 80018e6:	bf00      	nop
 80018e8:	20000088 	.word	0x20000088

080018ec <_sbrk_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4d06      	ldr	r5, [pc, #24]	; (8001908 <_sbrk_r+0x1c>)
 80018f0:	2300      	movs	r3, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	602b      	str	r3, [r5, #0]
 80018f8:	f7ff f8d2 	bl	8000aa0 <_sbrk>
 80018fc:	1c43      	adds	r3, r0, #1
 80018fe:	d102      	bne.n	8001906 <_sbrk_r+0x1a>
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	b103      	cbz	r3, 8001906 <_sbrk_r+0x1a>
 8001904:	6023      	str	r3, [r4, #0]
 8001906:	bd38      	pop	{r3, r4, r5, pc}
 8001908:	20000090 	.word	0x20000090

0800190c <__sread>:
 800190c:	b510      	push	{r4, lr}
 800190e:	460c      	mov	r4, r1
 8001910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001914:	f000 f8a0 	bl	8001a58 <_read_r>
 8001918:	2800      	cmp	r0, #0
 800191a:	bfab      	itete	ge
 800191c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800191e:	89a3      	ldrhlt	r3, [r4, #12]
 8001920:	181b      	addge	r3, r3, r0
 8001922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001926:	bfac      	ite	ge
 8001928:	6563      	strge	r3, [r4, #84]	; 0x54
 800192a:	81a3      	strhlt	r3, [r4, #12]
 800192c:	bd10      	pop	{r4, pc}

0800192e <__swrite>:
 800192e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001932:	461f      	mov	r7, r3
 8001934:	898b      	ldrh	r3, [r1, #12]
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	4605      	mov	r5, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4616      	mov	r6, r2
 800193e:	d505      	bpl.n	800194c <__swrite+0x1e>
 8001940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001944:	2302      	movs	r3, #2
 8001946:	2200      	movs	r2, #0
 8001948:	f000 f868 	bl	8001a1c <_lseek_r>
 800194c:	89a3      	ldrh	r3, [r4, #12]
 800194e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001956:	81a3      	strh	r3, [r4, #12]
 8001958:	4632      	mov	r2, r6
 800195a:	463b      	mov	r3, r7
 800195c:	4628      	mov	r0, r5
 800195e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001962:	f000 b817 	b.w	8001994 <_write_r>

08001966 <__sseek>:
 8001966:	b510      	push	{r4, lr}
 8001968:	460c      	mov	r4, r1
 800196a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800196e:	f000 f855 	bl	8001a1c <_lseek_r>
 8001972:	1c43      	adds	r3, r0, #1
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	bf15      	itete	ne
 8001978:	6560      	strne	r0, [r4, #84]	; 0x54
 800197a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800197e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001982:	81a3      	strheq	r3, [r4, #12]
 8001984:	bf18      	it	ne
 8001986:	81a3      	strhne	r3, [r4, #12]
 8001988:	bd10      	pop	{r4, pc}

0800198a <__sclose>:
 800198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198e:	f000 b813 	b.w	80019b8 <_close_r>
	...

08001994 <_write_r>:
 8001994:	b538      	push	{r3, r4, r5, lr}
 8001996:	4d07      	ldr	r5, [pc, #28]	; (80019b4 <_write_r+0x20>)
 8001998:	4604      	mov	r4, r0
 800199a:	4608      	mov	r0, r1
 800199c:	4611      	mov	r1, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	602a      	str	r2, [r5, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f7ff f82b 	bl	80009fe <_write>
 80019a8:	1c43      	adds	r3, r0, #1
 80019aa:	d102      	bne.n	80019b2 <_write_r+0x1e>
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	b103      	cbz	r3, 80019b2 <_write_r+0x1e>
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	bd38      	pop	{r3, r4, r5, pc}
 80019b4:	20000090 	.word	0x20000090

080019b8 <_close_r>:
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	4d06      	ldr	r5, [pc, #24]	; (80019d4 <_close_r+0x1c>)
 80019bc:	2300      	movs	r3, #0
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	602b      	str	r3, [r5, #0]
 80019c4:	f7ff f837 	bl	8000a36 <_close>
 80019c8:	1c43      	adds	r3, r0, #1
 80019ca:	d102      	bne.n	80019d2 <_close_r+0x1a>
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	b103      	cbz	r3, 80019d2 <_close_r+0x1a>
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	bd38      	pop	{r3, r4, r5, pc}
 80019d4:	20000090 	.word	0x20000090

080019d8 <_fstat_r>:
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	4d07      	ldr	r5, [pc, #28]	; (80019f8 <_fstat_r+0x20>)
 80019dc:	2300      	movs	r3, #0
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	602b      	str	r3, [r5, #0]
 80019e6:	f7ff f832 	bl	8000a4e <_fstat>
 80019ea:	1c43      	adds	r3, r0, #1
 80019ec:	d102      	bne.n	80019f4 <_fstat_r+0x1c>
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	b103      	cbz	r3, 80019f4 <_fstat_r+0x1c>
 80019f2:	6023      	str	r3, [r4, #0]
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop
 80019f8:	20000090 	.word	0x20000090

080019fc <_isatty_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4d06      	ldr	r5, [pc, #24]	; (8001a18 <_isatty_r+0x1c>)
 8001a00:	2300      	movs	r3, #0
 8001a02:	4604      	mov	r4, r0
 8001a04:	4608      	mov	r0, r1
 8001a06:	602b      	str	r3, [r5, #0]
 8001a08:	f7ff f831 	bl	8000a6e <_isatty>
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	d102      	bne.n	8001a16 <_isatty_r+0x1a>
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	b103      	cbz	r3, 8001a16 <_isatty_r+0x1a>
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	20000090 	.word	0x20000090

08001a1c <_lseek_r>:
 8001a1c:	b538      	push	{r3, r4, r5, lr}
 8001a1e:	4d07      	ldr	r5, [pc, #28]	; (8001a3c <_lseek_r+0x20>)
 8001a20:	4604      	mov	r4, r0
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	602a      	str	r2, [r5, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f7ff f82a 	bl	8000a84 <_lseek>
 8001a30:	1c43      	adds	r3, r0, #1
 8001a32:	d102      	bne.n	8001a3a <_lseek_r+0x1e>
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	b103      	cbz	r3, 8001a3a <_lseek_r+0x1e>
 8001a38:	6023      	str	r3, [r4, #0]
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
 8001a3c:	20000090 	.word	0x20000090

08001a40 <__malloc_lock>:
 8001a40:	4801      	ldr	r0, [pc, #4]	; (8001a48 <__malloc_lock+0x8>)
 8001a42:	f7ff be0b 	b.w	800165c <__retarget_lock_acquire_recursive>
 8001a46:	bf00      	nop
 8001a48:	20000084 	.word	0x20000084

08001a4c <__malloc_unlock>:
 8001a4c:	4801      	ldr	r0, [pc, #4]	; (8001a54 <__malloc_unlock+0x8>)
 8001a4e:	f7ff be06 	b.w	800165e <__retarget_lock_release_recursive>
 8001a52:	bf00      	nop
 8001a54:	20000084 	.word	0x20000084

08001a58 <_read_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	4d07      	ldr	r5, [pc, #28]	; (8001a78 <_read_r+0x20>)
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	4608      	mov	r0, r1
 8001a60:	4611      	mov	r1, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7fe ffac 	bl	80009c4 <_read>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d102      	bne.n	8001a76 <_read_r+0x1e>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	b103      	cbz	r3, 8001a76 <_read_r+0x1e>
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	20000090 	.word	0x20000090

08001a7c <_init>:
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	bf00      	nop
 8001a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a82:	bc08      	pop	{r3}
 8001a84:	469e      	mov	lr, r3
 8001a86:	4770      	bx	lr

08001a88 <_fini>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	bf00      	nop
 8001a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8e:	bc08      	pop	{r3}
 8001a90:	469e      	mov	lr, r3
 8001a92:	4770      	bx	lr
