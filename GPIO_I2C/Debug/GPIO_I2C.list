
GPIO_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f1c  08000f1c  00010f24  2**0
                  CONTENTS
  4 .ARM          00000000  08000f1c  08000f1c  00010f24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f1c  08000f24  00010f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f20  08000f20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010f24  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010f24  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001099  00000000  00000000  00010f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041e  00000000  00000000  00011fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00012410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00012568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000252f  00000000  00000000  00012698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013d5  00000000  00000000  00014bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e48  00000000  00000000  00015f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001fde4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000520  00000000  00000000  0001fe34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ef8 	.word	0x08000ef8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ef8 	.word	0x08000ef8

080001e8 <delay>:
// void delay(void)
// {
// 	for(uint32_t i =0; i < 5000 ; i++);
// }
void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80001ee:	4b18      	ldr	r3, [pc, #96]	; (8000250 <delay+0x68>)
 80001f0:	60fb      	str	r3, [r7, #12]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <delay+0x6c>)
 80001f4:	60bb      	str	r3, [r7, #8]
	uint32_t temp;
    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/200000)-1;// if 1 second, then tick_hz = 1, if 1 millisecond, then tick_hz = 1000
 80001f6:	234f      	movs	r3, #79	; 0x4f
 80001f8:	607b      	str	r3, [r7, #4]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]

	*pSCSR &= ~(0x00FFFFFFFF);
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	431a      	orrs	r2, r3
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source (HSI = 16MHz)
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0204 	orr.w	r2, r3, #4
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]

    // *pSCSR |= ( 1 << 1); //Enables SysTick exception request:

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]

	do
	{
		temp = *pSCSR;
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	603b      	str	r3, [r7, #0]
	} while ((temp & (0x01) && (!(temp & (1<<16)))));
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d004      	beq.n	8000244 <delay+0x5c>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f2      	beq.n	800022a <delay+0x42>
	
	SysTick Control and Status Register
	[16] COUNTFLAG : Returns 1 if timer counted to 0 since last time this was read. 
	
	*/
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e014 	.word	0xe000e014
 8000254:	e000e010 	.word	0xe000e010

08000258 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <GPIO_ButtonInit+0x2c>)
 8000260:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000262:	2300      	movs	r3, #0
 8000264:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000266:	2300      	movs	r3, #0
 8000268:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026a:	2302      	movs	r3, #2
 800026c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fc3b 	bl	8000af0 <GPIO_Init>
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40020000 	.word	0x40020000

08000288 <i2c_scl_low>:

void i2c_scl_low(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 0);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	78f9      	ldrb	r1, [r7, #3]
 800029a:	2200      	movs	r2, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fdd9 	bl	8000e54 <GPIO_WriteToOutputPin>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <i2c_scl_high>:

void i2c_scl_high(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	460b      	mov	r3, r1
 80002b4:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 1);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	78f9      	ldrb	r1, [r7, #3]
 80002bc:	2201      	movs	r2, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fdc8 	bl	8000e54 <GPIO_WriteToOutputPin>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <i2c_sda_low>:

void i2c_sda_low(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	460b      	mov	r3, r1
 80002d6:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 0);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	78f9      	ldrb	r1, [r7, #3]
 80002de:	2200      	movs	r2, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fdb7 	bl	8000e54 <GPIO_WriteToOutputPin>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <i2c_sda_high>:

void i2c_sda_high(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b082      	sub	sp, #8
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	70fb      	strb	r3, [r7, #3]
	GPIO_WriteToOutputPin(I2CPins->pGPIOx, PinNum , 1);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	78f9      	ldrb	r1, [r7, #3]
 8000300:	2201      	movs	r2, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fda6 	bl	8000e54 <GPIO_WriteToOutputPin>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <i2c_sda_input>:

void i2c_sda_input(GPIO_Handle_t* I2CPins)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	715a      	strb	r2, [r3, #5]
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	71da      	strb	r2, [r3, #7]
	GPIO_Init(I2CPins);
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 fbe0 	bl	8000af0 <GPIO_Init>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <i2c_sda_output>:

void i2c_sda_output(GPIO_Handle_t* I2CPins)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	int temp;
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2201      	movs	r2, #1
 8000344:	715a      	strb	r2, [r3, #5]
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	721a      	strb	r2, [r3, #8]
	I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2201      	movs	r2, #1
 8000350:	71da      	strb	r2, [r3, #7]
	GPIO_Init(I2CPins);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 fbcc 	bl	8000af0 <GPIO_Init>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <I2C_GPIOinits>:

void I2C_GPIOinits(GPIO_Handle_t* I2CPins)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    I2CPins->pGPIOx = GPIOB;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <I2C_GPIOinits+0x64>)
 800036c:	601a      	str	r2, [r3, #0]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2201      	movs	r2, #1
 8000372:	715a      	strb	r2, [r3, #5]
    // I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    // I2CPins->GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2201      	movs	r2, #1
 8000378:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2201      	movs	r2, #1
 800037e:	71da      	strb	r2, [r3, #7]
    I2CPins->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2202      	movs	r2, #2
 8000384:	719a      	strb	r2, [r3, #6]


	// I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	// I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
    //scl
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C1_SCL;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2206      	movs	r2, #6
 800038a:	711a      	strb	r2, [r3, #4]
	I2CPins->scl = I2C1_SCL;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2206      	movs	r2, #6
 8000390:	729a      	strb	r2, [r3, #10]
    GPIO_Init(I2CPins);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 fbac 	bl	8000af0 <GPIO_Init>
	i2c_scl_high(I2CPins, I2C1_SCL);
 8000398:	2106      	movs	r1, #6
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f7ff ff85 	bl	80002aa <i2c_scl_high>
    // //scl
    // I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
    // GPIO_Init(&I2CPins);

    //sda
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C1_SDA;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2207      	movs	r2, #7
 80003a4:	711a      	strb	r2, [r3, #4]
	I2CPins->sda = I2C1_SDA;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2207      	movs	r2, #7
 80003aa:	72da      	strb	r2, [r3, #11]
    GPIO_Init(I2CPins);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f000 fb9f 	bl	8000af0 <GPIO_Init>
	i2c_sda_high(I2CPins, I2C1_SDA);
 80003b2:	2107      	movs	r1, #7
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff9a 	bl	80002ee <i2c_sda_high>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40020400 	.word	0x40020400

080003c8 <I2C_Slave_GPIOinits>:

void I2C_Slave_GPIOinits(GPIO_Handle_t* I2CPins)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    I2CPins->pGPIOx = GPIOB;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <I2C_Slave_GPIOinits+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
    I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	715a      	strb	r2, [r3, #5]
    // I2CPins->GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    // I2CPins->GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	
    I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	721a      	strb	r2, [r3, #8]
    I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	71da      	strb	r2, [r3, #7]
    I2CPins->GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2202      	movs	r2, #2
 80003ec:	719a      	strb	r2, [r3, #6]


	// I2CPins->GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	// I2CPins->GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
    //scl
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C2_SCL;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	220a      	movs	r2, #10
 80003f2:	711a      	strb	r2, [r3, #4]
	I2CPins->scl = I2C2_SCL;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	220a      	movs	r2, #10
 80003f8:	729a      	strb	r2, [r3, #10]
    GPIO_Init(I2CPins);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 fb78 	bl	8000af0 <GPIO_Init>

    //sda
    I2CPins->GPIO_PinConfig.GPIO_PinNumber = I2C2_SDA;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	220b      	movs	r2, #11
 8000404:	711a      	strb	r2, [r3, #4]
	I2CPins->sda = I2C2_SDA;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	220b      	movs	r2, #11
 800040a:	72da      	strb	r2, [r3, #11]
    GPIO_Init(I2CPins);
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 fb6f 	bl	8000af0 <GPIO_Init>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40020400 	.word	0x40020400

08000420 <read_i2c_sda>:

static uint8_t read_i2c_sda(GPIO_Handle_t* I2CPins, uint8_t PinNum)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
	int res;
	res = GPIO_ReadFromInputPin(I2CPins->pGPIOx, PinNum);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	78fa      	ldrb	r2, [r7, #3]
 8000432:	4611      	mov	r1, r2
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fcf7 	bl	8000e28 <GPIO_ReadFromInputPin>
 800043a:	4603      	mov	r3, r0
 800043c:	60fb      	str	r3, [r7, #12]
	return res;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	b2db      	uxtb	r3, r3
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <i2c_start>:



static i2c_start(GPIO_Handle_t* I2CPins)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
	i2c_sda_high(I2CPins, I2C1_SDA);
 8000452:	2107      	movs	r1, #7
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff4a 	bl	80002ee <i2c_sda_high>
	delay();
 800045a:	f7ff fec5 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 800045e:	2106      	movs	r1, #6
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ff22 	bl	80002aa <i2c_scl_high>
	delay();
 8000466:	f7ff febf 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 800046a:	2107      	movs	r1, #7
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff ff2d 	bl	80002cc <i2c_sda_low>
	delay();
 8000472:	f7ff feb9 	bl	80001e8 <delay>
	i2c_scl_low(I2CPins, I2C1_SCL);
 8000476:	2106      	movs	r1, #6
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f7ff ff05 	bl	8000288 <i2c_scl_low>
	delay();
 800047e:	f7ff feb3 	bl	80001e8 <delay>
}
 8000482:	bf00      	nop
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <i2c_stop>:

static i2c_stop(GPIO_Handle_t* I2CPins)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	i2c_scl_low(I2CPins, I2C1_SCL);
 8000494:	2106      	movs	r1, #6
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff fef6 	bl	8000288 <i2c_scl_low>
	delay();
 800049c:	f7ff fea4 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 80004a0:	2107      	movs	r1, #7
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff ff12 	bl	80002cc <i2c_sda_low>
	delay();
 80004a8:	f7ff fe9e 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 80004ac:	2106      	movs	r1, #6
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff fefb 	bl	80002aa <i2c_scl_high>
	delay();
 80004b4:	f7ff fe98 	bl	80001e8 <delay>
	i2c_sda_high(I2CPins, I2C1_SDA);
 80004b8:	2107      	movs	r1, #7
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff ff17 	bl	80002ee <i2c_sda_high>
	delay();
 80004c0:	f7ff fe92 	bl	80001e8 <delay>
}
 80004c4:	bf00      	nop
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <i2c_send_nack>:
	i2c_scl_low(I2CPins, I2C1_SCL);
	delay();
}

static void i2c_send_nack(GPIO_Handle_t* I2CPins)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
	i2c_sda_high(I2CPins, I2C1_SDA);
 80004d6:	2107      	movs	r1, #7
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff08 	bl	80002ee <i2c_sda_high>
	delay();
 80004de:	f7ff fe83 	bl	80001e8 <delay>
	i2c_scl_high(I2CPins, I2C1_SCL);
 80004e2:	2106      	movs	r1, #6
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff fee0 	bl	80002aa <i2c_scl_high>
	delay();
 80004ea:	f7ff fe7d 	bl	80001e8 <delay>
	i2c_scl_low(I2CPins, I2C1_SCL);
 80004ee:	2106      	movs	r1, #6
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f7ff fec9 	bl	8000288 <i2c_scl_low>
	delay();
 80004f6:	f7ff fe77 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2C1_SDA);
 80004fa:	2107      	movs	r1, #7
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fee5 	bl	80002cc <i2c_sda_low>
	delay();
 8000502:	f7ff fe71 	bl	80001e8 <delay>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <i2c_wait_ack>:

static uint8_t i2c_wait_ack(GPIO_Handle_t* I2CPins, GPIO_Handle_t* I2CSlave, uint8_t *ack_flag)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
	uint8_t ack_nack = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	75fb      	strb	r3, [r7, #23]

	//Set output first because input is floating
	i2c_sda_output(I2CSlave);
 800051e:	68b8      	ldr	r0, [r7, #8]
 8000520:	f7ff ff0a 	bl	8000338 <i2c_sda_output>
	i2c_sda_input(I2CPins);
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f7ff fef3 	bl	8000310 <i2c_sda_input>
		
		
	if(*ack_flag)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d006      	beq.n	8000540 <i2c_wait_ack+0x32>
	{
		i2c_sda_high(I2CSlave, I2CSlave->sda);
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	7adb      	ldrb	r3, [r3, #11]
 8000536:	4619      	mov	r1, r3
 8000538:	68b8      	ldr	r0, [r7, #8]
 800053a:	f7ff fed8 	bl	80002ee <i2c_sda_high>
 800053e:	e005      	b.n	800054c <i2c_wait_ack+0x3e>
	}
	else
	{
		i2c_sda_low(I2CSlave, I2CSlave->sda);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	7adb      	ldrb	r3, [r3, #11]
 8000544:	4619      	mov	r1, r3
 8000546:	68b8      	ldr	r0, [r7, #8]
 8000548:	f7ff fec0 	bl	80002cc <i2c_sda_low>
	}
	delay();
 800054c:	f7ff fe4c 	bl	80001e8 <delay>
	

	I2CPins->scl == I2C1_SCL ? i2c_scl_high(I2CPins, I2CPins->scl): i2c_scl_high(I2CSlave, I2CSlave->scl);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	7a9b      	ldrb	r3, [r3, #10]
 8000554:	2b06      	cmp	r3, #6
 8000556:	d106      	bne.n	8000566 <i2c_wait_ack+0x58>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	7a9b      	ldrb	r3, [r3, #10]
 800055c:	4619      	mov	r1, r3
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f7ff fea3 	bl	80002aa <i2c_scl_high>
 8000564:	e005      	b.n	8000572 <i2c_wait_ack+0x64>
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	7a9b      	ldrb	r3, [r3, #10]
 800056a:	4619      	mov	r1, r3
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	f7ff fe9c 	bl	80002aa <i2c_scl_high>
	delay();
 8000572:	f7ff fe39 	bl	80001e8 <delay>
	I2CPins->scl == I2C1_SCL ? i2c_scl_low(I2CPins, I2CPins->scl): i2c_scl_low(I2CSlave, I2CSlave->scl);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	7a9b      	ldrb	r3, [r3, #10]
 800057a:	2b06      	cmp	r3, #6
 800057c:	d106      	bne.n	800058c <i2c_wait_ack+0x7e>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	7a9b      	ldrb	r3, [r3, #10]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f7ff fe7f 	bl	8000288 <i2c_scl_low>
 800058a:	e005      	b.n	8000598 <i2c_wait_ack+0x8a>
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	7a9b      	ldrb	r3, [r3, #10]
 8000590:	4619      	mov	r1, r3
 8000592:	68b8      	ldr	r0, [r7, #8]
 8000594:	f7ff fe78 	bl	8000288 <i2c_scl_low>
	delay();
 8000598:	f7ff fe26 	bl	80001e8 <delay>
	i2c_sda_low(I2CPins, I2CPins->sda);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	7adb      	ldrb	r3, [r3, #11]
 80005a0:	4619      	mov	r1, r3
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f7ff fe92 	bl	80002cc <i2c_sda_low>
	delay();
 80005a8:	f7ff fe1e 	bl	80001e8 <delay>

	//Set output first because input is floating
	i2c_sda_output(I2CPins);
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff fec3 	bl	8000338 <i2c_sda_output>
	i2c_sda_input(I2CSlave);	
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f7ff feac 	bl	8000310 <i2c_sda_input>
	
	(*ack_flag) &= ~(0xff);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]

	return ack_nack;
 80005be:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <i2c_write_byte>:

static void i2c_write_byte(GPIO_Handle_t* I2CPins, uint8_t data, GPIO_Handle_t* I2CSlave, uint8_t *ack_flag)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	460b      	mov	r3, r1
 80005d6:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint8_t last_flag = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	75bb      	strb	r3, [r7, #22]
	if(data & 0x01) last_flag = 1;
 80005dc:	7afb      	ldrb	r3, [r7, #11]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <i2c_write_byte+0x22>
 80005e6:	2301      	movs	r3, #1
 80005e8:	75bb      	strb	r3, [r7, #22]
	for(i = 0; i < 8 ;i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	75fb      	strb	r3, [r7, #23]
 80005ee:	e05d      	b.n	80006ac <i2c_write_byte+0xe4>
	{
		I2CPins->scl == I2C1_SCL ? i2c_scl_low(I2CPins, I2CPins->scl): i2c_scl_low(I2CSlave, I2CSlave->scl);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	7a9b      	ldrb	r3, [r3, #10]
 80005f4:	2b06      	cmp	r3, #6
 80005f6:	d106      	bne.n	8000606 <i2c_write_byte+0x3e>
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	7a9b      	ldrb	r3, [r3, #10]
 80005fc:	4619      	mov	r1, r3
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f7ff fe42 	bl	8000288 <i2c_scl_low>
 8000604:	e005      	b.n	8000612 <i2c_write_byte+0x4a>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7a9b      	ldrb	r3, [r3, #10]
 800060a:	4619      	mov	r1, r3
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fe3b 	bl	8000288 <i2c_scl_low>
		
		if(data & 0x80)
 8000612:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000616:	2b00      	cmp	r3, #0
 8000618:	da06      	bge.n	8000628 <i2c_write_byte+0x60>
		{
			
			i2c_sda_high(I2CPins, I2CPins->sda);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	7adb      	ldrb	r3, [r3, #11]
 800061e:	4619      	mov	r1, r3
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f7ff fe64 	bl	80002ee <i2c_sda_high>
 8000626:	e005      	b.n	8000634 <i2c_write_byte+0x6c>
		}
		else
		{
			i2c_sda_low(I2CPins, I2CPins->sda);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	7adb      	ldrb	r3, [r3, #11]
 800062c:	4619      	mov	r1, r3
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f7ff fe4c 	bl	80002cc <i2c_sda_low>
		}
		delay();
 8000634:	f7ff fdd8 	bl	80001e8 <delay>

		if(read_i2c_sda(I2CSlave, I2CSlave->sda) != ((I2CPins->pGPIOx->ODR >>I2CPins->sda) & 0x1))	(*ack_flag) |= (1<<i);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	7adb      	ldrb	r3, [r3, #11]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff feee 	bl	8000420 <read_i2c_sda>
 8000644:	4603      	mov	r3, r0
 8000646:	4619      	mov	r1, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	7ad2      	ldrb	r2, [r2, #11]
 8000652:	40d3      	lsrs	r3, r2
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	4299      	cmp	r1, r3
 800065a:	d00c      	beq.n	8000676 <i2c_write_byte+0xae>
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25a      	sxtb	r2, r3
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	2101      	movs	r1, #1
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b25b      	sxtb	r3, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	701a      	strb	r2, [r3, #0]

		delay();
 8000676:	f7ff fdb7 	bl	80001e8 <delay>

		I2CPins->scl == I2C1_SCL ? i2c_scl_high(I2CPins, I2CPins->scl): i2c_scl_high(I2CSlave, I2CSlave->scl);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	7a9b      	ldrb	r3, [r3, #10]
 800067e:	2b06      	cmp	r3, #6
 8000680:	d106      	bne.n	8000690 <i2c_write_byte+0xc8>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7a9b      	ldrb	r3, [r3, #10]
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff fe0e 	bl	80002aa <i2c_scl_high>
 800068e:	e005      	b.n	800069c <i2c_write_byte+0xd4>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	7a9b      	ldrb	r3, [r3, #10]
 8000694:	4619      	mov	r1, r3
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff fe07 	bl	80002aa <i2c_scl_high>
		delay();
 800069c:	f7ff fda4 	bl	80001e8 <delay>
		data <<= 1;
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < 8 ;i++)
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	3301      	adds	r3, #1
 80006aa:	75fb      	strb	r3, [r7, #23]
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d99e      	bls.n	80005f0 <i2c_write_byte+0x28>
	}
	I2CPins->scl == I2C1_SCL ? i2c_scl_low(I2CPins, I2CPins->scl): i2c_scl_low(I2CSlave, I2CSlave->scl);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	7a9b      	ldrb	r3, [r3, #10]
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d106      	bne.n	80006c8 <i2c_write_byte+0x100>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	7a9b      	ldrb	r3, [r3, #10]
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff fde1 	bl	8000288 <i2c_scl_low>
 80006c6:	e005      	b.n	80006d4 <i2c_write_byte+0x10c>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7a9b      	ldrb	r3, [r3, #10]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff fdda 	bl	8000288 <i2c_scl_low>
	if(last_flag == 0)
 80006d4:	7dbb      	ldrb	r3, [r7, #22]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10b      	bne.n	80006f2 <i2c_write_byte+0x12a>
	{
		i2c_sda_low(I2CPins, I2CPins->sda);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	7adb      	ldrb	r3, [r3, #11]
 80006de:	4619      	mov	r1, r3
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff fdf3 	bl	80002cc <i2c_sda_low>
		i2c_sda_low(I2CSlave, I2CSlave->sda);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7adb      	ldrb	r3, [r3, #11]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff fded 	bl	80002cc <i2c_sda_low>
	}	
	delay();
 80006f2:	f7ff fd79 	bl	80001e8 <delay>
}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <i2c_write_Nbyte>:

void i2c_write_Nbyte(GPIO_Handle_t* I2CPins, uint8_t data, uint8_t slave_addr, GPIO_Handle_t* I2CSlave)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b086      	sub	sp, #24
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	72fb      	strb	r3, [r7, #11]
 800070c:	4613      	mov	r3, r2
 800070e:	72bb      	strb	r3, [r7, #10]
	
	uint8_t i;
#if I2C_7bit_addr
	if(I2CPins->scl == I2C1_SCL)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	7a9b      	ldrb	r3, [r3, #10]
 8000714:	2b06      	cmp	r3, #6
 8000716:	d106      	bne.n	8000726 <i2c_write_Nbyte+0x28>
	{
		slave_addr <<= 1;
 8000718:	7abb      	ldrb	r3, [r7, #10]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	72bb      	strb	r3, [r7, #10]
		slave_addr &= ~(1);
 800071e:	7abb      	ldrb	r3, [r7, #10]
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	72bb      	strb	r3, [r7, #10]
	}	
#endif
	uint8_t ack_flag = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]

	i2c_write_byte(I2CPins, slave_addr, I2CSlave, &ack_flag);
 800072a:	f107 0317 	add.w	r3, r7, #23
 800072e:	7ab9      	ldrb	r1, [r7, #10]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	f7ff ff48 	bl	80005c8 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 8000738:	f107 0317 	add.w	r3, r7, #23
 800073c:	461a      	mov	r2, r3
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fee4 	bl	800050e <i2c_wait_ack>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d021      	beq.n	8000790 <i2c_write_Nbyte+0x92>
		goto _err;
	
	i2c_sda_high(I2CPins, I2CPins->sda);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	7adb      	ldrb	r3, [r3, #11]
 8000750:	4619      	mov	r1, r3
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f7ff fdcb 	bl	80002ee <i2c_sda_high>
	delay();
 8000758:	f7ff fd46 	bl	80001e8 <delay>

	i2c_write_byte(I2CPins, data, I2CSlave, &ack_flag);
 800075c:	f107 0317 	add.w	r3, r7, #23
 8000760:	7af9      	ldrb	r1, [r7, #11]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff ff2f 	bl	80005c8 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 800076a:	f107 0317 	add.w	r3, r7, #23
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff fecb 	bl	800050e <i2c_wait_ack>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00a      	beq.n	8000794 <i2c_write_Nbyte+0x96>
		goto _err;


	i2c_sda_high(I2CPins, I2CPins->sda);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	7adb      	ldrb	r3, [r3, #11]
 8000782:	4619      	mov	r1, r3
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f7ff fdb2 	bl	80002ee <i2c_sda_high>
	delay();
 800078a:	f7ff fd2d 	bl	80001e8 <delay>


	_err:
	return;
 800078e:	e002      	b.n	8000796 <i2c_write_Nbyte+0x98>
		goto _err;
 8000790:	bf00      	nop
 8000792:	e000      	b.n	8000796 <i2c_write_Nbyte+0x98>
		goto _err;
 8000794:	bf00      	nop
	return;
 8000796:	bf00      	nop
}
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <i2c_read_Nbyte>:
	i2c_scl_low(I2CPins, I2C1_SCL);
	delay();
}

void i2c_read_Nbyte(GPIO_Handle_t* I2CPins, uint8_t* data, uint8_t slave_addr, GPIO_Handle_t* I2CSlave, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
#if I2C_7bit_addr
	if(I2CPins->scl == I2C1_SCL)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	7a9b      	ldrb	r3, [r3, #10]
 80007b4:	2b06      	cmp	r3, #6
 80007b6:	d106      	bne.n	80007c6 <i2c_read_Nbyte+0x26>
	{
		slave_addr <<= 1;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	71fb      	strb	r3, [r7, #7]
		slave_addr |= 1;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	71fb      	strb	r3, [r7, #7]
	}	
#endif
	uint8_t some_data[] = "slave send\n";
 80007c6:	4a31      	ldr	r2, [pc, #196]	; (800088c <i2c_read_Nbyte+0xec>)
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t ack_flag = 0x00;
 80007d2:	2300      	movs	r3, #0
 80007d4:	75fb      	strb	r3, [r7, #23]


	i2c_write_byte(I2CPins, slave_addr, I2CSlave, &ack_flag);
 80007d6:	f107 0317 	add.w	r3, r7, #23
 80007da:	79f9      	ldrb	r1, [r7, #7]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff fef2 	bl	80005c8 <i2c_write_byte>

	if(!i2c_wait_ack(I2CPins, I2CSlave, &ack_flag))
 80007e4:	f107 0317 	add.w	r3, r7, #23
 80007e8:	461a      	mov	r2, r3
 80007ea:	6839      	ldr	r1, [r7, #0]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f7ff fe8e 	bl	800050e <i2c_wait_ack>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d041      	beq.n	800087c <i2c_read_Nbyte+0xdc>
		goto _err;

	i2c_sda_high(I2CPins, I2CPins->sda);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	7adb      	ldrb	r3, [r3, #11]
 80007fc:	4619      	mov	r1, r3
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fd75 	bl	80002ee <i2c_sda_high>
	delay();
 8000804:	f7ff fcf0 	bl	80001e8 <delay>

	//Set output first because input is floating
	i2c_sda_output(I2CSlave);
 8000808:	6838      	ldr	r0, [r7, #0]
 800080a:	f7ff fd95 	bl	8000338 <i2c_sda_output>
	i2c_sda_input(I2CPins);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff fd7e 	bl	8000310 <i2c_sda_input>

	for(i = 0; i< len; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800081a:	e029      	b.n	8000870 <i2c_read_Nbyte+0xd0>
	{
		i2c_write_byte(I2CSlave, data[i], I2CPins, &ack_flag);
 800081c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	4413      	add	r3, r2
 8000824:	7819      	ldrb	r1, [r3, #0]
 8000826:	f107 0317 	add.w	r3, r7, #23
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	6838      	ldr	r0, [r7, #0]
 800082e:	f7ff fecb 	bl	80005c8 <i2c_write_byte>
		if(i == len-1)
 8000832:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000838:	3b01      	subs	r3, #1
 800083a:	429a      	cmp	r2, r3
 800083c:	d109      	bne.n	8000852 <i2c_read_Nbyte+0xb2>
		{
			//Set output first because input is floating
			i2c_sda_output(I2CPins);
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f7ff fd7a 	bl	8000338 <i2c_sda_output>
			i2c_sda_input(I2CSlave);
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f7ff fd63 	bl	8000310 <i2c_sda_input>
			i2c_send_nack(I2CPins);
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f7ff fe3f 	bl	80004ce <i2c_send_nack>
 8000850:	e009      	b.n	8000866 <i2c_read_Nbyte+0xc6>
		}
		else
		{
			if(!i2c_wait_ack(I2CSlave, I2CPins, &ack_flag))
 8000852:	f107 0317 	add.w	r3, r7, #23
 8000856:	461a      	mov	r2, r3
 8000858:	68f9      	ldr	r1, [r7, #12]
 800085a:	6838      	ldr	r0, [r7, #0]
 800085c:	f7ff fe57 	bl	800050e <i2c_wait_ack>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00c      	beq.n	8000880 <i2c_read_Nbyte+0xe0>
	for(i = 0; i< len; i++)
 8000866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086a:	3301      	adds	r3, #1
 800086c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000876:	429a      	cmp	r2, r3
 8000878:	dcd0      	bgt.n	800081c <i2c_read_Nbyte+0x7c>
			}
				
		}
	}

	_err:
 800087a:	e002      	b.n	8000882 <i2c_read_Nbyte+0xe2>
		goto _err;
 800087c:	bf00      	nop
 800087e:	e000      	b.n	8000882 <i2c_read_Nbyte+0xe2>
				goto _err;
 8000880:	bf00      	nop
	return;
 8000882:	bf00      	nop
}
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08000f10 	.word	0x08000f10

08000890 <main>:



int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af02      	add	r7, sp, #8
	uint8_t some_data[] = "slave send\n";
 8000896:	4a3c      	ldr	r2, [pc, #240]	; (8000988 <main+0xf8>)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	ca07      	ldmia	r2, {r0, r1, r2}
 800089e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_Handle_t I2C1Pins, I2C2Pins;
	memset(&I2C1Pins, 0 , sizeof(I2C1Pins));
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	220c      	movs	r2, #12
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fb1c 	bl	8000ee8 <memset>
	memset(&I2C2Pins, 0 , sizeof(I2C2Pins));
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	220c      	movs	r2, #12
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fb16 	bl	8000ee8 <memset>

	I2C_GPIOinits(&I2C1Pins);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fd4d 	bl	8000360 <I2C_GPIOinits>
	I2C_Slave_GPIOinits(&I2C2Pins);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd7d 	bl	80003c8 <I2C_Slave_GPIOinits>

    GPIO_ButtonInit();
 80008ce:	f7ff fcc3 	bl	8000258 <GPIO_ButtonInit>
	while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80008d2:	bf00      	nop
 80008d4:	2100      	movs	r1, #0
 80008d6:	482d      	ldr	r0, [pc, #180]	; (800098c <main+0xfc>)
 80008d8:	f000 faa6 	bl	8000e28 <GPIO_ReadFromInputPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <main+0x44>
	delay();
 80008e2:	f7ff fc81 	bl	80001e8 <delay>

	i2c_start(&I2C1Pins);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fdad 	bl	800044a <i2c_start>
	i2c_write_Nbyte(&I2C1Pins, 0x51, SLAVE_ADDR, &I2C2Pins);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	f107 0010 	add.w	r0, r7, #16
 80008f6:	2268      	movs	r2, #104	; 0x68
 80008f8:	2151      	movs	r1, #81	; 0x51
 80008fa:	f7ff ff00 	bl	80006fe <i2c_write_Nbyte>
	i2c_stop(&I2C1Pins);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fdc2 	bl	800048c <i2c_stop>

	int len = 11;
 8000908:	230b      	movs	r3, #11
 800090a:	603b      	str	r3, [r7, #0]
	i2c_start(&I2C1Pins);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fd9a 	bl	800044a <i2c_start>
	i2c_read_Nbyte(&I2C1Pins, &len, SLAVE_ADDR, &I2C2Pins, 1);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4639      	mov	r1, r7
 800091a:	f107 0010 	add.w	r0, r7, #16
 800091e:	2201      	movs	r2, #1
 8000920:	9200      	str	r2, [sp, #0]
 8000922:	2268      	movs	r2, #104	; 0x68
 8000924:	f7ff ff3c 	bl	80007a0 <i2c_read_Nbyte>
	i2c_stop(&I2C1Pins);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fdad 	bl	800048c <i2c_stop>

	i2c_start(&I2C1Pins);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fd87 	bl	800044a <i2c_start>
	i2c_write_Nbyte(&I2C1Pins, 0x52, SLAVE_ADDR, &I2C2Pins);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	f107 0010 	add.w	r0, r7, #16
 8000942:	2268      	movs	r2, #104	; 0x68
 8000944:	2152      	movs	r1, #82	; 0x52
 8000946:	f7ff feda 	bl	80006fe <i2c_write_Nbyte>
	i2c_stop(&I2C1Pins);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fd9c 	bl	800048c <i2c_stop>
	
	i2c_start(&I2C1Pins);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd76 	bl	800044a <i2c_start>
	i2c_read_Nbyte(&I2C1Pins, some_data, SLAVE_ADDR, &I2C2Pins, 11);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	f107 011c 	add.w	r1, r7, #28
 8000964:	f107 0010 	add.w	r0, r7, #16
 8000968:	220b      	movs	r2, #11
 800096a:	9200      	str	r2, [sp, #0]
 800096c:	2268      	movs	r2, #104	; 0x68
 800096e:	f7ff ff17 	bl	80007a0 <i2c_read_Nbyte>
	i2c_stop(&I2C1Pins);
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd88 	bl	800048c <i2c_stop>

	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08000f10 	.word	0x08000f10
 800098c:	40020000 	.word	0x40020000

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000994:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009be:	f000 fa6f 	bl	8000ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff ff65 	bl	8000890 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009d4:	08000f24 	.word	0x08000f24
  ldr r2, =_sbss
 80009d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009dc:	2000001c 	.word	0x2000001c

080009e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d161      	bne.n	8000aba <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a33      	ldr	r2, [pc, #204]	; (8000ac8 <GPIO_PeriClockControl+0xe4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000a0a:	e056      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <GPIO_PeriClockControl+0xec>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d106      	bne.n	8000a22 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a20:	e04b      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <GPIO_PeriClockControl+0xf0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d106      	bne.n	8000a38 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a27      	ldr	r2, [pc, #156]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a36:	e040      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <GPIO_PeriClockControl+0xf4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d106      	bne.n	8000a4e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4c:	e035      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <GPIO_PeriClockControl+0xf8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d106      	bne.n	8000a64 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a62:	e02a      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <GPIO_PeriClockControl+0xfc>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d106      	bne.n	8000a7a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a16      	ldr	r2, [pc, #88]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a78:	e01f      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <GPIO_PeriClockControl+0x100>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d106      	bne.n	8000a90 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a8e:	e014      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <GPIO_PeriClockControl+0x104>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d106      	bne.n	8000aa6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa4:	e009      	b.n	8000aba <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <GPIO_PeriClockControl+0x108>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d105      	bne.n	8000aba <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <GPIO_PeriClockControl+0xe8>)
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40022000 	.word	0x40022000

08000af0 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff6e 	bl	80009e4 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d820      	bhi.n	8000b52 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	795b      	ldrb	r3, [r3, #5]
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2103      	movs	r1, #3
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6819      	ldr	r1, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e0cb      	b.n	8000cea <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d117      	bne.n	8000b8a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <GPIO_Init+0x198>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	7912      	ldrb	r2, [r2, #4]
 8000b62:	4611      	mov	r1, r2
 8000b64:	2201      	movs	r2, #1
 8000b66:	408a      	lsls	r2, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4a47      	ldr	r2, [pc, #284]	; (8000c88 <GPIO_Init+0x198>)
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b70:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <GPIO_Init+0x198>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	7912      	ldrb	r2, [r2, #4]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	408a      	lsls	r2, r1
 8000b7e:	43d2      	mvns	r2, r2
 8000b80:	4611      	mov	r1, r2
 8000b82:	4a41      	ldr	r2, [pc, #260]	; (8000c88 <GPIO_Init+0x198>)
 8000b84:	400b      	ands	r3, r1
 8000b86:	6093      	str	r3, [r2, #8]
 8000b88:	e035      	b.n	8000bf6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	795b      	ldrb	r3, [r3, #5]
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d117      	bne.n	8000bc2 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <GPIO_Init+0x198>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	7912      	ldrb	r2, [r2, #4]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	408a      	lsls	r2, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <GPIO_Init+0x198>)
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <GPIO_Init+0x198>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	7912      	ldrb	r2, [r2, #4]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	408a      	lsls	r2, r1
 8000bb6:	43d2      	mvns	r2, r2
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4a33      	ldr	r2, [pc, #204]	; (8000c88 <GPIO_Init+0x198>)
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	60d3      	str	r3, [r2, #12]
 8000bc0:	e019      	b.n	8000bf6 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	795b      	ldrb	r3, [r3, #5]
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d115      	bne.n	8000bf6 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <GPIO_Init+0x198>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	7912      	ldrb	r2, [r2, #4]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	408a      	lsls	r2, r1
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <GPIO_Init+0x198>)
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <GPIO_Init+0x198>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	7912      	ldrb	r2, [r2, #4]
 8000be8:	4611      	mov	r1, r2
 8000bea:	2201      	movs	r2, #1
 8000bec:	408a      	lsls	r2, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <GPIO_Init+0x198>)
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	791b      	ldrb	r3, [r3, #4]
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	791b      	ldrb	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <GPIO_Init+0x19c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d04e      	beq.n	8000cb0 <GPIO_Init+0x1c0>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <GPIO_Init+0x1a0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d032      	beq.n	8000c82 <GPIO_Init+0x192>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <GPIO_Init+0x1a4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d02b      	beq.n	8000c7e <GPIO_Init+0x18e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <GPIO_Init+0x1a8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d024      	beq.n	8000c7a <GPIO_Init+0x18a>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <GPIO_Init+0x1ac>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d01d      	beq.n	8000c76 <GPIO_Init+0x186>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <GPIO_Init+0x1b0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d016      	beq.n	8000c72 <GPIO_Init+0x182>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <GPIO_Init+0x1b4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00f      	beq.n	8000c6e <GPIO_Init+0x17e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <GPIO_Init+0x1b8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d008      	beq.n	8000c6a <GPIO_Init+0x17a>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <GPIO_Init+0x1bc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <GPIO_Init+0x176>
 8000c62:	2308      	movs	r3, #8
 8000c64:	e025      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c66:	2300      	movs	r3, #0
 8000c68:	e023      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	e021      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c6e:	2306      	movs	r3, #6
 8000c70:	e01f      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c72:	2305      	movs	r3, #5
 8000c74:	e01d      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c76:	2304      	movs	r3, #4
 8000c78:	e01b      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e019      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e017      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e015      	b.n	8000cb2 <GPIO_Init+0x1c2>
 8000c86:	bf00      	nop
 8000c88:	40013c00 	.word	0x40013c00
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021c00 	.word	0x40021c00
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000cb4:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <GPIO_Init+0x32c>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb8:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <GPIO_Init+0x32c>)
 8000cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbe:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000cc0:	7c7a      	ldrb	r2, [r7, #17]
 8000cc2:	7cbb      	ldrb	r3, [r7, #18]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	fa02 f103 	lsl.w	r1, r2, r3
 8000cca:	4a55      	ldr	r2, [pc, #340]	; (8000e20 <GPIO_Init+0x330>)
 8000ccc:	7cfb      	ldrb	r3, [r7, #19]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000cd4:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <GPIO_Init+0x334>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	7912      	ldrb	r2, [r2, #4]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	2201      	movs	r2, #1
 8000ce0:	408a      	lsls	r2, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <GPIO_Init+0x334>)
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	799b      	ldrb	r3, [r3, #6]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	791b      	ldrb	r3, [r3, #4]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	791b      	ldrb	r3, [r3, #4]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2103      	movs	r1, #3
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4619      	mov	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	400a      	ands	r2, r1
 8000d18:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6899      	ldr	r1, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	79db      	ldrb	r3, [r3, #7]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	791b      	ldrb	r3, [r3, #4]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2103      	movs	r1, #3
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	400a      	ands	r2, r1
 8000d58:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68d9      	ldr	r1, [r3, #12]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7a1b      	ldrb	r3, [r3, #8]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	4619      	mov	r1, r3
 8000d86:	2301      	movs	r3, #1
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	400a      	ands	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6859      	ldr	r1, [r3, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d131      	bne.n	8000e12 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	7c3a      	ldrb	r2, [r7, #16]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	7c3a      	ldrb	r2, [r7, #16]
 8000de0:	4001      	ands	r1, r0
 8000de2:	3208      	adds	r2, #8
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	7c3a      	ldrb	r2, [r7, #16]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7a5b      	ldrb	r3, [r3, #9]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	7c3a      	ldrb	r2, [r7, #16]
 8000e0a:	4301      	orrs	r1, r0
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40013c00 	.word	0x40013c00

08000e28 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]

   return value;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
 8000e60:	4613      	mov	r3, r2
 8000e62:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d109      	bne.n	8000e7e <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	78fa      	ldrb	r2, [r7, #3]
 8000e70:	2101      	movs	r1, #1
 8000e72:	fa01 f202 	lsl.w	r2, r1, r2
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000e7c:	e009      	b.n	8000e92 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	78fa      	ldrb	r2, [r7, #3]
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	615a      	str	r2, [r3, #20]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <__libc_init_array>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	4d0d      	ldr	r5, [pc, #52]	; (8000ed8 <__libc_init_array+0x38>)
 8000ea4:	4c0d      	ldr	r4, [pc, #52]	; (8000edc <__libc_init_array+0x3c>)
 8000ea6:	1b64      	subs	r4, r4, r5
 8000ea8:	10a4      	asrs	r4, r4, #2
 8000eaa:	2600      	movs	r6, #0
 8000eac:	42a6      	cmp	r6, r4
 8000eae:	d109      	bne.n	8000ec4 <__libc_init_array+0x24>
 8000eb0:	4d0b      	ldr	r5, [pc, #44]	; (8000ee0 <__libc_init_array+0x40>)
 8000eb2:	4c0c      	ldr	r4, [pc, #48]	; (8000ee4 <__libc_init_array+0x44>)
 8000eb4:	f000 f820 	bl	8000ef8 <_init>
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	10a4      	asrs	r4, r4, #2
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	42a6      	cmp	r6, r4
 8000ec0:	d105      	bne.n	8000ece <__libc_init_array+0x2e>
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
 8000ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ec8:	4798      	blx	r3
 8000eca:	3601      	adds	r6, #1
 8000ecc:	e7ee      	b.n	8000eac <__libc_init_array+0xc>
 8000ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ed2:	4798      	blx	r3
 8000ed4:	3601      	adds	r6, #1
 8000ed6:	e7f2      	b.n	8000ebe <__libc_init_array+0x1e>
 8000ed8:	08000f1c 	.word	0x08000f1c
 8000edc:	08000f1c 	.word	0x08000f1c
 8000ee0:	08000f1c 	.word	0x08000f1c
 8000ee4:	08000f20 	.word	0x08000f20

08000ee8 <memset>:
 8000ee8:	4402      	add	r2, r0
 8000eea:	4603      	mov	r3, r0
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d100      	bne.n	8000ef2 <memset+0xa>
 8000ef0:	4770      	bx	lr
 8000ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ef6:	e7f9      	b.n	8000eec <memset+0x4>

08000ef8 <_init>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	bf00      	nop
 8000efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efe:	bc08      	pop	{r3}
 8000f00:	469e      	mov	lr, r3
 8000f02:	4770      	bx	lr

08000f04 <_fini>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	bf00      	nop
 8000f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0a:	bc08      	pop	{r3}
 8000f0c:	469e      	mov	lr, r3
 8000f0e:	4770      	bx	lr
