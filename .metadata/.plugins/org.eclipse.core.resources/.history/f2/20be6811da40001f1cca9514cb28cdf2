//
//#include "stm32f407xx.h"
//
//typedef struct
//{
//	uint8_t SPI_DeviceMode;
//	uint8_t SPI_BusConfig;			/*!< possible values from @SPI_PIN_MODES >*/
//	uint8_t SPI_SclkSpeed;			/*!< possible values from @SPI_PIN_SPEED >*/
//	uint8_t SPI_DFF;
//	uint8_t SPI_CPOL;
//	uint8_t SPI_CPHA;
//	uint8_t SPI_SSM;
//}SPI_Config_t;
//
///*
// * This is a Handle structure for a GPIO pin
// */
//
//typedef struct
//{
//	SPI_RegDef_t *pSPIx;       		/*!< This holds the base address of the SPI port to which the pin belongs >*/
//	SPI_Config_t SPI_Config;   /*!< This holds SPI pin configuration settings >*/
//
//}SPI_Handle_t;
//
//#define SPI_DEVICE_MODE_MASTER	1
//#define SPI_DEVICE_MODE_SLAVE	0
//
//
//
//#define SPI_BUS_CONFIG_FD				1//full duplex
//#define SPI_BUS_CONFIG_HD				2//half duplex
////#define SPI_BUS_CONFIG_SIMPLEX_TXONLY	3
//#define SPI_BUS_CONFIG_SIMPLEX_RXONLY	3
//
//
//// ref manual 28.5.1
//#define SPI_SCLK_SPEED_DIV2		0
//#define SPI_SCLK_SPEED_DIV4		1
//#define SPI_SCLK_SPEED_DIV8		2
//#define SPI_SCLK_SPEED_DIV16	3
//#define SPI_SCLK_SPEED_DIV32	4
//#define SPI_SCLK_SPEED_DIV64	5
//#define SPI_SCLK_SPEED_DIV128	6
//#define SPI_SCLK_SPEED_DIV256	7
//
//#define SPI_DFF_8BITS	0
//#define SPI_DFF_16BITS	1
//
//#define SPI_CPOL_HIGH	1
//#define SPI_CPOL_LOW	0
//
//#define SPI_CPHA_HIGH	1
//#define SPI_CPHA_LOW	0
//
//
//#define SPI_SSM_EN		1
//#define SPI_SSM_DI		0
//
//
////SPI related status flags def
//#define SPI_TXE_FLAG	(1<<SPI_SR_TXE)
//#define SPI_RXNE_FLAG	(1<<SPI_SR_RXNE)
//#define SPI_BUSY_FLAG	(1<<SPI_SR_BSY)
//
//
//void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
//
///*
// * Init and De-init
// */
//void SPI_Init(SPI_Handle_t *pSPIHandle);
//void SPI_DeInit(SPI_RegDef_t *pSGPIx);
//uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName);
////data send and receive
//void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);
//void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);
//
//
////IRQ configuration and ISR handling
//void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
//void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
//void SPI_IRQHandling(SPI_Handle_t *pSPIHandle);
//
//void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
//void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
//void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi);
