/*
 * stm32f407xx_spi_driver.h
 *
 *  Created on: Feb 9, 2019
 *      Author: admin
 */

#ifndef INC_STM32F407XX_SPI_DRIVER_H_
#define INC_STM32F407XX_SPI_DRIVER_H_

#include "stm32f407xx.h"

/*
 *  Configuration structure for SPIx peripheral
 */
typedef struct
{
	uint8_t SPI_DeviceMode;
	uint8_t SPI_BusConfig;
	uint8_t SPI_SclkSpeed;
	uint8_t SPI_DFF;
	uint8_t SPI_CPOL;
	uint8_t SPI_CPHA;
	uint8_t SPI_SSM;
}SPI_Config_t;


/*
 *Handle structure for SPIx peripheral
 */
typedef struct
{
	SPI_RegDef_t 	*pSPIx;   /*!< This holds the base address of SPIx(x:0,1,2) peripheral >*/
	SPI_Config_t 	SPIConfig;
	uint8_t 		*pTxBuffer; /* !< To store the app. Tx buffer address > */
	uint8_t 		*pRxBuffer;	/* !< To store the app. Rx buffer address > */
	uint32_t 		TxLen;		/* !< To store Tx len > */
	uint32_t 		RxLen;		/* !< To store Tx len > */
	uint8_t 		TxState;	/* !< To store Tx state > */
	uint8_t 		RxState;	/* !< To store Rx state > */
}SPI_Handle_t;


/*
 * SPI application states
 */
#define SPI_READY 					0
#define SPI_BUSY_IN_RX 				1
#define SPI_BUSY_IN_TX 				2

/*
 * Possible SPI Application events
 */
#define SPI_EVENT_TX_CMPLT   1
#define SPI_EVENT_RX_CMPLT   2
#define SPI_EVENT_OVR_ERR    3
#define SPI_EVENT_CRC_ERR    4



/*
 * @SPI_DeviceMode
 */
#define SPI_DEVICE_MODE_MASTER    1
#define SPI_DEVICE_MODE_SLAVE     0


/*
 * @SPI_BusConfig
 */
#define SPI_BUS_CONFIG_FD                1
#define SPI_BUS_CONFIG_HD                2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY    3

/*
 * @SPI_SclkSpeed
 */
#define SPI_SCLK_SPEED_DIV2             	0
#define SPI_SCLK_SPEED_DIV4             	1
#define SPI_SCLK_SPEED_DIV8             	2
#define SPI_SCLK_SPEED_DIV16             	3
#define SPI_SCLK_SPEED_DIV32             	4
#define SPI_SCLK_SPEED_DIV64             	5
#define SPI_SCLK_SPEED_DIV128             	6
#define SPI_SCLK_SPEED_DIV256             	7

/*
 * @SPI_DFF
 */
#define SPI_DFF_8BITS 	0
#define SPI_DFF_16BITS  1

/*
 * @CPOL
 */
#define SPI_CPOL_HIGH 1
#define SPI_CPOL_LOW 0

/*
 * @CPHA
 */
#define SPI_CPHA_HIGH 1
#define SPI_CPHA_LOW 0

/*
 * @SPI_SSM
 */
#define SPI_SSM_EN     1
#define SPI_SSM_DI     0


/*
 * SPI related status flags definitions
 */
#define SPI_TXE_FLAG    ( 1 << SPI_SR_TXE)
#define SPI_RXNE_FLAG   ( 1 << SPI_SR_RXNE)
#define SPI_BUSY_FLAG   ( 1 << SPI_SR_BSY)



/******************************************************************************************
 *								APIs supported by this driver
 *		 For more information about the APIs check the function definitions
 ******************************************************************************************/
/*
 * Peripheral Clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);


/*
 * Data Send and Receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len);
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len);
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len);

/*
 * IRQ Configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

/*
 * Other Peripheral Control APIs
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName);
void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx);
void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle);
void SPI_CloseReception(SPI_Handle_t *pSPIHandle);
uint8_t I2C_DeviceMode(I2C_RegDef_t *I2Cx);

/*
 * Application callback
 */
void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv);

#endif /* INC_STM32F407XX_SPI_DRIVER_H_ */
//
//#include "stm32f407xx_gpio_driver.h"
//
//
///*********************************************************************
// * @fn      		  - SPI_PeriClockControl
// *
// * @brief             - This function enables or disables peripheral clock for the given SPI port
// *
// * @param[in]         - base address of the spi peripheral
// * @param[in]         - ENABLE or DISABLE macros
// * @param[in]         -
// *
// * @return            -  none
// *
// * @Note              -  none
//
// */
//void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi == ENABLE)
//	{
//		if(pSPIx == SPI1)
//		{
//			SPI1_PCLK_EN();
//		}
//		else if (pSPIx == SPI2)
//		{
//			SPI2_PCLK_EN();
//		}
//		else if (pSPIx == SPI3)
//		{
//			SPI3_PCLK_EN();
//		}
//
//	}
//	else
//	{
//		//TODO
//		if(pSPIx == SPI1)
//		{
//			SPI1_PCLK_DI();
//		}
//		else if (pSPIx == SPI2)
//		{
//			SPI2_PCLK_DI();
//		}
//		else if (pSPIx == SPI3)
//		{
//			SPI3_PCLK_DI();
//		}
//
//	}
//
//}
//
//
//void SPI_Init(SPI_Handle_t *pSPIHandle)
//{
//	//first configure the SPI_CR1 register
//	 uint32_t tempreg = 0;
//
//	 //enable clock
//	 SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
//
//
//	 //1. configure the device mode
//	 tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
//
//	 //2. configure the bus
//
//	 if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
//	 {
//		 //bidi mode should be cleared
//		 tempreg &= ~(1<<SPI_CR1_BIDIMODE);
//	 }
//	 else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
//	 {
//		 //bidi mode should be set
//		 tempreg |= (1<<SPI_CR1_BIDIMODE);
//	 }
//	 else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
//	 {
//		 //bidi mode should be cleared
//		 tempreg &= ~(1<<SPI_CR1_BIDIMODE);
//		 //rxonly mode should be cleared
//		 tempreg |= (1<<SPI_CR1_RXONLY);
//	 }
//
//	 //3. Configure the spi clock speed(baud rate)
//	 tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR ;
//
//	 //4. Configure the DFF
//	 tempreg |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
//
//	 //5. Configure the CPOL
//	 tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
//
//	 //6. Configure the CPHA
//	 tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
//
//	 pSPIHandle->pSPIx->CR1 = tempreg;
//
//}
//
//void SPI_DeInit(SPI_RegDef_t *pSPIx)
//{
//	if(pSPIx == SPI1)
//	{
//		SPI1_REG_RESET();
//	}
//	else if (pSPIx == SPI2)
//	{
//		SPI2_REG_RESET();
//	}
//	else if (pSPIx == SPI3)
//	{
//		SPI3_REG_RESET();
//	}
//}
//
//
//uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
//{
//	if(pSPIx->SR & FlagName)
//	{
//		return FLAG_SET;
//	}
//	return FLAG_RESET;
//}
//
//
//void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
//{
//	while(Len > 0)
//	{
//		//1. wait until TXE is set
//		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
//
//		//2. CHECK DFF IN CR1
//		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
//		{
//			//16bit dff
//			//load data to DR
//			pSPIx->DR = *((uint16_t*)pTxBuffer);
//			Len -= 2;
//			(uint16_t*)pTxBuffer++;
//		}
//		else
//		{
//			pSPIx->DR = *((uint16_t*)pTxBuffer);
//			Len -= 1;
//			pTxBuffer++;
//		}
//
//	}
//}
//
//void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
//{
//	while(Len > 0)
//	{
//		//1. wait until TXE is set
//		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
//
//		//2. CHECK DFF IN CR1
//		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
//		{
//			//16bit dff
//			//load data from DR to Rxbuffer
//			*((uint16_t*)pRxBuffer) = pSPIx->DR;
//			Len -= 2;
//			(uint16_t*)pRxBuffer++;
//		}
//		else
//		{
//			*((uint16_t*)pRxBuffer) = pSPIx->DR;
//			Len -= 1;
//			pRxBuffer++;
//		}
//
//	}
//}
//
//void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi)
//	{
//		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
//	}
//	else
//	{
//		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
//	}
//}
//
//void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi)
//	{
//		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
//	}
//	else
//	{
//		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
//	}
//}
//
//void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi)
//	{
//		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
//	}
//	else
//	{
//		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
//	}
//}
