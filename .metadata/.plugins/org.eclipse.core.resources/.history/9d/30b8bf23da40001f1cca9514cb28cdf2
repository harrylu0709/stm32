//
//#include "stm32f407xx_gpio_driver.h"
//
//
///*********************************************************************
// * @fn      		  - SPI_PeriClockControl
// *
// * @brief             - This function enables or disables peripheral clock for the given SPI port
// *
// * @param[in]         - base address of the spi peripheral
// * @param[in]         - ENABLE or DISABLE macros
// * @param[in]         -
// *
// * @return            -  none
// *
// * @Note              -  none
//
// */
//void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi == ENABLE)
//	{
//		if(pSPIx == SPI1)
//		{
//			SPI1_PCLK_EN();
//		}
//		else if (pSPIx == SPI2)
//		{
//			SPI2_PCLK_EN();
//		}
//		else if (pSPIx == SPI3)
//		{
//			SPI3_PCLK_EN();
//		}
//
//	}
//	else
//	{
//		//TODO
//		if(pSPIx == SPI1)
//		{
//			SPI1_PCLK_DI();
//		}
//		else if (pSPIx == SPI2)
//		{
//			SPI2_PCLK_DI();
//		}
//		else if (pSPIx == SPI3)
//		{
//			SPI3_PCLK_DI();
//		}
//
//	}
//
//}
//
//
//void SPI_Init(SPI_Handle_t *pSPIHandle)
//{
//	//first configure the SPI_CR1 register
//	 uint32_t tempreg = 0;
//
//	 //enable clock
//	 SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
//
//
//	 //1. configure the device mode
//	 tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
//
//	 //2. configure the bus
//
//	 if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
//	 {
//		 //bidi mode should be cleared
//		 tempreg &= ~(1<<SPI_CR1_BIDIMODE);
//	 }
//	 else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
//	 {
//		 //bidi mode should be set
//		 tempreg |= (1<<SPI_CR1_BIDIMODE);
//	 }
//	 else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
//	 {
//		 //bidi mode should be cleared
//		 tempreg &= ~(1<<SPI_CR1_BIDIMODE);
//		 //rxonly mode should be cleared
//		 tempreg |= (1<<SPI_CR1_RXONLY);
//	 }
//
//	 //3. Configure the spi clock speed(baud rate)
//	 tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR ;
//
//	 //4. Configure the DFF
//	 tempreg |= pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
//
//	 //5. Configure the CPOL
//	 tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
//
//	 //6. Configure the CPHA
//	 tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
//
//	 pSPIHandle->pSPIx->CR1 = tempreg;
//
//}
//
//void SPI_DeInit(SPI_RegDef_t *pSPIx)
//{
//	if(pSPIx == SPI1)
//	{
//		SPI1_REG_RESET();
//	}
//	else if (pSPIx == SPI2)
//	{
//		SPI2_REG_RESET();
//	}
//	else if (pSPIx == SPI3)
//	{
//		SPI3_REG_RESET();
//	}
//}
//
//
//uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
//{
//	if(pSPIx->SR & FlagName)
//	{
//		return FLAG_SET;
//	}
//	return FLAG_RESET;
//}
//
//
//void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
//{
//	while(Len > 0)
//	{
//		//1. wait until TXE is set
//		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
//
//		//2. CHECK DFF IN CR1
//		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
//		{
//			//16bit dff
//			//load data to DR
//			pSPIx->DR = *((uint16_t*)pTxBuffer);
//			Len -= 2;
//			(uint16_t*)pTxBuffer++;
//		}
//		else
//		{
//			pSPIx->DR = *((uint16_t*)pTxBuffer);
//			Len -= 1;
//			pTxBuffer++;
//		}
//
//	}
//}
//
//void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
//{
//	while(Len > 0)
//	{
//		//1. wait until TXE is set
//		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
//
//		//2. CHECK DFF IN CR1
//		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
//		{
//			//16bit dff
//			//load data from DR to Rxbuffer
//			*((uint16_t*)pRxBuffer) = pSPIx->DR;
//			Len -= 2;
//			(uint16_t*)pRxBuffer++;
//		}
//		else
//		{
//			*((uint16_t*)pRxBuffer) = pSPIx->DR;
//			Len -= 1;
//			pRxBuffer++;
//		}
//
//	}
//}
//
//void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi ==  ENABLE)
//	{
//		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
//	}
//	else
//	{
//		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
//	}
//}
//
//void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi ==  ENABLE)
//	{
//		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
//	}
//	else
//	{
//		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
//	}
//}
//
//void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
//{
//	if(EnorDi ==  ENABLE)
//	{
//		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
//	}
//	else
//	{
//		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
//	}
//}
