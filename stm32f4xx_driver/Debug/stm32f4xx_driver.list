
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000229c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002530  08002530  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002530  08002530  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002530  08002530  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000070  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002e9d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c61  00000000  00000000  00022f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  00023ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000328  00000000  00000000  00023f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044cb  00000000  00000000  00024278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000477a  00000000  00000000  00028743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cba9  00000000  00000000  0002cebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00039a66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001468  00000000  00000000  00039ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000078 	.word	0x20000078
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800242c 	.word	0x0800242c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	0800242c 	.word	0x0800242c

080001e8 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <init_systick_timer+0x5c>)
 80001f2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <init_systick_timer+0x60>)
 80001f6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80001f8:	4a14      	ldr	r2, [pc, #80]	; (800024c <init_systick_timer+0x64>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000200:	3b01      	subs	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	431a      	orrs	r2, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0202 	orr.w	r2, r3, #2
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0204 	orr.w	r2, r3, #4
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0201 	orr.w	r2, r3, #1
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]

}
 800023a:	bf00      	nop
 800023c:	371c      	adds	r7, #28
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	e000e014 	.word	0xe000e014
 8000248:	e000e010 	.word	0xe000e010
 800024c:	00f42400 	.word	0x00f42400

08000250 <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8000250:	b4b0      	push	{r4, r5, r7}
 8000252:	b08b      	sub	sp, #44	; 0x2c
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <get_day_of_week+0x38>)
 800025c:	f107 040c 	add.w	r4, r7, #12
 8000260:	461d      	mov	r5, r3
 8000262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	3b01      	subs	r3, #1
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3328      	adds	r3, #40	; 0x28
 8000276:	443b      	add	r3, r7
 8000278:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800027c:	4618      	mov	r0, r3
 800027e:	372c      	adds	r7, #44	; 0x2c
 8000280:	46bd      	mov	sp, r7
 8000282:	bcb0      	pop	{r4, r5, r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	08002488 	.word	0x08002488

0800028c <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	6039      	str	r1, [r7, #0]
 8000296:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b09      	cmp	r3, #9
 800029c:	d809      	bhi.n	80002b2 <number_to_string+0x26>
		buf[0] = '0';
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2230      	movs	r2, #48	; 0x30
 80002a2:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	3230      	adds	r2, #48	; 0x30
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80002b0:	e01f      	b.n	80002f2 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2b09      	cmp	r3, #9
 80002b6:	d91c      	bls.n	80002f2 <number_to_string+0x66>
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2b62      	cmp	r3, #98	; 0x62
 80002bc:	d819      	bhi.n	80002f2 <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <number_to_string+0x70>)
 80002c2:	fba2 2303 	umull	r2, r3, r2, r3
 80002c6:	08db      	lsrs	r3, r3, #3
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	3330      	adds	r3, #48	; 0x30
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 80002d2:	79fa      	ldrb	r2, [r7, #7]
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <number_to_string+0x70>)
 80002d6:	fba3 1302 	umull	r1, r3, r3, r2
 80002da:	08d9      	lsrs	r1, r3, #3
 80002dc:	460b      	mov	r3, r1
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	440b      	add	r3, r1
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	3230      	adds	r2, #48	; 0x30
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	cccccccd 	.word	0xcccccccd

08000300 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <time_to_string+0x48>)
 800030a:	223a      	movs	r2, #58	; 0x3a
 800030c:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <time_to_string+0x48>)
 8000310:	223a      	movs	r2, #58	; 0x3a
 8000312:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	789b      	ldrb	r3, [r3, #2]
 8000318:	490b      	ldr	r1, [pc, #44]	; (8000348 <time_to_string+0x48>)
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffb6 	bl	800028c <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	4909      	ldr	r1, [pc, #36]	; (800034c <time_to_string+0x4c>)
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffb0 	bl	800028c <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <time_to_string+0x50>)
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ffaa 	bl	800028c <number_to_string>

	buf[8] = '\0';
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <time_to_string+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	721a      	strb	r2, [r3, #8]

	return buf;
 800033e:	4b02      	ldr	r3, [pc, #8]	; (8000348 <time_to_string+0x48>)

}
 8000340:	4618      	mov	r0, r3
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000094 	.word	0x20000094
 800034c:	20000097 	.word	0x20000097
 8000350:	2000009a 	.word	0x2000009a

08000354 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <date_to_string+0x48>)
 800035e:	222f      	movs	r2, #47	; 0x2f
 8000360:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <date_to_string+0x48>)
 8000364:	222f      	movs	r2, #47	; 0x2f
 8000366:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	490b      	ldr	r1, [pc, #44]	; (800039c <date_to_string+0x48>)
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff8c 	bl	800028c <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	785b      	ldrb	r3, [r3, #1]
 8000378:	4909      	ldr	r1, [pc, #36]	; (80003a0 <date_to_string+0x4c>)
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff86 	bl	800028c <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	789b      	ldrb	r3, [r3, #2]
 8000384:	4907      	ldr	r1, [pc, #28]	; (80003a4 <date_to_string+0x50>)
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff80 	bl	800028c <number_to_string>

	buf[8]= '\0';
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <date_to_string+0x48>)
 800038e:	2200      	movs	r2, #0
 8000390:	721a      	strb	r2, [r3, #8]

	return buf;
 8000392:	4b02      	ldr	r3, [pc, #8]	; (800039c <date_to_string+0x48>)

}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200000a0 	.word	0x200000a0
 80003a0:	200000a3 	.word	0x200000a3
 80003a4:	200000a6 	.word	0x200000a6

080003a8 <mdelay>:

static void mdelay(uint32_t cnt)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e002      	b.n	80003bc <mdelay+0x14>
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	3301      	adds	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c2:	fb02 f303 	mul.w	r3, r2, r3
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d3f4      	bcc.n	80003b6 <mdelay+0xe>
}
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <main>:

int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 80003de:	f000 fbe7 	bl	8000bb0 <lcd_init>

	lcd_print_string("RTC Test...");
 80003e2:	4833      	ldr	r0, [pc, #204]	; (80004b0 <main+0xd8>)
 80003e4:	f000 fbd0 	bl	8000b88 <lcd_print_string>


	mdelay(2000);
 80003e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003ec:	f7ff ffdc 	bl	80003a8 <mdelay>

	lcd_display_clear();
 80003f0:	f000 fca0 	bl	8000d34 <lcd_display_clear>
	lcd_display_return_home();
 80003f4:	f000 fca8 	bl	8000d48 <lcd_display_return_home>
#endif

	if(ds1307_init()){
 80003f8:	f000 f9a8 	bl	800074c <ds1307_init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d003      	beq.n	800040a <main+0x32>
		printf("RTC init has failed\n");
 8000402:	482c      	ldr	r0, [pc, #176]	; (80004b4 <main+0xdc>)
 8000404:	f001 fb88 	bl	8001b18 <puts>
		while(1);
 8000408:	e7fe      	b.n	8000408 <main+0x30>
	}

	init_systick_timer(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f7ff feec 	bl	80001e8 <init_systick_timer>

	current_date.day = FRIDAY;
 8000410:	2305      	movs	r3, #5
 8000412:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000414:	230f      	movs	r3, #15
 8000416:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000418:	2301      	movs	r3, #1
 800041a:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 800041c:	2315      	movs	r3, #21
 800041e:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 8000420:	230b      	movs	r3, #11
 8000422:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000424:	233b      	movs	r3, #59	; 0x3b
 8000426:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000428:	231e      	movs	r3, #30
 800042a:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 800042c:	2301      	movs	r3, #1
 800042e:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fa3a 	bl	80008ac <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f9a3 	bl	8000788 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f9e7 	bl	800081a <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fa5c 	bl	800090c <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000454:	7afb      	ldrb	r3, [r7, #11]
 8000456:	2b02      	cmp	r3, #2
 8000458:	d013      	beq.n	8000482 <main+0xaa>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <main+0x8c>
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <main+0xe0>)
 8000462:	e000      	b.n	8000466 <main+0x8e>
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <main+0xe4>)
 8000466:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8000468:	f107 0308 	add.w	r3, r7, #8
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff47 	bl	8000300 <time_to_string>
 8000472:	4603      	mov	r3, r0
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fb87 	bl	8000b88 <lcd_print_string>
		lcd_print_string(am_pm);
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f000 fb84 	bl	8000b88 <lcd_print_string>
 8000480:	e008      	b.n	8000494 <main+0xbc>
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_print_string(time_to_string(&current_time));
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff3a 	bl	8000300 <time_to_string>
 800048c:	4603      	mov	r3, r0
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fb7a 	bl	8000b88 <lcd_print_string>
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000494:	2101      	movs	r1, #1
 8000496:	2002      	movs	r0, #2
 8000498:	f000 fc60 	bl	8000d5c <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff58 	bl	8000354 <date_to_string>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fb6e 	bl	8000b88 <lcd_print_string>
#endif


	while(1);
 80004ac:	e7fe      	b.n	80004ac <main+0xd4>
 80004ae:	bf00      	nop
 80004b0:	080024a4 	.word	0x080024a4
 80004b4:	080024b0 	.word	0x080024b0
 80004b8:	080024c4 	.word	0x080024c4
 80004bc:	080024c8 	.word	0x080024c8

080004c0 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f9a5 	bl	800081a <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d017      	beq.n	8000506 <SysTick_Handler+0x46>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004d6:	7afb      	ldrb	r3, [r7, #11]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SysTick_Handler+0x20>
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <SysTick_Handler+0xa4>)
 80004de:	e000      	b.n	80004e2 <SysTick_Handler+0x22>
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <SysTick_Handler+0xa8>)
 80004e2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_set_cursor(1, 1);
 80004e4:	2101      	movs	r1, #1
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fc38 	bl	8000d5c <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff05 	bl	8000300 <time_to_string>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb45 	bl	8000b88 <lcd_print_string>
		lcd_print_string(am_pm);
 80004fe:	68f8      	ldr	r0, [r7, #12]
 8000500:	f000 fb42 	bl	8000b88 <lcd_print_string>
 8000504:	e00c      	b.n	8000520 <SysTick_Handler+0x60>

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_set_cursor(1, 1);
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fc27 	bl	8000d5c <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fef4 	bl	8000300 <time_to_string>
 8000518:	4603      	mov	r3, r0
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fb34 	bl	8000b88 <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f9f2 	bl	800090c <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000528:	2101      	movs	r1, #1
 800052a:	2002      	movs	r0, #2
 800052c:	f000 fc16 	bl	8000d5c <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff0e 	bl	8000354 <date_to_string>
 8000538:	4603      	mov	r3, r0
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fb24 	bl	8000b88 <lcd_print_string>
	lcd_print_char('<');
 8000540:	203c      	movs	r0, #60	; 0x3c
 8000542:	f000 faff 	bl	8000b44 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe81 	bl	8000250 <get_day_of_week>
 800054e:	4603      	mov	r3, r0
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fb19 	bl	8000b88 <lcd_print_string>
	lcd_print_char('>');
 8000556:	203e      	movs	r0, #62	; 0x3e
 8000558:	f000 faf4 	bl	8000b44 <lcd_print_char>
#endif


 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	080024c4 	.word	0x080024c4
 8000568:	080024c8 	.word	0x080024c8

0800056c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <ITM_SendChar+0x44>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <ITM_SendChar+0x44>)
 800057c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000580:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <ITM_SendChar+0x48>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <ITM_SendChar+0x48>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800058e:	bf00      	nop
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f8      	beq.n	8000590 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800059e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	e000edfc 	.word	0xe000edfc
 80005b4:	e0000e00 	.word	0xe0000e00

080005b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ca:	f3af 8000 	nop.w
 80005ce:	4601      	mov	r1, r0
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf0      	blt.n	80005ca <_read+0x12>
	}

return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffad 	bl	800056c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x12>
	}
	return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000650:	605a      	str	r2, [r3, #4]
	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_isatty>:

int _isatty(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
	return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f001 f98c 	bl	80019d8 <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20020000 	.word	0x20020000
 80006ec:	00000400 	.word	0x00000400
 80006f0:	200000ac 	.word	0x200000ac
 80006f4:	200000e8 	.word	0x200000e8

080006f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000726:	f001 f95d 	bl	80019e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fe55 	bl	80003d8 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   r0, =_estack
 8000730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800073c:	08002538 	.word	0x08002538
  ldr r2, =_sbss
 8000740:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000744:	200000e8 	.word	0x200000e8

08000748 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC_IRQHandler>
	...

0800074c <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);

I2C_Handle_t g_ds1307I2CHandle;

uint8_t ds1307_init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 8000752:	f000 f8ff 	bl	8000954 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 8000756:	f000 f939 	bl	80009cc <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800075a:	2101      	movs	r1, #1
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <ds1307_init+0x38>)
 800075e:	f000 fe8e 	bl	800147e <I2C_PeripheralControl>

	//4. Make clock halt = 0 
	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f947 	bl	80009f8 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f962 	bl	8000a34 <ds1307_read>
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	09db      	lsrs	r3, r3, #7
 8000778:	b2db      	uxtb	r3, r3
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40005400 	.word	0x40005400

08000788 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f96d 	bl	8000a74 <binary_to_bcd>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1<<7);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007a4:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f924 	bl	80009f8 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f95d 	bl	8000a74 <binary_to_bcd>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f91a 	bl	80009f8 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	789b      	ldrb	r3, [r3, #2]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f953 	bl	8000a74 <binary_to_bcd>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	78db      	ldrb	r3, [r3, #3]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d104      	bne.n	80007e4 <ds1307_set_current_time+0x5c>
	{
		hrs &=(1<<6);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e011      	b.n	8000808 <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |=(1<<6);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ea:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1<<5) : hrs & ~(1<<5);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	78db      	ldrb	r3, [r3, #3]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d104      	bne.n	80007fe <ds1307_set_current_time+0x76>
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	e003      	b.n	8000806 <ds1307_set_current_time+0x7e>
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	f023 0320 	bic.w	r3, r3, #32
 8000804:	b2db      	uxtb	r3, r3
 8000806:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f8f3 	bl	80009f8 <ds1307_write>

}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <ds1307_get_current_time>:
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b084      	sub	sp, #16
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f906 	bl	8000a34 <ds1307_read>
 8000828:	4603      	mov	r3, r0
 800082a:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000832:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f948 	bl	8000acc <bcd_to_binary>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000844:	2001      	movs	r0, #1
 8000846:	f000 f8f5 	bl	8000a34 <ds1307_read>
 800084a:	4603      	mov	r3, r0
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f93d 	bl	8000acc <bcd_to_binary>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 800085a:	2002      	movs	r0, #2
 800085c:	f000 f8ea 	bl	8000a34 <ds1307_read>
 8000860:	4603      	mov	r3, r0
 8000862:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00f      	beq.n	800088e <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e002      	b.n	8000894 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2202      	movs	r2, #2
 8000892:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f918 	bl	8000acc <bcd_to_binary>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	709a      	strb	r2, [r3, #2]
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f8db 	bl	8000a74 <binary_to_bcd>
 80008be:	4603      	mov	r3, r0
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f898 	bl	80009f8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	78db      	ldrb	r3, [r3, #3]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f8d1 	bl	8000a74 <binary_to_bcd>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2103      	movs	r1, #3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f88e 	bl	80009f8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f8c7 	bl	8000a74 <binary_to_bcd>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2105      	movs	r1, #5
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f884 	bl	80009f8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f8bd 	bl	8000a74 <binary_to_bcd>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2106      	movs	r1, #6
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f87a 	bl	80009f8 <ds1307_write>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ds1307_get_current_date>:
void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary((DS1307_ADDR_DATE));
 8000914:	2004      	movs	r0, #4
 8000916:	f000 f8d9 	bl	8000acc <bcd_to_binary>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	701a      	strb	r2, [r3, #0]
	rtc_date->day = bcd_to_binary((DS1307_ADDR_DAY));
 8000922:	2003      	movs	r0, #3
 8000924:	f000 f8d2 	bl	8000acc <bcd_to_binary>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	70da      	strb	r2, [r3, #3]
	rtc_date->month = bcd_to_binary((DS1307_ADDR_MONTH));
 8000930:	2005      	movs	r0, #5
 8000932:	f000 f8cb 	bl	8000acc <bcd_to_binary>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary((DS1307_ADDR_YEAR));
 800093e:	2006      	movs	r0, #6
 8000940:	f000 f8c4 	bl	8000acc <bcd_to_binary>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	709a      	strb	r2, [r3, #2]
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
    GPIO_Handle_t   i2c_sda, i2c_scl;
    memset(&i2c_sda,0,sizeof(i2c_sda));
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	220c      	movs	r2, #12
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f862 	bl	8001a2c <memset>
    memset(&i2c_scl,0,sizeof(i2c_scl));
 8000968:	463b      	mov	r3, r7
 800096a:	220c      	movs	r2, #12
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f85c 	bl	8001a2c <memset>
    /*
    I2C_SCL => PB6
    I2C_SDA => PB7
    */

    i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <ds1307_i2c_pin_config+0x74>)
 8000976:	603b      	str	r3, [r7, #0]
    i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000978:	2306      	movs	r3, #6
 800097a:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800097c:	2302      	movs	r3, #2
 800097e:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000984:	2301      	movs	r3, #1
 8000986:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000988:	2302      	movs	r3, #2
 800098a:	71bb      	strb	r3, [r7, #6]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800098c:	2301      	movs	r3, #1
 800098e:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&i2c_scl);
 8000990:	463b      	mov	r3, r7
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fb34 	bl	8001000 <GPIO_Init>

    i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <ds1307_i2c_pin_config+0x74>)
 800099a:	60fb      	str	r3, [r7, #12]
    i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 800099c:	2307      	movs	r3, #7
 800099e:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009a0:	2302      	movs	r3, #2
 80009a2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009a8:	2301      	movs	r3, #1
 80009aa:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009ac:	2302      	movs	r3, #2
 80009ae:	74bb      	strb	r3, [r7, #18]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009b0:	2301      	movs	r3, #1
 80009b2:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&i2c_sda);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fb21 	bl	8001000 <GPIO_Init>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40020400 	.word	0x40020400

080009cc <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    g_ds1307I2CHandle.pI2Cx = DS1307_I2C;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <ds1307_i2c_config+0x20>)
 80009d2:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <ds1307_i2c_config+0x24>)
 80009d4:	601a      	str	r2, [r3, #0]
    g_ds1307I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <ds1307_i2c_config+0x20>)
 80009d8:	2201      	movs	r2, #1
 80009da:	725a      	strb	r2, [r3, #9]
    g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <ds1307_i2c_config+0x20>)
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <ds1307_i2c_config+0x28>)
 80009e0:	605a      	str	r2, [r3, #4]
    I2C_Init(&g_ds1307I2CHandle);
 80009e2:	4802      	ldr	r0, [pc, #8]	; (80009ec <ds1307_i2c_config+0x20>)
 80009e4:	f000 fd66 	bl	80014b4 <I2C_Init>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000b0 	.word	0x200000b0
 80009f0:	40005400 	.word	0x40005400
 80009f4:	000186a0 	.word	0x000186a0

080009f8 <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t reg_addr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	4603      	mov	r3, r0
 8000a00:	460a      	mov	r2, r1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	4613      	mov	r3, r2
 8000a06:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0, 0);
 8000a10:	f107 010c 	add.w	r1, r7, #12
 8000a14:	2300      	movs	r3, #0
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2368      	movs	r3, #104	; 0x68
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <ds1307_write+0x38>)
 8000a22:	f000 fe02 	bl	800162a <I2C_MasterSendData>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000b0 	.word	0x200000b0

08000a34 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0, 0);
 8000a3e:	1df9      	adds	r1, r7, #7
 8000a40:	2300      	movs	r3, #0
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	2300      	movs	r3, #0
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2368      	movs	r3, #104	; 0x68
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <ds1307_read+0x3c>)
 8000a4e:	f000 fdec 	bl	800162a <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a52:	f107 010f 	add.w	r1, r7, #15
 8000a56:	2300      	movs	r3, #0
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2368      	movs	r3, #104	; 0x68
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <ds1307_read+0x3c>)
 8000a60:	f000 fe60 	bl	8001724 <I2C_MasterReceiveData>
	return data;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000b0 	.word	0x200000b0

08000a74 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t bcd;

	bcd = value;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b09      	cmp	r3, #9
 8000a86:	d918      	bls.n	8000aba <binary_to_bcd+0x46>
	{
		m = value / 10;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <binary_to_bcd+0x54>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <binary_to_bcd+0x54>)
 8000a98:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9c:	08d9      	lsrs	r1, r3, #3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	737b      	strb	r3, [r7, #13]
		bcd = (m<<4)|n;
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	73fb      	strb	r3, [r7, #15]
	}
	
	return bcd;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	cccccccd 	.word	0xcccccccd

08000acc <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;

	m = (value >> 4)*10;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	091b      	lsrs	r3, r3, #4
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
	n=value&(uint8_t)(0x07);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	73bb      	strb	r3, [r7, #14]
	
	return m+n;
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <lcd_send_command+0x40>)
 8000b10:	f000 fc12 	bl	8001338 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <lcd_send_command+0x40>)
 8000b1a:	f000 fc0d 	bl	8001338 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	091b      	lsrs	r3, r3, #4
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f8cd 	bl	8000cc4 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f8c6 	bl	8000cc4 <write_4_bits>

}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000

08000b44 <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2100      	movs	r1, #0
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <lcd_print_char+0x40>)
 8000b54:	f000 fbf0 	bl	8001338 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <lcd_print_char+0x40>)
 8000b5e:	f000 fbeb 	bl	8001338 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f8ab 	bl	8000cc4 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f8a4 	bl	8000cc4 <write_4_bits>

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000

08000b88 <lcd_print_string>:


void lcd_print_string(char *message)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffd3 	bl	8000b44 <lcd_print_char>
      }
      while (*message != '\0');
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f4      	bne.n	8000b90 <lcd_print_string+0x8>

}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <lcd_init>:


void lcd_init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000bb6:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <lcd_init+0x110>)
 8000bb8:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa15 	bl	8001000 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fa0f 	bl	8001000 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000be2:	2302      	movs	r3, #2
 8000be4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fa09 	bl	8001000 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fa03 	bl	8001000 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f9fd 	bl	8001000 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000c06:	2305      	movs	r3, #5
 8000c08:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f9f7 	bl	8001000 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000c12:	2306      	movs	r3, #6
 8000c14:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f9f1 	bl	8001000 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <lcd_init+0x110>)
 8000c24:	f000 fb88 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <lcd_init+0x110>)
 8000c2e:	f000 fb83 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2102      	movs	r1, #2
 8000c36:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <lcd_init+0x110>)
 8000c38:	f000 fb7e 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2103      	movs	r1, #3
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <lcd_init+0x110>)
 8000c42:	f000 fb79 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2104      	movs	r1, #4
 8000c4a:	481d      	ldr	r0, [pc, #116]	; (8000cc0 <lcd_init+0x110>)
 8000c4c:	f000 fb74 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2105      	movs	r1, #5
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <lcd_init+0x110>)
 8000c56:	f000 fb6f 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2106      	movs	r1, #6
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <lcd_init+0x110>)
 8000c60:	f000 fb6a 	bl	8001338 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 8000c64:	2028      	movs	r0, #40	; 0x28
 8000c66:	f000 f8b7 	bl	8000dd8 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <lcd_init+0x110>)
 8000c70:	f000 fb62 	bl	8001338 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2101      	movs	r1, #1
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <lcd_init+0x110>)
 8000c7a:	f000 fb5d 	bl	8001338 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f000 f820 	bl	8000cc4 <write_4_bits>

	mdelay(5);
 8000c84:	2005      	movs	r0, #5
 8000c86:	f000 f8a7 	bl	8000dd8 <mdelay>

	write_4_bits(0x3);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f000 f81a 	bl	8000cc4 <write_4_bits>

	udelay(150);
 8000c90:	2096      	movs	r0, #150	; 0x96
 8000c92:	f000 f8b9 	bl	8000e08 <udelay>

	write_4_bits(0x3);
 8000c96:	2003      	movs	r0, #3
 8000c98:	f000 f814 	bl	8000cc4 <write_4_bits>
	write_4_bits(0x2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 f811 	bl	8000cc4 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000ca2:	2028      	movs	r0, #40	; 0x28
 8000ca4:	f7ff ff2c 	bl	8000b00 <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000ca8:	200e      	movs	r0, #14
 8000caa:	f7ff ff29 	bl	8000b00 <lcd_send_command>

	lcd_display_clear();
 8000cae:	f000 f841 	bl	8000d34 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000cb2:	2006      	movs	r0, #6
 8000cb4:	f7ff ff24 	bl	8000b00 <lcd_send_command>



}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4815      	ldr	r0, [pc, #84]	; (8000d30 <write_4_bits+0x6c>)
 8000cdc:	f000 fb2c 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	085b      	lsrs	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	2104      	movs	r1, #4
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <write_4_bits+0x6c>)
 8000cf2:	f000 fb21 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	2105      	movs	r1, #5
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <write_4_bits+0x6c>)
 8000d08:	f000 fb16 	bl	8001338 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2106      	movs	r1, #6
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <write_4_bits+0x6c>)
 8000d1e:	f000 fb0b 	bl	8001338 <GPIO_WriteToOutputPin>

	lcd_enable();
 8000d22:	f000 f843 	bl	8000dac <lcd_enable>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fee1 	bl	8000b00 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f000 f84a 	bl	8000dd8 <mdelay>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f7ff fed7 	bl	8000b00 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f000 f840 	bl	8000dd8 <mdelay>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
  column--;
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	71bb      	strb	r3, [r7, #6]
  switch (row)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d002      	beq.n	8000d7e <lcd_set_cursor+0x22>
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d009      	beq.n	8000d90 <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000d7c:	e011      	b.n	8000da2 <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d84:	71bb      	strb	r3, [r7, #6]
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff feb9 	bl	8000b00 <lcd_send_command>
      break;
 8000d8e:	e008      	b.n	8000da2 <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d96:	71bb      	strb	r3, [r7, #6]
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff feb0 	bl	8000b00 <lcd_send_command>
      break;
 8000da0:	bf00      	nop
  }
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <lcd_enable>:



static void lcd_enable(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2102      	movs	r1, #2
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <lcd_enable+0x28>)
 8000db6:	f000 fabf 	bl	8001338 <GPIO_WriteToOutputPin>
	udelay(10);
 8000dba:	200a      	movs	r0, #10
 8000dbc:	f000 f824 	bl	8000e08 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <lcd_enable+0x28>)
 8000dc6:	f000 fab7 	bl	8001338 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f000 f81c 	bl	8000e08 <udelay>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e002      	b.n	8000dec <mdelay+0x14>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	fb02 f303 	mul.w	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3f4      	bcc.n	8000de6 <mdelay+0xe>
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <udelay>:

static void udelay(uint32_t cnt)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e002      	b.n	8000e1c <udelay+0x14>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3f8      	bcc.n	8000e16 <udelay+0xe>
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d162      	bne.n	8000f08 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a64      	ldr	r2, [pc, #400]	; (8000fd8 <GPIO_PeriClockControl+0x1a8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d106      	bne.n	8000e58 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000e4a:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a63      	ldr	r2, [pc, #396]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8000e56:	e0b9      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a61      	ldr	r2, [pc, #388]	; (8000fe0 <GPIO_PeriClockControl+0x1b0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d106      	bne.n	8000e6e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e60:	4b5e      	ldr	r3, [pc, #376]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e6c:	e0ae      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a5c      	ldr	r2, [pc, #368]	; (8000fe4 <GPIO_PeriClockControl+0x1b4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d106      	bne.n	8000e84 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a58      	ldr	r2, [pc, #352]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e82:	e0a3      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <GPIO_PeriClockControl+0x1b8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d106      	bne.n	8000e9a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000e8c:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e98:	e098      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a53      	ldr	r2, [pc, #332]	; (8000fec <GPIO_PeriClockControl+0x1bc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d106      	bne.n	8000eb0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000ea2:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eae:	e08d      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <GPIO_PeriClockControl+0x1c0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d106      	bne.n	8000ec6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000eb8:	4b48      	ldr	r3, [pc, #288]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec4:	e082      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4a      	ldr	r2, [pc, #296]	; (8000ff4 <GPIO_PeriClockControl+0x1c4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d106      	bne.n	8000edc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a42      	ldr	r2, [pc, #264]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eda:	e077      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <GPIO_PeriClockControl+0x1c8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d106      	bne.n	8000ef2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ee4:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a3c      	ldr	r2, [pc, #240]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef0:	e06c      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <GPIO_PeriClockControl+0x1cc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d168      	bne.n	8000fcc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a37      	ldr	r2, [pc, #220]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f06:	e061      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <GPIO_PeriClockControl+0x1a8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d106      	bne.n	8000f1e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f1c:	e056      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <GPIO_PeriClockControl+0x1b0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d106      	bne.n	8000f34 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f2c:	f023 0302 	bic.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f32:	e04b      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a2b      	ldr	r2, [pc, #172]	; (8000fe4 <GPIO_PeriClockControl+0x1b4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f42:	f023 0304 	bic.w	r3, r3, #4
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f48:	e040      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <GPIO_PeriClockControl+0x1b8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d106      	bne.n	8000f60 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f58:	f023 0308 	bic.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f5e:	e035      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a22      	ldr	r2, [pc, #136]	; (8000fec <GPIO_PeriClockControl+0x1bc>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d106      	bne.n	8000f76 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f6e:	f023 0310 	bic.w	r3, r3, #16
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f74:	e02a      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <GPIO_PeriClockControl+0x1c0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d106      	bne.n	8000f8c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f84:	f023 0320 	bic.w	r3, r3, #32
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f8a:	e01f      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <GPIO_PeriClockControl+0x1c4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d106      	bne.n	8000fa2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa0:	e014      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <GPIO_PeriClockControl+0x1c8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fb6:	e009      	b.n	8000fcc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <GPIO_PeriClockControl+0x1cc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d105      	bne.n	8000fcc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <GPIO_PeriClockControl+0x1ac>)
 8000fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	40021c00 	.word	0x40021c00
 8000ffc:	40022000 	.word	0x40022000

08001000 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff0c 	bl	8000e30 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	795b      	ldrb	r3, [r3, #5]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d820      	bhi.n	8001062 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	791b      	ldrb	r3, [r3, #4]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2103      	movs	r1, #3
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4619      	mov	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	400a      	ands	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e0cb      	b.n	80011fa <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	795b      	ldrb	r3, [r3, #5]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d117      	bne.n	800109a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800106a:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <GPIO_Init+0x198>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	7912      	ldrb	r2, [r2, #4]
 8001072:	4611      	mov	r1, r2
 8001074:	2201      	movs	r2, #1
 8001076:	408a      	lsls	r2, r1
 8001078:	4611      	mov	r1, r2
 800107a:	4a47      	ldr	r2, [pc, #284]	; (8001198 <GPIO_Init+0x198>)
 800107c:	430b      	orrs	r3, r1
 800107e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <GPIO_Init+0x198>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7912      	ldrb	r2, [r2, #4]
 8001088:	4611      	mov	r1, r2
 800108a:	2201      	movs	r2, #1
 800108c:	408a      	lsls	r2, r1
 800108e:	43d2      	mvns	r2, r2
 8001090:	4611      	mov	r1, r2
 8001092:	4a41      	ldr	r2, [pc, #260]	; (8001198 <GPIO_Init+0x198>)
 8001094:	400b      	ands	r3, r1
 8001096:	6093      	str	r3, [r2, #8]
 8001098:	e035      	b.n	8001106 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	795b      	ldrb	r3, [r3, #5]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d117      	bne.n	80010d2 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <GPIO_Init+0x198>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	7912      	ldrb	r2, [r2, #4]
 80010aa:	4611      	mov	r1, r2
 80010ac:	2201      	movs	r2, #1
 80010ae:	408a      	lsls	r2, r1
 80010b0:	4611      	mov	r1, r2
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <GPIO_Init+0x198>)
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <GPIO_Init+0x198>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	7912      	ldrb	r2, [r2, #4]
 80010c0:	4611      	mov	r1, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	408a      	lsls	r2, r1
 80010c6:	43d2      	mvns	r2, r2
 80010c8:	4611      	mov	r1, r2
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <GPIO_Init+0x198>)
 80010cc:	400b      	ands	r3, r1
 80010ce:	60d3      	str	r3, [r2, #12]
 80010d0:	e019      	b.n	8001106 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d115      	bne.n	8001106 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <GPIO_Init+0x198>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	7912      	ldrb	r2, [r2, #4]
 80010e2:	4611      	mov	r1, r2
 80010e4:	2201      	movs	r2, #1
 80010e6:	408a      	lsls	r2, r1
 80010e8:	4611      	mov	r1, r2
 80010ea:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <GPIO_Init+0x198>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <GPIO_Init+0x198>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	7912      	ldrb	r2, [r2, #4]
 80010f8:	4611      	mov	r1, r2
 80010fa:	2201      	movs	r2, #1
 80010fc:	408a      	lsls	r2, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	4a25      	ldr	r2, [pc, #148]	; (8001198 <GPIO_Init+0x198>)
 8001102:	430b      	orrs	r3, r1
 8001104:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	791b      	ldrb	r3, [r3, #4]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1f      	ldr	r2, [pc, #124]	; (800119c <GPIO_Init+0x19c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d04e      	beq.n	80011c0 <GPIO_Init+0x1c0>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <GPIO_Init+0x1a0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d032      	beq.n	8001192 <GPIO_Init+0x192>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <GPIO_Init+0x1a4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <GPIO_Init+0x18e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <GPIO_Init+0x1a8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d024      	beq.n	800118a <GPIO_Init+0x18a>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <GPIO_Init+0x1ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01d      	beq.n	8001186 <GPIO_Init+0x186>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <GPIO_Init+0x1b0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d016      	beq.n	8001182 <GPIO_Init+0x182>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <GPIO_Init+0x1b4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00f      	beq.n	800117e <GPIO_Init+0x17e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <GPIO_Init+0x1b8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d008      	beq.n	800117a <GPIO_Init+0x17a>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <GPIO_Init+0x1bc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <GPIO_Init+0x176>
 8001172:	2308      	movs	r3, #8
 8001174:	e025      	b.n	80011c2 <GPIO_Init+0x1c2>
 8001176:	2300      	movs	r3, #0
 8001178:	e023      	b.n	80011c2 <GPIO_Init+0x1c2>
 800117a:	2307      	movs	r3, #7
 800117c:	e021      	b.n	80011c2 <GPIO_Init+0x1c2>
 800117e:	2306      	movs	r3, #6
 8001180:	e01f      	b.n	80011c2 <GPIO_Init+0x1c2>
 8001182:	2305      	movs	r3, #5
 8001184:	e01d      	b.n	80011c2 <GPIO_Init+0x1c2>
 8001186:	2304      	movs	r3, #4
 8001188:	e01b      	b.n	80011c2 <GPIO_Init+0x1c2>
 800118a:	2303      	movs	r3, #3
 800118c:	e019      	b.n	80011c2 <GPIO_Init+0x1c2>
 800118e:	2302      	movs	r3, #2
 8001190:	e017      	b.n	80011c2 <GPIO_Init+0x1c2>
 8001192:	2301      	movs	r3, #1
 8001194:	e015      	b.n	80011c2 <GPIO_Init+0x1c2>
 8001196:	bf00      	nop
 8001198:	40013c00 	.word	0x40013c00
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021c00 	.word	0x40021c00
 80011bc:	40022000 	.word	0x40022000
 80011c0:	2300      	movs	r3, #0
 80011c2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <GPIO_Init+0x32c>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <GPIO_Init+0x32c>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80011d0:	7c7a      	ldrb	r2, [r7, #17]
 80011d2:	7cbb      	ldrb	r3, [r7, #18]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	fa02 f103 	lsl.w	r1, r2, r3
 80011da:	4a55      	ldr	r2, [pc, #340]	; (8001330 <GPIO_Init+0x330>)
 80011dc:	7cfb      	ldrb	r3, [r7, #19]
 80011de:	3302      	adds	r3, #2
 80011e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <GPIO_Init+0x334>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	7912      	ldrb	r2, [r2, #4]
 80011ec:	4611      	mov	r1, r2
 80011ee:	2201      	movs	r2, #1
 80011f0:	408a      	lsls	r2, r1
 80011f2:	4611      	mov	r1, r2
 80011f4:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <GPIO_Init+0x334>)
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	799b      	ldrb	r3, [r3, #6]
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2103      	movs	r1, #3
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	400a      	ands	r2, r1
 8001228:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6899      	ldr	r1, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	79db      	ldrb	r3, [r3, #7]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2103      	movs	r1, #3
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68d9      	ldr	r1, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	430a      	orrs	r2, r1
 8001278:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7a1b      	ldrb	r3, [r3, #8]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	4619      	mov	r1, r3
 8001296:	2301      	movs	r3, #1
 8001298:	408b      	lsls	r3, r1
 800129a:	43db      	mvns	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	400a      	ands	r2, r1
 80012a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d131      	bne.n	8001322 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	7c3a      	ldrb	r2, [r7, #16]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	7c3a      	ldrb	r2, [r7, #16]
 80012f0:	4001      	ands	r1, r0
 80012f2:	3208      	adds	r2, #8
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	7c3a      	ldrb	r2, [r7, #16]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7a5b      	ldrb	r3, [r3, #9]
 8001308:	461a      	mov	r2, r3
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	7c3a      	ldrb	r2, [r7, #16]
 800131a:	4301      	orrs	r1, r0
 800131c:	3208      	adds	r2, #8
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40013c00 	.word	0x40013c00

08001338 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
 8001344:	4613      	mov	r3, r2
 8001346:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8001348:	78bb      	ldrb	r3, [r7, #2]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d109      	bne.n	8001362 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8001360:	e009      	b.n	8001376 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f202 	lsl.w	r2, r1, r2
 800136e:	43d2      	mvns	r2, r2
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	615a      	str	r2, [r3, #20]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	// uint32_t dummyRead = pI2Cx->SR1;
	// dummyRead = pI2Cx->SR2;
	// (void)dummyRead;
	uint32_t dummyRead;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01f      	beq.n	8001448 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7f1b      	ldrb	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d112      	bne.n	8001436 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d11f      	bne.n	8001458 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fa06 	bl	8001830 <I2C_ManageAcking>

				//clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	60fb      	str	r3, [r7, #12]
		//clear ADDR flag
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
}
 8001434:	e010      	b.n	8001458 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	60fb      	str	r3, [r7, #12]
}
 8001446:	e007      	b.n	8001458 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	60fb      	str	r3, [r7, #12]
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <I2C_PeripheralControl>:
	}

}

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |=  (1 << I2C_CR1_PE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
	}
}
 800149c:	e005      	b.n	80014aa <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0201 	bic.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]


	//enable clock for i2c peripheral

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f9ce 	bl	8001868 <I2C_PeriClockControl>
	
	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a5b      	ldrb	r3, [r3, #9]
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 80014e6:	f000 fa17 	bl	8001918 <RCC_GetPCLK1Value>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a43      	ldr	r2, [pc, #268]	; (80015fc <I2C_Init+0x148>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg & (0X3F);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001504:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7a1b      	ldrb	r3, [r3, #8]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	609a      	str	r2, [r3, #8]

	//CCR calculation clock control register
	uint16_t ccr_value = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a32      	ldr	r2, [pc, #200]	; (8001600 <I2C_Init+0x14c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d80f      	bhi.n	800155a <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800153a:	f000 f9ed 	bl	8001918 <RCC_GetPCLK1Value>
 800153e:	4602      	mov	r2, r0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e027      	b.n	80015aa <I2C_Init+0xf6>
	}
	else
	{
		//mode is fast mode
		tempreg |= (1<<15);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001560:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	895b      	ldrh	r3, [r3, #10]
 8001566:	039b      	lsls	r3, r3, #14
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10b      	bne.n	8001590 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001578:	f000 f9ce 	bl	8001918 <RCC_GetPCLK1Value>
 800157c:	4601      	mov	r1, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	fbb1 f3f3 	udiv	r3, r1, r3
 800158c:	817b      	strh	r3, [r7, #10]
 800158e:	e00c      	b.n	80015aa <I2C_Init+0xf6>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001590:	f000 f9c2 	bl	8001918 <RCC_GetPCLK1Value>
 8001594:	4601      	mov	r1, r0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	009a      	lsls	r2, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a8:	817b      	strh	r3, [r7, #10]
		}
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	61da      	str	r2, [r3, #28]

	//TRISE configuration Fpclk1 * Trise(max) + 1
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <I2C_Init+0x14c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d809      	bhi.n	80015d0 <I2C_Init+0x11c>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1;
 80015bc:	f000 f9ac 	bl	8001918 <RCC_GetPCLK1Value>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <I2C_Init+0x148>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9b      	lsrs	r3, r3, #18
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e00c      	b.n	80015ea <I2C_Init+0x136>
	}
	else
	{
		//mode is fast mode
		tempreg = (RCC_GetPCLK1Value() * 300/1000000U) + 1;
 80015d0:	f000 f9a2 	bl	8001918 <RCC_GetPCLK1Value>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <I2C_Init+0x148>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = tempreg;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	621a      	str	r2, [r3, #32]
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	000186a0 	.word	0x000186a0

08001604 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle ,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr,I2C_Handle_t *pI2CHandle2)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	70fb      	strb	r3, [r7, #3]
	//reference manual 27.3.3 figure 243
	//1. generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe9f 	bl	8001380 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in SR1
	// Note: until SB is cleared SCL will be stretched(pulled to low)
	//By reference manual: Cleared by software by reading SR1 followed by writing DR, or by hardware when PE = 0
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001642:	bf00      	nop
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffda 	bl	8001604 <I2C_GetFlagStatus>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f6      	beq.n	8001644 <I2C_MasterSendData+0x1a>

	//3. Send the address of slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe9d 	bl	800139e <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001664:	bf00      	nop
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffc9 	bl	8001604 <I2C_GetFlagStatus>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f6      	beq.n	8001666 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched(pulled to low)
	I2C_ClearADDRFlag(pI2CHandle);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff feba 	bl	80013f2 <I2C_ClearADDRFlag>
	if(pI2CHandle2)	I2C_ClearADDRFlag(pI2CHandle2);
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <I2C_MasterSendData+0x60>
 8001684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001686:	f7ff feb4 	bl	80013f2 <I2C_ClearADDRFlag>

	//6.Send the data until len becomes 0
	for(int i = Len; i>0; i--)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e025      	b.n	80016dc <I2C_MasterSendData+0xb2>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 8001690:	bf00      	nop
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ffb3 	bl	8001604 <I2C_GetFlagStatus>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f6      	beq.n	8001692 <I2C_MasterSendData+0x68>

		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
		if(pI2CHandle2)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00d      	beq.n	80016d6 <I2C_MasterSendData+0xac>
		{
			while(!I2C_GetFlagStatus(pI2CHandle2->pI2Cx, I2C_FLAG_RXNE)); //Wait till RXNE is set
 80016ba:	bf00      	nop
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2140      	movs	r1, #64	; 0x40
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff9e 	bl	8001604 <I2C_GetFlagStatus>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f6      	beq.n	80016bc <I2C_MasterSendData+0x92>
			int dummy_read = pI2CHandle2->pI2Cx->DR; //DR is read before next byte is received
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	613b      	str	r3, [r7, #16]
	for(int i = Len; i>0; i--)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3b01      	subs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	dcd6      	bgt.n	8001690 <I2C_MasterSendData+0x66>
	} 
	
	//7. when Len becomes zero wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// Note: TXE = 1, BTF = 1, means that both SR and DR are empty and next transmission should begin
	// when BTF = 1 SCL will be stretched(pulled to low)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 80016e2:	bf00      	nop
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff8a 	bl	8001604 <I2C_GetFlagStatus>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f6      	beq.n	80016e4 <I2C_MasterSendData+0xba>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80016f6:	bf00      	nop
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2104      	movs	r1, #4
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff80 	bl	8001604 <I2C_GetFlagStatus>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f6      	beq.n	80016f8 <I2C_MasterSendData+0xce>

	//8. Generate STOP condition and master need not to wait for the completion of STOP condition
	// Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800170a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d104      	bne.n	800171c <I2C_MasterSendData+0xf2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fea2 	bl	8001460 <I2C_GenerateStopCondition>
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle ,uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	70fb      	strb	r3, [r7, #3]
	//reference manual 27.3.3 figure 243
	//1. generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fe22 	bl	8001380 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in SR1
	// Note: until SB is cleared SCL will be stretched(pulled to low)
	//By reference manual: Cleared by software by reading SR1 followed by writing DR, or by hardware when PE = 0
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 800173c:	bf00      	nop
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <I2C_GetFlagStatus>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f6      	beq.n	800173e <I2C_MasterReceiveData+0x1a>

	//3. Send the address of slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fe35 	bl	80013c8 <I2C_ExecuteAddressPhaseRead>

	//4. Confirm that address phase is completed by checking ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800175e:	bf00      	nop
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2102      	movs	r1, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff4c 	bl	8001604 <I2C_GetFlagStatus>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f6      	beq.n	8001760 <I2C_MasterReceiveData+0x3c>


	//procedure to read only 1 byte from slave

	if(Len == 1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d11d      	bne.n	80017b4 <I2C_MasterReceiveData+0x90>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f856 	bl	8001830 <I2C_ManageAcking>

		//Clear the ADDR flag according to its software sequence
		//Note: Until ADDR is cleared SCL will be stretched(pulled to low)
		I2C_ClearADDRFlag(pI2CHandle);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fe34 	bl	80013f2 <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 800178a:	bf00      	nop
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2140      	movs	r1, #64	; 0x40
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff36 	bl	8001604 <I2C_GetFlagStatus>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f6      	beq.n	800178c <I2C_MasterReceiveData+0x68>

		//generate STOP condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);		
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe5c 	bl	8001460 <I2C_GenerateStopCondition>

		//read data in to buffer	
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	701a      	strb	r2, [r3, #0]
	}

	//procedure to read only 1 byte from slave when len > 1
	if(Len > 1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d92c      	bls.n	8001814 <I2C_MasterReceiveData+0xf0>
	{

		//Clear the ADDR flag according to its software sequence
		//Note: Until ADDR is cleared SCL will be stretched(pulled to low)
		I2C_ClearADDRFlag(pI2CHandle);
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fe19 	bl	80013f2 <I2C_ClearADDRFlag>

		//read data until len becomes 0
		for(int i = Len; i>0; i--)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e023      	b.n	800180e <I2C_MasterReceiveData+0xea>
		{
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 80017c6:	bf00      	nop
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2140      	movs	r1, #64	; 0x40
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff18 	bl	8001604 <I2C_GetFlagStatus>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f6      	beq.n	80017c8 <I2C_MasterReceiveData+0xa4>

			if(i == 2) //if last 2 bytes are remaining
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d10a      	bne.n	80017f6 <I2C_MasterReceiveData+0xd2>
			{
				//Disable Acking
				
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f822 	bl	8001830 <I2C_ManageAcking>
				//generate STOP condition
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe35 	bl	8001460 <I2C_GenerateStopCondition>
			}


			//read data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	701a      	strb	r2, [r3, #0]

			//increment buffer address
			pRxBuffer++;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
		for(int i = Len; i>0; i--)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3b01      	subs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	dcd8      	bgt.n	80017c6 <I2C_MasterReceiveData+0xa2>
		}
	}
	//re-enable acking
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	7a5b      	ldrb	r3, [r3, #9]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <I2C_MasterReceiveData+0x104>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f804 	bl	8001830 <I2C_ManageAcking>
	}
	
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C_ManageAcking>:
{
	return (uint8_t)pI2Cx->DR;
}

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d106      	bne.n	8001850 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 800184e:	e005      	b.n	800185c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d120      	bne.n	80018bc <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <I2C_PeriClockControl+0xa0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d106      	bne.n	8001890 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <I2C_PeriClockControl+0xa4>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <I2C_PeriClockControl+0xa4>)
 8001888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 800188e:	e035      	b.n	80018fc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <I2C_PeriClockControl+0xa8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d106      	bne.n	80018a6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <I2C_PeriClockControl+0xa4>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <I2C_PeriClockControl+0xa4>)
 800189e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018a4:	e02a      	b.n	80018fc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <I2C_PeriClockControl+0xac>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d126      	bne.n	80018fc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018ba:	e01f      	b.n	80018fc <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <I2C_PeriClockControl+0xa0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d106      	bne.n	80018d2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018d0:	e014      	b.n	80018fc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <I2C_PeriClockControl+0xa8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d106      	bne.n	80018e8 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018e6:	e009      	b.n	80018fc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <I2C_PeriClockControl+0xac>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d105      	bne.n	80018fc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <I2C_PeriClockControl+0xa4>)
 80018f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40023800 	.word	0x40023800
 8001910:	40005800 	.word	0x40005800
 8001914:	40005c00 	.word	0x40005c00

08001918 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <RCC_GetPCLK1Value+0x9c>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <RCC_GetPCLK1Value+0xa0>)
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e00b      	b.n	8001950 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001938:	7a7b      	ldrb	r3, [r7, #9]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <RCC_GetPCLK1Value+0xa4>)
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e005      	b.n	8001950 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8001944:	7a7b      	ldrb	r3, [r7, #9]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d102      	bne.n	8001950 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800194a:	f000 f83d 	bl	80019c8 <RCC_GetPLLOutputClock>
 800194e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <RCC_GetPCLK1Value+0x9c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800195e:	7a3b      	ldrb	r3, [r7, #8]
 8001960:	2b07      	cmp	r3, #7
 8001962:	d802      	bhi.n	800196a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	72fb      	strb	r3, [r7, #11]
 8001968:	e005      	b.n	8001976 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 800196a:	7a3b      	ldrb	r3, [r7, #8]
 800196c:	3b08      	subs	r3, #8
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <RCC_GetPCLK1Value+0xa8>)
 8001970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001974:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <RCC_GetPCLK1Value+0x9c>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8001984:	7a3b      	ldrb	r3, [r7, #8]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d802      	bhi.n	8001990 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	72bb      	strb	r3, [r7, #10]
 800198e:	e004      	b.n	800199a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001990:	7a3b      	ldrb	r3, [r7, #8]
 8001992:	3b04      	subs	r3, #4
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <RCC_GetPCLK1Value+0xac>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a2:	7abb      	ldrb	r3, [r7, #10]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000010 	.word	0x20000010

080019c8 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

	return 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
	...

080019d8 <__errno>:
 80019d8:	4b01      	ldr	r3, [pc, #4]	; (80019e0 <__errno+0x8>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000014 	.word	0x20000014

080019e4 <__libc_init_array>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4d0d      	ldr	r5, [pc, #52]	; (8001a1c <__libc_init_array+0x38>)
 80019e8:	4c0d      	ldr	r4, [pc, #52]	; (8001a20 <__libc_init_array+0x3c>)
 80019ea:	1b64      	subs	r4, r4, r5
 80019ec:	10a4      	asrs	r4, r4, #2
 80019ee:	2600      	movs	r6, #0
 80019f0:	42a6      	cmp	r6, r4
 80019f2:	d109      	bne.n	8001a08 <__libc_init_array+0x24>
 80019f4:	4d0b      	ldr	r5, [pc, #44]	; (8001a24 <__libc_init_array+0x40>)
 80019f6:	4c0c      	ldr	r4, [pc, #48]	; (8001a28 <__libc_init_array+0x44>)
 80019f8:	f000 fd18 	bl	800242c <_init>
 80019fc:	1b64      	subs	r4, r4, r5
 80019fe:	10a4      	asrs	r4, r4, #2
 8001a00:	2600      	movs	r6, #0
 8001a02:	42a6      	cmp	r6, r4
 8001a04:	d105      	bne.n	8001a12 <__libc_init_array+0x2e>
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
 8001a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a0c:	4798      	blx	r3
 8001a0e:	3601      	adds	r6, #1
 8001a10:	e7ee      	b.n	80019f0 <__libc_init_array+0xc>
 8001a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a16:	4798      	blx	r3
 8001a18:	3601      	adds	r6, #1
 8001a1a:	e7f2      	b.n	8001a02 <__libc_init_array+0x1e>
 8001a1c:	08002530 	.word	0x08002530
 8001a20:	08002530 	.word	0x08002530
 8001a24:	08002530 	.word	0x08002530
 8001a28:	08002534 	.word	0x08002534

08001a2c <memset>:
 8001a2c:	4402      	add	r2, r0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <memset+0xa>
 8001a34:	4770      	bx	lr
 8001a36:	f803 1b01 	strb.w	r1, [r3], #1
 8001a3a:	e7f9      	b.n	8001a30 <memset+0x4>

08001a3c <_puts_r>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	460e      	mov	r6, r1
 8001a40:	4605      	mov	r5, r0
 8001a42:	b118      	cbz	r0, 8001a4c <_puts_r+0x10>
 8001a44:	6983      	ldr	r3, [r0, #24]
 8001a46:	b90b      	cbnz	r3, 8001a4c <_puts_r+0x10>
 8001a48:	f000 fa44 	bl	8001ed4 <__sinit>
 8001a4c:	69ab      	ldr	r3, [r5, #24]
 8001a4e:	68ac      	ldr	r4, [r5, #8]
 8001a50:	b913      	cbnz	r3, 8001a58 <_puts_r+0x1c>
 8001a52:	4628      	mov	r0, r5
 8001a54:	f000 fa3e 	bl	8001ed4 <__sinit>
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <_puts_r+0xd0>)
 8001a5a:	429c      	cmp	r4, r3
 8001a5c:	d120      	bne.n	8001aa0 <_puts_r+0x64>
 8001a5e:	686c      	ldr	r4, [r5, #4]
 8001a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a62:	07db      	lsls	r3, r3, #31
 8001a64:	d405      	bmi.n	8001a72 <_puts_r+0x36>
 8001a66:	89a3      	ldrh	r3, [r4, #12]
 8001a68:	0598      	lsls	r0, r3, #22
 8001a6a:	d402      	bmi.n	8001a72 <_puts_r+0x36>
 8001a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a6e:	f000 facf 	bl	8002010 <__retarget_lock_acquire_recursive>
 8001a72:	89a3      	ldrh	r3, [r4, #12]
 8001a74:	0719      	lsls	r1, r3, #28
 8001a76:	d51d      	bpl.n	8001ab4 <_puts_r+0x78>
 8001a78:	6923      	ldr	r3, [r4, #16]
 8001a7a:	b1db      	cbz	r3, 8001ab4 <_puts_r+0x78>
 8001a7c:	3e01      	subs	r6, #1
 8001a7e:	68a3      	ldr	r3, [r4, #8]
 8001a80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60a3      	str	r3, [r4, #8]
 8001a88:	bb39      	cbnz	r1, 8001ada <_puts_r+0x9e>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da38      	bge.n	8001b00 <_puts_r+0xc4>
 8001a8e:	4622      	mov	r2, r4
 8001a90:	210a      	movs	r1, #10
 8001a92:	4628      	mov	r0, r5
 8001a94:	f000 f848 	bl	8001b28 <__swbuf_r>
 8001a98:	3001      	adds	r0, #1
 8001a9a:	d011      	beq.n	8001ac0 <_puts_r+0x84>
 8001a9c:	250a      	movs	r5, #10
 8001a9e:	e011      	b.n	8001ac4 <_puts_r+0x88>
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <_puts_r+0xd4>)
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d101      	bne.n	8001aaa <_puts_r+0x6e>
 8001aa6:	68ac      	ldr	r4, [r5, #8]
 8001aa8:	e7da      	b.n	8001a60 <_puts_r+0x24>
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <_puts_r+0xd8>)
 8001aac:	429c      	cmp	r4, r3
 8001aae:	bf08      	it	eq
 8001ab0:	68ec      	ldreq	r4, [r5, #12]
 8001ab2:	e7d5      	b.n	8001a60 <_puts_r+0x24>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f888 	bl	8001bcc <__swsetup_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d0dd      	beq.n	8001a7c <_puts_r+0x40>
 8001ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8001ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ac6:	07da      	lsls	r2, r3, #31
 8001ac8:	d405      	bmi.n	8001ad6 <_puts_r+0x9a>
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	059b      	lsls	r3, r3, #22
 8001ace:	d402      	bmi.n	8001ad6 <_puts_r+0x9a>
 8001ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ad2:	f000 fa9e 	bl	8002012 <__retarget_lock_release_recursive>
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da04      	bge.n	8001ae8 <_puts_r+0xac>
 8001ade:	69a2      	ldr	r2, [r4, #24]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dc06      	bgt.n	8001af2 <_puts_r+0xb6>
 8001ae4:	290a      	cmp	r1, #10
 8001ae6:	d004      	beq.n	8001af2 <_puts_r+0xb6>
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	6022      	str	r2, [r4, #0]
 8001aee:	7019      	strb	r1, [r3, #0]
 8001af0:	e7c5      	b.n	8001a7e <_puts_r+0x42>
 8001af2:	4622      	mov	r2, r4
 8001af4:	4628      	mov	r0, r5
 8001af6:	f000 f817 	bl	8001b28 <__swbuf_r>
 8001afa:	3001      	adds	r0, #1
 8001afc:	d1bf      	bne.n	8001a7e <_puts_r+0x42>
 8001afe:	e7df      	b.n	8001ac0 <_puts_r+0x84>
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	250a      	movs	r5, #10
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	6022      	str	r2, [r4, #0]
 8001b08:	701d      	strb	r5, [r3, #0]
 8001b0a:	e7db      	b.n	8001ac4 <_puts_r+0x88>
 8001b0c:	080024f0 	.word	0x080024f0
 8001b10:	08002510 	.word	0x08002510
 8001b14:	080024d0 	.word	0x080024d0

08001b18 <puts>:
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <puts+0xc>)
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	f7ff bf8d 	b.w	8001a3c <_puts_r>
 8001b22:	bf00      	nop
 8001b24:	20000014 	.word	0x20000014

08001b28 <__swbuf_r>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	460e      	mov	r6, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	4605      	mov	r5, r0
 8001b30:	b118      	cbz	r0, 8001b3a <__swbuf_r+0x12>
 8001b32:	6983      	ldr	r3, [r0, #24]
 8001b34:	b90b      	cbnz	r3, 8001b3a <__swbuf_r+0x12>
 8001b36:	f000 f9cd 	bl	8001ed4 <__sinit>
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <__swbuf_r+0x98>)
 8001b3c:	429c      	cmp	r4, r3
 8001b3e:	d12b      	bne.n	8001b98 <__swbuf_r+0x70>
 8001b40:	686c      	ldr	r4, [r5, #4]
 8001b42:	69a3      	ldr	r3, [r4, #24]
 8001b44:	60a3      	str	r3, [r4, #8]
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	071a      	lsls	r2, r3, #28
 8001b4a:	d52f      	bpl.n	8001bac <__swbuf_r+0x84>
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	b36b      	cbz	r3, 8001bac <__swbuf_r+0x84>
 8001b50:	6923      	ldr	r3, [r4, #16]
 8001b52:	6820      	ldr	r0, [r4, #0]
 8001b54:	1ac0      	subs	r0, r0, r3
 8001b56:	6963      	ldr	r3, [r4, #20]
 8001b58:	b2f6      	uxtb	r6, r6
 8001b5a:	4283      	cmp	r3, r0
 8001b5c:	4637      	mov	r7, r6
 8001b5e:	dc04      	bgt.n	8001b6a <__swbuf_r+0x42>
 8001b60:	4621      	mov	r1, r4
 8001b62:	4628      	mov	r0, r5
 8001b64:	f000 f922 	bl	8001dac <_fflush_r>
 8001b68:	bb30      	cbnz	r0, 8001bb8 <__swbuf_r+0x90>
 8001b6a:	68a3      	ldr	r3, [r4, #8]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	60a3      	str	r3, [r4, #8]
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	6022      	str	r2, [r4, #0]
 8001b76:	701e      	strb	r6, [r3, #0]
 8001b78:	6963      	ldr	r3, [r4, #20]
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	4283      	cmp	r3, r0
 8001b7e:	d004      	beq.n	8001b8a <__swbuf_r+0x62>
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	07db      	lsls	r3, r3, #31
 8001b84:	d506      	bpl.n	8001b94 <__swbuf_r+0x6c>
 8001b86:	2e0a      	cmp	r6, #10
 8001b88:	d104      	bne.n	8001b94 <__swbuf_r+0x6c>
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f000 f90d 	bl	8001dac <_fflush_r>
 8001b92:	b988      	cbnz	r0, 8001bb8 <__swbuf_r+0x90>
 8001b94:	4638      	mov	r0, r7
 8001b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <__swbuf_r+0x9c>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d101      	bne.n	8001ba2 <__swbuf_r+0x7a>
 8001b9e:	68ac      	ldr	r4, [r5, #8]
 8001ba0:	e7cf      	b.n	8001b42 <__swbuf_r+0x1a>
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <__swbuf_r+0xa0>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	bf08      	it	eq
 8001ba8:	68ec      	ldreq	r4, [r5, #12]
 8001baa:	e7ca      	b.n	8001b42 <__swbuf_r+0x1a>
 8001bac:	4621      	mov	r1, r4
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 f80c 	bl	8001bcc <__swsetup_r>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d0cb      	beq.n	8001b50 <__swbuf_r+0x28>
 8001bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8001bbc:	e7ea      	b.n	8001b94 <__swbuf_r+0x6c>
 8001bbe:	bf00      	nop
 8001bc0:	080024f0 	.word	0x080024f0
 8001bc4:	08002510 	.word	0x08002510
 8001bc8:	080024d0 	.word	0x080024d0

08001bcc <__swsetup_r>:
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <__swsetup_r+0xcc>)
 8001bce:	b570      	push	{r4, r5, r6, lr}
 8001bd0:	681d      	ldr	r5, [r3, #0]
 8001bd2:	4606      	mov	r6, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	b125      	cbz	r5, 8001be2 <__swsetup_r+0x16>
 8001bd8:	69ab      	ldr	r3, [r5, #24]
 8001bda:	b913      	cbnz	r3, 8001be2 <__swsetup_r+0x16>
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f000 f979 	bl	8001ed4 <__sinit>
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <__swsetup_r+0xd0>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	d10f      	bne.n	8001c08 <__swsetup_r+0x3c>
 8001be8:	686c      	ldr	r4, [r5, #4]
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bf0:	0719      	lsls	r1, r3, #28
 8001bf2:	d42c      	bmi.n	8001c4e <__swsetup_r+0x82>
 8001bf4:	06dd      	lsls	r5, r3, #27
 8001bf6:	d411      	bmi.n	8001c1c <__swsetup_r+0x50>
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	6033      	str	r3, [r6, #0]
 8001bfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c00:	81a3      	strh	r3, [r4, #12]
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295
 8001c06:	e03e      	b.n	8001c86 <__swsetup_r+0xba>
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <__swsetup_r+0xd4>)
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	d101      	bne.n	8001c12 <__swsetup_r+0x46>
 8001c0e:	68ac      	ldr	r4, [r5, #8]
 8001c10:	e7eb      	b.n	8001bea <__swsetup_r+0x1e>
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <__swsetup_r+0xd8>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	bf08      	it	eq
 8001c18:	68ec      	ldreq	r4, [r5, #12]
 8001c1a:	e7e6      	b.n	8001bea <__swsetup_r+0x1e>
 8001c1c:	0758      	lsls	r0, r3, #29
 8001c1e:	d512      	bpl.n	8001c46 <__swsetup_r+0x7a>
 8001c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c22:	b141      	cbz	r1, 8001c36 <__swsetup_r+0x6a>
 8001c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c28:	4299      	cmp	r1, r3
 8001c2a:	d002      	beq.n	8001c32 <__swsetup_r+0x66>
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f000 fa57 	bl	80020e0 <_free_r>
 8001c32:	2300      	movs	r3, #0
 8001c34:	6363      	str	r3, [r4, #52]	; 0x34
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c3c:	81a3      	strh	r3, [r4, #12]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6063      	str	r3, [r4, #4]
 8001c42:	6923      	ldr	r3, [r4, #16]
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	81a3      	strh	r3, [r4, #12]
 8001c4e:	6923      	ldr	r3, [r4, #16]
 8001c50:	b94b      	cbnz	r3, 8001c66 <__swsetup_r+0x9a>
 8001c52:	89a3      	ldrh	r3, [r4, #12]
 8001c54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d003      	beq.n	8001c66 <__swsetup_r+0x9a>
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4630      	mov	r0, r6
 8001c62:	f000 f9fd 	bl	8002060 <__smakebuf_r>
 8001c66:	89a0      	ldrh	r0, [r4, #12]
 8001c68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c6c:	f010 0301 	ands.w	r3, r0, #1
 8001c70:	d00a      	beq.n	8001c88 <__swsetup_r+0xbc>
 8001c72:	2300      	movs	r3, #0
 8001c74:	60a3      	str	r3, [r4, #8]
 8001c76:	6963      	ldr	r3, [r4, #20]
 8001c78:	425b      	negs	r3, r3
 8001c7a:	61a3      	str	r3, [r4, #24]
 8001c7c:	6923      	ldr	r3, [r4, #16]
 8001c7e:	b943      	cbnz	r3, 8001c92 <__swsetup_r+0xc6>
 8001c80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c84:	d1ba      	bne.n	8001bfc <__swsetup_r+0x30>
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	0781      	lsls	r1, r0, #30
 8001c8a:	bf58      	it	pl
 8001c8c:	6963      	ldrpl	r3, [r4, #20]
 8001c8e:	60a3      	str	r3, [r4, #8]
 8001c90:	e7f4      	b.n	8001c7c <__swsetup_r+0xb0>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7f7      	b.n	8001c86 <__swsetup_r+0xba>
 8001c96:	bf00      	nop
 8001c98:	20000014 	.word	0x20000014
 8001c9c:	080024f0 	.word	0x080024f0
 8001ca0:	08002510 	.word	0x08002510
 8001ca4:	080024d0 	.word	0x080024d0

08001ca8 <__sflush_r>:
 8001ca8:	898a      	ldrh	r2, [r1, #12]
 8001caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cac:	4605      	mov	r5, r0
 8001cae:	0710      	lsls	r0, r2, #28
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	d457      	bmi.n	8001d64 <__sflush_r+0xbc>
 8001cb4:	684b      	ldr	r3, [r1, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dc04      	bgt.n	8001cc4 <__sflush_r+0x1c>
 8001cba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dc01      	bgt.n	8001cc4 <__sflush_r+0x1c>
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cc6:	2e00      	cmp	r6, #0
 8001cc8:	d0fa      	beq.n	8001cc0 <__sflush_r+0x18>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cd0:	682f      	ldr	r7, [r5, #0]
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	d032      	beq.n	8001d3c <__sflush_r+0x94>
 8001cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cd8:	89a3      	ldrh	r3, [r4, #12]
 8001cda:	075a      	lsls	r2, r3, #29
 8001cdc:	d505      	bpl.n	8001cea <__sflush_r+0x42>
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	1ac0      	subs	r0, r0, r3
 8001ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ce4:	b10b      	cbz	r3, 8001cea <__sflush_r+0x42>
 8001ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce8:	1ac0      	subs	r0, r0, r3
 8001cea:	2300      	movs	r3, #0
 8001cec:	4602      	mov	r2, r0
 8001cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cf0:	6a21      	ldr	r1, [r4, #32]
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	47b0      	blx	r6
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	d106      	bne.n	8001d0a <__sflush_r+0x62>
 8001cfc:	6829      	ldr	r1, [r5, #0]
 8001cfe:	291d      	cmp	r1, #29
 8001d00:	d82c      	bhi.n	8001d5c <__sflush_r+0xb4>
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <__sflush_r+0x100>)
 8001d04:	40ca      	lsrs	r2, r1
 8001d06:	07d6      	lsls	r6, r2, #31
 8001d08:	d528      	bpl.n	8001d5c <__sflush_r+0xb4>
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	6062      	str	r2, [r4, #4]
 8001d0e:	04d9      	lsls	r1, r3, #19
 8001d10:	6922      	ldr	r2, [r4, #16]
 8001d12:	6022      	str	r2, [r4, #0]
 8001d14:	d504      	bpl.n	8001d20 <__sflush_r+0x78>
 8001d16:	1c42      	adds	r2, r0, #1
 8001d18:	d101      	bne.n	8001d1e <__sflush_r+0x76>
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	b903      	cbnz	r3, 8001d20 <__sflush_r+0x78>
 8001d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8001d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d22:	602f      	str	r7, [r5, #0]
 8001d24:	2900      	cmp	r1, #0
 8001d26:	d0cb      	beq.n	8001cc0 <__sflush_r+0x18>
 8001d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d2c:	4299      	cmp	r1, r3
 8001d2e:	d002      	beq.n	8001d36 <__sflush_r+0x8e>
 8001d30:	4628      	mov	r0, r5
 8001d32:	f000 f9d5 	bl	80020e0 <_free_r>
 8001d36:	2000      	movs	r0, #0
 8001d38:	6360      	str	r0, [r4, #52]	; 0x34
 8001d3a:	e7c2      	b.n	8001cc2 <__sflush_r+0x1a>
 8001d3c:	6a21      	ldr	r1, [r4, #32]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4628      	mov	r0, r5
 8001d42:	47b0      	blx	r6
 8001d44:	1c41      	adds	r1, r0, #1
 8001d46:	d1c7      	bne.n	8001cd8 <__sflush_r+0x30>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0c4      	beq.n	8001cd8 <__sflush_r+0x30>
 8001d4e:	2b1d      	cmp	r3, #29
 8001d50:	d001      	beq.n	8001d56 <__sflush_r+0xae>
 8001d52:	2b16      	cmp	r3, #22
 8001d54:	d101      	bne.n	8001d5a <__sflush_r+0xb2>
 8001d56:	602f      	str	r7, [r5, #0]
 8001d58:	e7b2      	b.n	8001cc0 <__sflush_r+0x18>
 8001d5a:	89a3      	ldrh	r3, [r4, #12]
 8001d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d60:	81a3      	strh	r3, [r4, #12]
 8001d62:	e7ae      	b.n	8001cc2 <__sflush_r+0x1a>
 8001d64:	690f      	ldr	r7, [r1, #16]
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	d0aa      	beq.n	8001cc0 <__sflush_r+0x18>
 8001d6a:	0793      	lsls	r3, r2, #30
 8001d6c:	680e      	ldr	r6, [r1, #0]
 8001d6e:	bf08      	it	eq
 8001d70:	694b      	ldreq	r3, [r1, #20]
 8001d72:	600f      	str	r7, [r1, #0]
 8001d74:	bf18      	it	ne
 8001d76:	2300      	movne	r3, #0
 8001d78:	1bf6      	subs	r6, r6, r7
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	dd9f      	ble.n	8001cc0 <__sflush_r+0x18>
 8001d80:	6a21      	ldr	r1, [r4, #32]
 8001d82:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d86:	4633      	mov	r3, r6
 8001d88:	463a      	mov	r2, r7
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	47e0      	blx	ip
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	dc06      	bgt.n	8001da0 <__sflush_r+0xf8>
 8001d92:	89a3      	ldrh	r3, [r4, #12]
 8001d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d98:	81a3      	strh	r3, [r4, #12]
 8001d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9e:	e790      	b.n	8001cc2 <__sflush_r+0x1a>
 8001da0:	4407      	add	r7, r0
 8001da2:	1a36      	subs	r6, r6, r0
 8001da4:	e7ea      	b.n	8001d7c <__sflush_r+0xd4>
 8001da6:	bf00      	nop
 8001da8:	20400001 	.word	0x20400001

08001dac <_fflush_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	690b      	ldr	r3, [r1, #16]
 8001db0:	4605      	mov	r5, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	b913      	cbnz	r3, 8001dbc <_fflush_r+0x10>
 8001db6:	2500      	movs	r5, #0
 8001db8:	4628      	mov	r0, r5
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	b118      	cbz	r0, 8001dc6 <_fflush_r+0x1a>
 8001dbe:	6983      	ldr	r3, [r0, #24]
 8001dc0:	b90b      	cbnz	r3, 8001dc6 <_fflush_r+0x1a>
 8001dc2:	f000 f887 	bl	8001ed4 <__sinit>
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <_fflush_r+0x6c>)
 8001dc8:	429c      	cmp	r4, r3
 8001dca:	d11b      	bne.n	8001e04 <_fflush_r+0x58>
 8001dcc:	686c      	ldr	r4, [r5, #4]
 8001dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ef      	beq.n	8001db6 <_fflush_r+0xa>
 8001dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dd8:	07d0      	lsls	r0, r2, #31
 8001dda:	d404      	bmi.n	8001de6 <_fflush_r+0x3a>
 8001ddc:	0599      	lsls	r1, r3, #22
 8001dde:	d402      	bmi.n	8001de6 <_fflush_r+0x3a>
 8001de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001de2:	f000 f915 	bl	8002010 <__retarget_lock_acquire_recursive>
 8001de6:	4628      	mov	r0, r5
 8001de8:	4621      	mov	r1, r4
 8001dea:	f7ff ff5d 	bl	8001ca8 <__sflush_r>
 8001dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001df0:	07da      	lsls	r2, r3, #31
 8001df2:	4605      	mov	r5, r0
 8001df4:	d4e0      	bmi.n	8001db8 <_fflush_r+0xc>
 8001df6:	89a3      	ldrh	r3, [r4, #12]
 8001df8:	059b      	lsls	r3, r3, #22
 8001dfa:	d4dd      	bmi.n	8001db8 <_fflush_r+0xc>
 8001dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfe:	f000 f908 	bl	8002012 <__retarget_lock_release_recursive>
 8001e02:	e7d9      	b.n	8001db8 <_fflush_r+0xc>
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <_fflush_r+0x70>)
 8001e06:	429c      	cmp	r4, r3
 8001e08:	d101      	bne.n	8001e0e <_fflush_r+0x62>
 8001e0a:	68ac      	ldr	r4, [r5, #8]
 8001e0c:	e7df      	b.n	8001dce <_fflush_r+0x22>
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <_fflush_r+0x74>)
 8001e10:	429c      	cmp	r4, r3
 8001e12:	bf08      	it	eq
 8001e14:	68ec      	ldreq	r4, [r5, #12]
 8001e16:	e7da      	b.n	8001dce <_fflush_r+0x22>
 8001e18:	080024f0 	.word	0x080024f0
 8001e1c:	08002510 	.word	0x08002510
 8001e20:	080024d0 	.word	0x080024d0

08001e24 <std>:
 8001e24:	2300      	movs	r3, #0
 8001e26:	b510      	push	{r4, lr}
 8001e28:	4604      	mov	r4, r0
 8001e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e32:	6083      	str	r3, [r0, #8]
 8001e34:	8181      	strh	r1, [r0, #12]
 8001e36:	6643      	str	r3, [r0, #100]	; 0x64
 8001e38:	81c2      	strh	r2, [r0, #14]
 8001e3a:	6183      	str	r3, [r0, #24]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2208      	movs	r2, #8
 8001e40:	305c      	adds	r0, #92	; 0x5c
 8001e42:	f7ff fdf3 	bl	8001a2c <memset>
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <std+0x38>)
 8001e48:	6263      	str	r3, [r4, #36]	; 0x24
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <std+0x3c>)
 8001e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <std+0x40>)
 8001e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <std+0x44>)
 8001e54:	6224      	str	r4, [r4, #32]
 8001e56:	6323      	str	r3, [r4, #48]	; 0x30
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop
 8001e5c:	080022bd 	.word	0x080022bd
 8001e60:	080022df 	.word	0x080022df
 8001e64:	08002317 	.word	0x08002317
 8001e68:	0800233b 	.word	0x0800233b

08001e6c <_cleanup_r>:
 8001e6c:	4901      	ldr	r1, [pc, #4]	; (8001e74 <_cleanup_r+0x8>)
 8001e6e:	f000 b8af 	b.w	8001fd0 <_fwalk_reent>
 8001e72:	bf00      	nop
 8001e74:	08001dad 	.word	0x08001dad

08001e78 <__sfmoreglue>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	2268      	movs	r2, #104	; 0x68
 8001e7c:	1e4d      	subs	r5, r1, #1
 8001e7e:	4355      	muls	r5, r2
 8001e80:	460e      	mov	r6, r1
 8001e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e86:	f000 f995 	bl	80021b4 <_malloc_r>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	b140      	cbz	r0, 8001ea0 <__sfmoreglue+0x28>
 8001e8e:	2100      	movs	r1, #0
 8001e90:	e9c0 1600 	strd	r1, r6, [r0]
 8001e94:	300c      	adds	r0, #12
 8001e96:	60a0      	str	r0, [r4, #8]
 8001e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e9c:	f7ff fdc6 	bl	8001a2c <memset>
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}

08001ea4 <__sfp_lock_acquire>:
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <__sfp_lock_acquire+0x8>)
 8001ea6:	f000 b8b3 	b.w	8002010 <__retarget_lock_acquire_recursive>
 8001eaa:	bf00      	nop
 8001eac:	200000d9 	.word	0x200000d9

08001eb0 <__sfp_lock_release>:
 8001eb0:	4801      	ldr	r0, [pc, #4]	; (8001eb8 <__sfp_lock_release+0x8>)
 8001eb2:	f000 b8ae 	b.w	8002012 <__retarget_lock_release_recursive>
 8001eb6:	bf00      	nop
 8001eb8:	200000d9 	.word	0x200000d9

08001ebc <__sinit_lock_acquire>:
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <__sinit_lock_acquire+0x8>)
 8001ebe:	f000 b8a7 	b.w	8002010 <__retarget_lock_acquire_recursive>
 8001ec2:	bf00      	nop
 8001ec4:	200000da 	.word	0x200000da

08001ec8 <__sinit_lock_release>:
 8001ec8:	4801      	ldr	r0, [pc, #4]	; (8001ed0 <__sinit_lock_release+0x8>)
 8001eca:	f000 b8a2 	b.w	8002012 <__retarget_lock_release_recursive>
 8001ece:	bf00      	nop
 8001ed0:	200000da 	.word	0x200000da

08001ed4 <__sinit>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	f7ff fff0 	bl	8001ebc <__sinit_lock_acquire>
 8001edc:	69a3      	ldr	r3, [r4, #24]
 8001ede:	b11b      	cbz	r3, 8001ee8 <__sinit+0x14>
 8001ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ee4:	f7ff bff0 	b.w	8001ec8 <__sinit_lock_release>
 8001ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001eec:	6523      	str	r3, [r4, #80]	; 0x50
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <__sinit+0x68>)
 8001ef0:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <__sinit+0x6c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ef6:	42a3      	cmp	r3, r4
 8001ef8:	bf04      	itt	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	61a3      	streq	r3, [r4, #24]
 8001efe:	4620      	mov	r0, r4
 8001f00:	f000 f820 	bl	8001f44 <__sfp>
 8001f04:	6060      	str	r0, [r4, #4]
 8001f06:	4620      	mov	r0, r4
 8001f08:	f000 f81c 	bl	8001f44 <__sfp>
 8001f0c:	60a0      	str	r0, [r4, #8]
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 f818 	bl	8001f44 <__sfp>
 8001f14:	2200      	movs	r2, #0
 8001f16:	60e0      	str	r0, [r4, #12]
 8001f18:	2104      	movs	r1, #4
 8001f1a:	6860      	ldr	r0, [r4, #4]
 8001f1c:	f7ff ff82 	bl	8001e24 <std>
 8001f20:	68a0      	ldr	r0, [r4, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	2109      	movs	r1, #9
 8001f26:	f7ff ff7d 	bl	8001e24 <std>
 8001f2a:	68e0      	ldr	r0, [r4, #12]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	2112      	movs	r1, #18
 8001f30:	f7ff ff78 	bl	8001e24 <std>
 8001f34:	2301      	movs	r3, #1
 8001f36:	61a3      	str	r3, [r4, #24]
 8001f38:	e7d2      	b.n	8001ee0 <__sinit+0xc>
 8001f3a:	bf00      	nop
 8001f3c:	080024cc 	.word	0x080024cc
 8001f40:	08001e6d 	.word	0x08001e6d

08001f44 <__sfp>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	4607      	mov	r7, r0
 8001f48:	f7ff ffac 	bl	8001ea4 <__sfp_lock_acquire>
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <__sfp+0x84>)
 8001f4e:	681e      	ldr	r6, [r3, #0]
 8001f50:	69b3      	ldr	r3, [r6, #24]
 8001f52:	b913      	cbnz	r3, 8001f5a <__sfp+0x16>
 8001f54:	4630      	mov	r0, r6
 8001f56:	f7ff ffbd 	bl	8001ed4 <__sinit>
 8001f5a:	3648      	adds	r6, #72	; 0x48
 8001f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	d503      	bpl.n	8001f6c <__sfp+0x28>
 8001f64:	6833      	ldr	r3, [r6, #0]
 8001f66:	b30b      	cbz	r3, 8001fac <__sfp+0x68>
 8001f68:	6836      	ldr	r6, [r6, #0]
 8001f6a:	e7f7      	b.n	8001f5c <__sfp+0x18>
 8001f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f70:	b9d5      	cbnz	r5, 8001fa8 <__sfp+0x64>
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <__sfp+0x88>)
 8001f74:	60e3      	str	r3, [r4, #12]
 8001f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8001f7c:	f000 f847 	bl	800200e <__retarget_lock_init_recursive>
 8001f80:	f7ff ff96 	bl	8001eb0 <__sfp_lock_release>
 8001f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f8c:	6025      	str	r5, [r4, #0]
 8001f8e:	61a5      	str	r5, [r4, #24]
 8001f90:	2208      	movs	r2, #8
 8001f92:	4629      	mov	r1, r5
 8001f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f98:	f7ff fd48 	bl	8001a2c <memset>
 8001f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa8:	3468      	adds	r4, #104	; 0x68
 8001faa:	e7d9      	b.n	8001f60 <__sfp+0x1c>
 8001fac:	2104      	movs	r1, #4
 8001fae:	4638      	mov	r0, r7
 8001fb0:	f7ff ff62 	bl	8001e78 <__sfmoreglue>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	6030      	str	r0, [r6, #0]
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d1d5      	bne.n	8001f68 <__sfp+0x24>
 8001fbc:	f7ff ff78 	bl	8001eb0 <__sfp_lock_release>
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	e7ee      	b.n	8001fa4 <__sfp+0x60>
 8001fc6:	bf00      	nop
 8001fc8:	080024cc 	.word	0x080024cc
 8001fcc:	ffff0001 	.word	0xffff0001

08001fd0 <_fwalk_reent>:
 8001fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fd4:	4606      	mov	r6, r0
 8001fd6:	4688      	mov	r8, r1
 8001fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fdc:	2700      	movs	r7, #0
 8001fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8001fe6:	d505      	bpl.n	8001ff4 <_fwalk_reent+0x24>
 8001fe8:	6824      	ldr	r4, [r4, #0]
 8001fea:	2c00      	cmp	r4, #0
 8001fec:	d1f7      	bne.n	8001fde <_fwalk_reent+0xe>
 8001fee:	4638      	mov	r0, r7
 8001ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ff4:	89ab      	ldrh	r3, [r5, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d907      	bls.n	800200a <_fwalk_reent+0x3a>
 8001ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ffe:	3301      	adds	r3, #1
 8002000:	d003      	beq.n	800200a <_fwalk_reent+0x3a>
 8002002:	4629      	mov	r1, r5
 8002004:	4630      	mov	r0, r6
 8002006:	47c0      	blx	r8
 8002008:	4307      	orrs	r7, r0
 800200a:	3568      	adds	r5, #104	; 0x68
 800200c:	e7e9      	b.n	8001fe2 <_fwalk_reent+0x12>

0800200e <__retarget_lock_init_recursive>:
 800200e:	4770      	bx	lr

08002010 <__retarget_lock_acquire_recursive>:
 8002010:	4770      	bx	lr

08002012 <__retarget_lock_release_recursive>:
 8002012:	4770      	bx	lr

08002014 <__swhatbuf_r>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	460e      	mov	r6, r1
 8002018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800201c:	2900      	cmp	r1, #0
 800201e:	b096      	sub	sp, #88	; 0x58
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	da08      	bge.n	8002038 <__swhatbuf_r+0x24>
 8002026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	602a      	str	r2, [r5, #0]
 800202e:	061a      	lsls	r2, r3, #24
 8002030:	d410      	bmi.n	8002054 <__swhatbuf_r+0x40>
 8002032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002036:	e00e      	b.n	8002056 <__swhatbuf_r+0x42>
 8002038:	466a      	mov	r2, sp
 800203a:	f000 f9a5 	bl	8002388 <_fstat_r>
 800203e:	2800      	cmp	r0, #0
 8002040:	dbf1      	blt.n	8002026 <__swhatbuf_r+0x12>
 8002042:	9a01      	ldr	r2, [sp, #4]
 8002044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800204c:	425a      	negs	r2, r3
 800204e:	415a      	adcs	r2, r3
 8002050:	602a      	str	r2, [r5, #0]
 8002052:	e7ee      	b.n	8002032 <__swhatbuf_r+0x1e>
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	2000      	movs	r0, #0
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	b016      	add	sp, #88	; 0x58
 800205c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002060 <__smakebuf_r>:
 8002060:	898b      	ldrh	r3, [r1, #12]
 8002062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002064:	079d      	lsls	r5, r3, #30
 8002066:	4606      	mov	r6, r0
 8002068:	460c      	mov	r4, r1
 800206a:	d507      	bpl.n	800207c <__smakebuf_r+0x1c>
 800206c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	6123      	str	r3, [r4, #16]
 8002074:	2301      	movs	r3, #1
 8002076:	6163      	str	r3, [r4, #20]
 8002078:	b002      	add	sp, #8
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	ab01      	add	r3, sp, #4
 800207e:	466a      	mov	r2, sp
 8002080:	f7ff ffc8 	bl	8002014 <__swhatbuf_r>
 8002084:	9900      	ldr	r1, [sp, #0]
 8002086:	4605      	mov	r5, r0
 8002088:	4630      	mov	r0, r6
 800208a:	f000 f893 	bl	80021b4 <_malloc_r>
 800208e:	b948      	cbnz	r0, 80020a4 <__smakebuf_r+0x44>
 8002090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002094:	059a      	lsls	r2, r3, #22
 8002096:	d4ef      	bmi.n	8002078 <__smakebuf_r+0x18>
 8002098:	f023 0303 	bic.w	r3, r3, #3
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	81a3      	strh	r3, [r4, #12]
 80020a2:	e7e3      	b.n	800206c <__smakebuf_r+0xc>
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <__smakebuf_r+0x7c>)
 80020a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	6020      	str	r0, [r4, #0]
 80020ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	9b00      	ldr	r3, [sp, #0]
 80020b4:	6163      	str	r3, [r4, #20]
 80020b6:	9b01      	ldr	r3, [sp, #4]
 80020b8:	6120      	str	r0, [r4, #16]
 80020ba:	b15b      	cbz	r3, 80020d4 <__smakebuf_r+0x74>
 80020bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020c0:	4630      	mov	r0, r6
 80020c2:	f000 f973 	bl	80023ac <_isatty_r>
 80020c6:	b128      	cbz	r0, 80020d4 <__smakebuf_r+0x74>
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	81a3      	strh	r3, [r4, #12]
 80020d4:	89a0      	ldrh	r0, [r4, #12]
 80020d6:	4305      	orrs	r5, r0
 80020d8:	81a5      	strh	r5, [r4, #12]
 80020da:	e7cd      	b.n	8002078 <__smakebuf_r+0x18>
 80020dc:	08001e6d 	.word	0x08001e6d

080020e0 <_free_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4605      	mov	r5, r0
 80020e4:	2900      	cmp	r1, #0
 80020e6:	d041      	beq.n	800216c <_free_r+0x8c>
 80020e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020ec:	1f0c      	subs	r4, r1, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bfb8      	it	lt
 80020f2:	18e4      	addlt	r4, r4, r3
 80020f4:	f000 f97c 	bl	80023f0 <__malloc_lock>
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <_free_r+0x90>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	b933      	cbnz	r3, 800210c <_free_r+0x2c>
 80020fe:	6063      	str	r3, [r4, #4]
 8002100:	6014      	str	r4, [r2, #0]
 8002102:	4628      	mov	r0, r5
 8002104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002108:	f000 b978 	b.w	80023fc <__malloc_unlock>
 800210c:	42a3      	cmp	r3, r4
 800210e:	d908      	bls.n	8002122 <_free_r+0x42>
 8002110:	6820      	ldr	r0, [r4, #0]
 8002112:	1821      	adds	r1, r4, r0
 8002114:	428b      	cmp	r3, r1
 8002116:	bf01      	itttt	eq
 8002118:	6819      	ldreq	r1, [r3, #0]
 800211a:	685b      	ldreq	r3, [r3, #4]
 800211c:	1809      	addeq	r1, r1, r0
 800211e:	6021      	streq	r1, [r4, #0]
 8002120:	e7ed      	b.n	80020fe <_free_r+0x1e>
 8002122:	461a      	mov	r2, r3
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	b10b      	cbz	r3, 800212c <_free_r+0x4c>
 8002128:	42a3      	cmp	r3, r4
 800212a:	d9fa      	bls.n	8002122 <_free_r+0x42>
 800212c:	6811      	ldr	r1, [r2, #0]
 800212e:	1850      	adds	r0, r2, r1
 8002130:	42a0      	cmp	r0, r4
 8002132:	d10b      	bne.n	800214c <_free_r+0x6c>
 8002134:	6820      	ldr	r0, [r4, #0]
 8002136:	4401      	add	r1, r0
 8002138:	1850      	adds	r0, r2, r1
 800213a:	4283      	cmp	r3, r0
 800213c:	6011      	str	r1, [r2, #0]
 800213e:	d1e0      	bne.n	8002102 <_free_r+0x22>
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	6053      	str	r3, [r2, #4]
 8002146:	4401      	add	r1, r0
 8002148:	6011      	str	r1, [r2, #0]
 800214a:	e7da      	b.n	8002102 <_free_r+0x22>
 800214c:	d902      	bls.n	8002154 <_free_r+0x74>
 800214e:	230c      	movs	r3, #12
 8002150:	602b      	str	r3, [r5, #0]
 8002152:	e7d6      	b.n	8002102 <_free_r+0x22>
 8002154:	6820      	ldr	r0, [r4, #0]
 8002156:	1821      	adds	r1, r4, r0
 8002158:	428b      	cmp	r3, r1
 800215a:	bf04      	itt	eq
 800215c:	6819      	ldreq	r1, [r3, #0]
 800215e:	685b      	ldreq	r3, [r3, #4]
 8002160:	6063      	str	r3, [r4, #4]
 8002162:	bf04      	itt	eq
 8002164:	1809      	addeq	r1, r1, r0
 8002166:	6021      	streq	r1, [r4, #0]
 8002168:	6054      	str	r4, [r2, #4]
 800216a:	e7ca      	b.n	8002102 <_free_r+0x22>
 800216c:	bd38      	pop	{r3, r4, r5, pc}
 800216e:	bf00      	nop
 8002170:	200000dc 	.word	0x200000dc

08002174 <sbrk_aligned>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	4e0e      	ldr	r6, [pc, #56]	; (80021b0 <sbrk_aligned+0x3c>)
 8002178:	460c      	mov	r4, r1
 800217a:	6831      	ldr	r1, [r6, #0]
 800217c:	4605      	mov	r5, r0
 800217e:	b911      	cbnz	r1, 8002186 <sbrk_aligned+0x12>
 8002180:	f000 f88c 	bl	800229c <_sbrk_r>
 8002184:	6030      	str	r0, [r6, #0]
 8002186:	4621      	mov	r1, r4
 8002188:	4628      	mov	r0, r5
 800218a:	f000 f887 	bl	800229c <_sbrk_r>
 800218e:	1c43      	adds	r3, r0, #1
 8002190:	d00a      	beq.n	80021a8 <sbrk_aligned+0x34>
 8002192:	1cc4      	adds	r4, r0, #3
 8002194:	f024 0403 	bic.w	r4, r4, #3
 8002198:	42a0      	cmp	r0, r4
 800219a:	d007      	beq.n	80021ac <sbrk_aligned+0x38>
 800219c:	1a21      	subs	r1, r4, r0
 800219e:	4628      	mov	r0, r5
 80021a0:	f000 f87c 	bl	800229c <_sbrk_r>
 80021a4:	3001      	adds	r0, #1
 80021a6:	d101      	bne.n	80021ac <sbrk_aligned+0x38>
 80021a8:	f04f 34ff 	mov.w	r4, #4294967295
 80021ac:	4620      	mov	r0, r4
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	200000e0 	.word	0x200000e0

080021b4 <_malloc_r>:
 80021b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b8:	1ccd      	adds	r5, r1, #3
 80021ba:	f025 0503 	bic.w	r5, r5, #3
 80021be:	3508      	adds	r5, #8
 80021c0:	2d0c      	cmp	r5, #12
 80021c2:	bf38      	it	cc
 80021c4:	250c      	movcc	r5, #12
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	4607      	mov	r7, r0
 80021ca:	db01      	blt.n	80021d0 <_malloc_r+0x1c>
 80021cc:	42a9      	cmp	r1, r5
 80021ce:	d905      	bls.n	80021dc <_malloc_r+0x28>
 80021d0:	230c      	movs	r3, #12
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	2600      	movs	r6, #0
 80021d6:	4630      	mov	r0, r6
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021dc:	4e2e      	ldr	r6, [pc, #184]	; (8002298 <_malloc_r+0xe4>)
 80021de:	f000 f907 	bl	80023f0 <__malloc_lock>
 80021e2:	6833      	ldr	r3, [r6, #0]
 80021e4:	461c      	mov	r4, r3
 80021e6:	bb34      	cbnz	r4, 8002236 <_malloc_r+0x82>
 80021e8:	4629      	mov	r1, r5
 80021ea:	4638      	mov	r0, r7
 80021ec:	f7ff ffc2 	bl	8002174 <sbrk_aligned>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	4604      	mov	r4, r0
 80021f4:	d14d      	bne.n	8002292 <_malloc_r+0xde>
 80021f6:	6834      	ldr	r4, [r6, #0]
 80021f8:	4626      	mov	r6, r4
 80021fa:	2e00      	cmp	r6, #0
 80021fc:	d140      	bne.n	8002280 <_malloc_r+0xcc>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	4631      	mov	r1, r6
 8002202:	4638      	mov	r0, r7
 8002204:	eb04 0803 	add.w	r8, r4, r3
 8002208:	f000 f848 	bl	800229c <_sbrk_r>
 800220c:	4580      	cmp	r8, r0
 800220e:	d13a      	bne.n	8002286 <_malloc_r+0xd2>
 8002210:	6821      	ldr	r1, [r4, #0]
 8002212:	3503      	adds	r5, #3
 8002214:	1a6d      	subs	r5, r5, r1
 8002216:	f025 0503 	bic.w	r5, r5, #3
 800221a:	3508      	adds	r5, #8
 800221c:	2d0c      	cmp	r5, #12
 800221e:	bf38      	it	cc
 8002220:	250c      	movcc	r5, #12
 8002222:	4629      	mov	r1, r5
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff ffa5 	bl	8002174 <sbrk_aligned>
 800222a:	3001      	adds	r0, #1
 800222c:	d02b      	beq.n	8002286 <_malloc_r+0xd2>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	442b      	add	r3, r5
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	e00e      	b.n	8002254 <_malloc_r+0xa0>
 8002236:	6822      	ldr	r2, [r4, #0]
 8002238:	1b52      	subs	r2, r2, r5
 800223a:	d41e      	bmi.n	800227a <_malloc_r+0xc6>
 800223c:	2a0b      	cmp	r2, #11
 800223e:	d916      	bls.n	800226e <_malloc_r+0xba>
 8002240:	1961      	adds	r1, r4, r5
 8002242:	42a3      	cmp	r3, r4
 8002244:	6025      	str	r5, [r4, #0]
 8002246:	bf18      	it	ne
 8002248:	6059      	strne	r1, [r3, #4]
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	bf08      	it	eq
 800224e:	6031      	streq	r1, [r6, #0]
 8002250:	5162      	str	r2, [r4, r5]
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	4638      	mov	r0, r7
 8002256:	f104 060b 	add.w	r6, r4, #11
 800225a:	f000 f8cf 	bl	80023fc <__malloc_unlock>
 800225e:	f026 0607 	bic.w	r6, r6, #7
 8002262:	1d23      	adds	r3, r4, #4
 8002264:	1af2      	subs	r2, r6, r3
 8002266:	d0b6      	beq.n	80021d6 <_malloc_r+0x22>
 8002268:	1b9b      	subs	r3, r3, r6
 800226a:	50a3      	str	r3, [r4, r2]
 800226c:	e7b3      	b.n	80021d6 <_malloc_r+0x22>
 800226e:	6862      	ldr	r2, [r4, #4]
 8002270:	42a3      	cmp	r3, r4
 8002272:	bf0c      	ite	eq
 8002274:	6032      	streq	r2, [r6, #0]
 8002276:	605a      	strne	r2, [r3, #4]
 8002278:	e7ec      	b.n	8002254 <_malloc_r+0xa0>
 800227a:	4623      	mov	r3, r4
 800227c:	6864      	ldr	r4, [r4, #4]
 800227e:	e7b2      	b.n	80021e6 <_malloc_r+0x32>
 8002280:	4634      	mov	r4, r6
 8002282:	6876      	ldr	r6, [r6, #4]
 8002284:	e7b9      	b.n	80021fa <_malloc_r+0x46>
 8002286:	230c      	movs	r3, #12
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4638      	mov	r0, r7
 800228c:	f000 f8b6 	bl	80023fc <__malloc_unlock>
 8002290:	e7a1      	b.n	80021d6 <_malloc_r+0x22>
 8002292:	6025      	str	r5, [r4, #0]
 8002294:	e7de      	b.n	8002254 <_malloc_r+0xa0>
 8002296:	bf00      	nop
 8002298:	200000dc 	.word	0x200000dc

0800229c <_sbrk_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	4d06      	ldr	r5, [pc, #24]	; (80022b8 <_sbrk_r+0x1c>)
 80022a0:	2300      	movs	r3, #0
 80022a2:	4604      	mov	r4, r0
 80022a4:	4608      	mov	r0, r1
 80022a6:	602b      	str	r3, [r5, #0]
 80022a8:	f7fe f9f0 	bl	800068c <_sbrk>
 80022ac:	1c43      	adds	r3, r0, #1
 80022ae:	d102      	bne.n	80022b6 <_sbrk_r+0x1a>
 80022b0:	682b      	ldr	r3, [r5, #0]
 80022b2:	b103      	cbz	r3, 80022b6 <_sbrk_r+0x1a>
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	bd38      	pop	{r3, r4, r5, pc}
 80022b8:	200000e4 	.word	0x200000e4

080022bc <__sread>:
 80022bc:	b510      	push	{r4, lr}
 80022be:	460c      	mov	r4, r1
 80022c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c4:	f000 f8a0 	bl	8002408 <_read_r>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	bfab      	itete	ge
 80022cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022ce:	89a3      	ldrhlt	r3, [r4, #12]
 80022d0:	181b      	addge	r3, r3, r0
 80022d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022d6:	bfac      	ite	ge
 80022d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80022da:	81a3      	strhlt	r3, [r4, #12]
 80022dc:	bd10      	pop	{r4, pc}

080022de <__swrite>:
 80022de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e2:	461f      	mov	r7, r3
 80022e4:	898b      	ldrh	r3, [r1, #12]
 80022e6:	05db      	lsls	r3, r3, #23
 80022e8:	4605      	mov	r5, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4616      	mov	r6, r2
 80022ee:	d505      	bpl.n	80022fc <__swrite+0x1e>
 80022f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f4:	2302      	movs	r3, #2
 80022f6:	2200      	movs	r2, #0
 80022f8:	f000 f868 	bl	80023cc <_lseek_r>
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002306:	81a3      	strh	r3, [r4, #12]
 8002308:	4632      	mov	r2, r6
 800230a:	463b      	mov	r3, r7
 800230c:	4628      	mov	r0, r5
 800230e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002312:	f000 b817 	b.w	8002344 <_write_r>

08002316 <__sseek>:
 8002316:	b510      	push	{r4, lr}
 8002318:	460c      	mov	r4, r1
 800231a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231e:	f000 f855 	bl	80023cc <_lseek_r>
 8002322:	1c43      	adds	r3, r0, #1
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	bf15      	itete	ne
 8002328:	6560      	strne	r0, [r4, #84]	; 0x54
 800232a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800232e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002332:	81a3      	strheq	r3, [r4, #12]
 8002334:	bf18      	it	ne
 8002336:	81a3      	strhne	r3, [r4, #12]
 8002338:	bd10      	pop	{r4, pc}

0800233a <__sclose>:
 800233a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800233e:	f000 b813 	b.w	8002368 <_close_r>
	...

08002344 <_write_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	4d07      	ldr	r5, [pc, #28]	; (8002364 <_write_r+0x20>)
 8002348:	4604      	mov	r4, r0
 800234a:	4608      	mov	r0, r1
 800234c:	4611      	mov	r1, r2
 800234e:	2200      	movs	r2, #0
 8002350:	602a      	str	r2, [r5, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	f7fe f94d 	bl	80005f2 <_write>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d102      	bne.n	8002362 <_write_r+0x1e>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	b103      	cbz	r3, 8002362 <_write_r+0x1e>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	200000e4 	.word	0x200000e4

08002368 <_close_r>:
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	4d06      	ldr	r5, [pc, #24]	; (8002384 <_close_r+0x1c>)
 800236c:	2300      	movs	r3, #0
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	f7fe f959 	bl	800062a <_close>
 8002378:	1c43      	adds	r3, r0, #1
 800237a:	d102      	bne.n	8002382 <_close_r+0x1a>
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	b103      	cbz	r3, 8002382 <_close_r+0x1a>
 8002380:	6023      	str	r3, [r4, #0]
 8002382:	bd38      	pop	{r3, r4, r5, pc}
 8002384:	200000e4 	.word	0x200000e4

08002388 <_fstat_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	4d07      	ldr	r5, [pc, #28]	; (80023a8 <_fstat_r+0x20>)
 800238c:	2300      	movs	r3, #0
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	f7fe f953 	bl	8000640 <_fstat>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	d102      	bne.n	80023a4 <_fstat_r+0x1c>
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	b103      	cbz	r3, 80023a4 <_fstat_r+0x1c>
 80023a2:	6023      	str	r3, [r4, #0]
 80023a4:	bd38      	pop	{r3, r4, r5, pc}
 80023a6:	bf00      	nop
 80023a8:	200000e4 	.word	0x200000e4

080023ac <_isatty_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4d06      	ldr	r5, [pc, #24]	; (80023c8 <_isatty_r+0x1c>)
 80023b0:	2300      	movs	r3, #0
 80023b2:	4604      	mov	r4, r0
 80023b4:	4608      	mov	r0, r1
 80023b6:	602b      	str	r3, [r5, #0]
 80023b8:	f7fe f951 	bl	800065e <_isatty>
 80023bc:	1c43      	adds	r3, r0, #1
 80023be:	d102      	bne.n	80023c6 <_isatty_r+0x1a>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	b103      	cbz	r3, 80023c6 <_isatty_r+0x1a>
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	200000e4 	.word	0x200000e4

080023cc <_lseek_r>:
 80023cc:	b538      	push	{r3, r4, r5, lr}
 80023ce:	4d07      	ldr	r5, [pc, #28]	; (80023ec <_lseek_r+0x20>)
 80023d0:	4604      	mov	r4, r0
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	2200      	movs	r2, #0
 80023d8:	602a      	str	r2, [r5, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	f7fe f949 	bl	8000672 <_lseek>
 80023e0:	1c43      	adds	r3, r0, #1
 80023e2:	d102      	bne.n	80023ea <_lseek_r+0x1e>
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	b103      	cbz	r3, 80023ea <_lseek_r+0x1e>
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	bd38      	pop	{r3, r4, r5, pc}
 80023ec:	200000e4 	.word	0x200000e4

080023f0 <__malloc_lock>:
 80023f0:	4801      	ldr	r0, [pc, #4]	; (80023f8 <__malloc_lock+0x8>)
 80023f2:	f7ff be0d 	b.w	8002010 <__retarget_lock_acquire_recursive>
 80023f6:	bf00      	nop
 80023f8:	200000d8 	.word	0x200000d8

080023fc <__malloc_unlock>:
 80023fc:	4801      	ldr	r0, [pc, #4]	; (8002404 <__malloc_unlock+0x8>)
 80023fe:	f7ff be08 	b.w	8002012 <__retarget_lock_release_recursive>
 8002402:	bf00      	nop
 8002404:	200000d8 	.word	0x200000d8

08002408 <_read_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4d07      	ldr	r5, [pc, #28]	; (8002428 <_read_r+0x20>)
 800240c:	4604      	mov	r4, r0
 800240e:	4608      	mov	r0, r1
 8002410:	4611      	mov	r1, r2
 8002412:	2200      	movs	r2, #0
 8002414:	602a      	str	r2, [r5, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	f7fe f8ce 	bl	80005b8 <_read>
 800241c:	1c43      	adds	r3, r0, #1
 800241e:	d102      	bne.n	8002426 <_read_r+0x1e>
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	b103      	cbz	r3, 8002426 <_read_r+0x1e>
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	bd38      	pop	{r3, r4, r5, pc}
 8002428:	200000e4 	.word	0x200000e4

0800242c <_init>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr

08002438 <_fini>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr
