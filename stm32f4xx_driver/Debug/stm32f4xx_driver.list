
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002718  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002980  08002980  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002980  08002980  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000000a4  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002366  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007fe  00000000  00000000  00022418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00022c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000278  00000000  00000000  00022ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bcd  00000000  00000000  00023160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030e4  00000000  00000000  00026d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c268  00000000  00000000  00029e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00036079  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012dc  00000000  00000000  000360cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080028b0 	.word	0x080028b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	080028b0 	.word	0x080028b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
#define MY_ADDR 0x61

#define SLAVE_ADDR  0x68

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <GPIO_ButtonInit+0x2c>)
 80002d4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002da:	2300      	movs	r3, #0
 80002dc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fb6f 	bl	80009cc <GPIO_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <I2C1_GPIOinits>:

void I2C1_GPIOinits(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1Pins;

    I2C1Pins.pGPIOx = GPIOB;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <I2C1_GPIOinits+0x40>)
 8000304:	607b      	str	r3, [r7, #4]
    I2C1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000306:	2302      	movs	r3, #2
 8000308:	727b      	strb	r3, [r7, #9]
    I2C1Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800030a:	2301      	movs	r3, #1
 800030c:	733b      	strb	r3, [r7, #12]
    I2C1Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800030e:	2301      	movs	r3, #1
 8000310:	72fb      	strb	r3, [r7, #11]
    I2C1Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000312:	2304      	movs	r3, #4
 8000314:	737b      	strb	r3, [r7, #13]
    I2C1Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000316:	2302      	movs	r3, #2
 8000318:	72bb      	strb	r3, [r7, #10]

    //scl
    I2C1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800031a:	2306      	movs	r3, #6
 800031c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C1Pins);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fb53 	bl	80009cc <GPIO_Init>
    // //scl
    // I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
    // GPIO_Init(&I2CPins);

    //sda
    I2C1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000326:	2307      	movs	r3, #7
 8000328:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C1Pins);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fb4d 	bl	80009cc <GPIO_Init>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40020400 	.word	0x40020400

08000340 <I2C2_GPIOinits>:

void I2C2_GPIOinits(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C2Pins;

    I2C2Pins.pGPIOx = GPIOB;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <I2C2_GPIOinits+0x40>)
 8000348:	607b      	str	r3, [r7, #4]
    I2C2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800034a:	2302      	movs	r3, #2
 800034c:	727b      	strb	r3, [r7, #9]
    I2C2Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800034e:	2301      	movs	r3, #1
 8000350:	733b      	strb	r3, [r7, #12]
    I2C2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000352:	2301      	movs	r3, #1
 8000354:	72fb      	strb	r3, [r7, #11]
    I2C2Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000356:	2304      	movs	r3, #4
 8000358:	737b      	strb	r3, [r7, #13]
    I2C2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	72bb      	strb	r3, [r7, #10]

    //scl
    I2C2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800035e:	230a      	movs	r3, #10
 8000360:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C2Pins);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fb31 	bl	80009cc <GPIO_Init>

    //sda
    I2C2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800036a:	230b      	movs	r3, #11
 800036c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C2Pins);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fb2b 	bl	80009cc <GPIO_Init>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40020400 	.word	0x40020400

08000384 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <I2C1_Inits+0x2c>)
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <I2C1_Inits+0x30>)
 800038c:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <I2C1_Inits+0x2c>)
 8000390:	2201      	movs	r2, #1
 8000392:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <I2C1_Inits+0x2c>)
 8000396:	2261      	movs	r2, #97	; 0x61
 8000398:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <I2C1_Inits+0x2c>)
 800039c:	2200      	movs	r2, #0
 800039e:	815a      	strh	r2, [r3, #10]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <I2C1_Inits+0x2c>)
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <I2C1_Inits+0x34>)
 80003a4:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C1Handle);
 80003a6:	4802      	ldr	r0, [pc, #8]	; (80003b0 <I2C1_Inits+0x2c>)
 80003a8:	f000 fdee 	bl	8000f88 <I2C_Init>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200000a4 	.word	0x200000a4
 80003b4:	40005400 	.word	0x40005400
 80003b8:	000186a0 	.word	0x000186a0

080003bc <I2C2_Inits>:

void I2C2_Inits(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    I2C2Handle.pI2Cx = I2C2;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <I2C2_Inits+0x2c>)
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <I2C2_Inits+0x30>)
 80003c4:	601a      	str	r2, [r3, #0]
    I2C2Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <I2C2_Inits+0x2c>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	725a      	strb	r2, [r3, #9]
    I2C2Handle.I2C_Config.I2C_DeviceAddress = SLAVE_ADDR;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <I2C2_Inits+0x2c>)
 80003ce:	2268      	movs	r2, #104	; 0x68
 80003d0:	721a      	strb	r2, [r3, #8]
    I2C2Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <I2C2_Inits+0x2c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	815a      	strh	r2, [r3, #10]
    I2C2Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <I2C2_Inits+0x2c>)
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <I2C2_Inits+0x34>)
 80003dc:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C2Handle);
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <I2C2_Inits+0x2c>)
 80003e0:	f000 fdd2 	bl	8000f88 <I2C_Init>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000cc 	.word	0x200000cc
 80003ec:	40005800 	.word	0x40005800
 80003f0:	000186a0 	.word	0x000186a0

080003f4 <main>:

int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af02      	add	r7, sp, #8
    uint8_t commandcode;
    uint8_t len;
	// printf("start\n");
    GPIO_ButtonInit();
 80003fa:	f7ff ff67 	bl	80002cc <GPIO_ButtonInit>

    I2C1_GPIOinits();
 80003fe:	f7ff ff7d 	bl	80002fc <I2C1_GPIOinits>

    I2C1_Inits();
 8000402:	f7ff ffbf 	bl	8000384 <I2C1_Inits>


    //I2C IRQ configuration
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000406:	2101      	movs	r1, #1
 8000408:	201f      	movs	r0, #31
 800040a:	f000 ff87 	bl	800131c <I2C_IRQInterruptConfig>
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 800040e:	2101      	movs	r1, #1
 8000410:	2020      	movs	r0, #32
 8000412:	f000 ff83 	bl	800131c <I2C_IRQInterruptConfig>
    I2C_PeripheralControl(I2C1, ENABLE);
 8000416:	2101      	movs	r1, #1
 8000418:	4836      	ldr	r0, [pc, #216]	; (80004f4 <main+0x100>)
 800041a:	f000 fd9a 	bl	8000f52 <I2C_PeripheralControl>
    // I2C_IRQPriorityConfig();

    //ack bit is made 1 after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	4834      	ldr	r0, [pc, #208]	; (80004f4 <main+0x100>)
 8000422:	f000 ff07 	bl	8001234 <I2C_ManageAcking>


    I2C2_GPIOinits();
 8000426:	f7ff ff8b 	bl	8000340 <I2C2_GPIOinits>

    I2C2_Inits();
 800042a:	f7ff ffc7 	bl	80003bc <I2C2_Inits>
    //I2C IRQ configuration
    I2C_IRQInterruptConfig(IRQ_NO_I2C2_EV, ENABLE);
 800042e:	2101      	movs	r1, #1
 8000430:	2021      	movs	r0, #33	; 0x21
 8000432:	f000 ff73 	bl	800131c <I2C_IRQInterruptConfig>
    I2C_IRQInterruptConfig(IRQ_NO_I2C2_ER, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	2022      	movs	r0, #34	; 0x22
 800043a:	f000 ff6f 	bl	800131c <I2C_IRQInterruptConfig>
    I2C_PeripheralControl(I2C2, ENABLE);
 800043e:	2101      	movs	r1, #1
 8000440:	482d      	ldr	r0, [pc, #180]	; (80004f8 <main+0x104>)
 8000442:	f000 fd86 	bl	8000f52 <I2C_PeripheralControl>

    //ack bit is made 1 after PE = 1
    I2C_ManageAcking(I2C2, I2C_ACK_ENABLE);
 8000446:	2101      	movs	r1, #1
 8000448:	482b      	ldr	r0, [pc, #172]	; (80004f8 <main+0x104>)
 800044a:	f000 fef3 	bl	8001234 <I2C_ManageAcking>

    while(1)
    {
 //		//wait till button is pressed
 		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800044e:	bf00      	nop
 8000450:	2100      	movs	r1, #0
 8000452:	482a      	ldr	r0, [pc, #168]	; (80004fc <main+0x108>)
 8000454:	f000 fc56 	bl	8000d04 <GPIO_ReadFromInputPin>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f8      	beq.n	8000450 <main+0x5c>

 		//to avoid button de-bouncing related issues 200ms of delay
 		delay();
 800045e:	f7ff ff1f 	bl	80002a0 <delay>
 		// I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data), SLAVE_ADDR, 0);
        // while(I2C_MasterSendDataIT(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR, 0) != I2C_READY);
        // int len = sizeof(some_data)/sizeof(some_data[0]);
        // I2C_MasterSendDataIT(&I2C1Handle,some_data,len,SLAVE_ADDR, 0);

        commandcode = 0x51;
 8000462:	2351      	movs	r3, #81	; 0x51
 8000464:	71fb      	strb	r3, [r7, #7]
        // printf("1\n");
        while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8000466:	bf00      	nop
 8000468:	1df9      	adds	r1, r7, #7
 800046a:	2301      	movs	r3, #1
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2368      	movs	r3, #104	; 0x68
 8000470:	2201      	movs	r2, #1
 8000472:	4823      	ldr	r0, [pc, #140]	; (8000500 <main+0x10c>)
 8000474:	f000 fe30 	bl	80010d8 <I2C_MasterSendDataIT>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1f4      	bne.n	8000468 <main+0x74>
        // printf("2\n");
		while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR)!= I2C_READY);
 800047e:	bf00      	nop
 8000480:	1db9      	adds	r1, r7, #6
 8000482:	2301      	movs	r3, #1
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2368      	movs	r3, #104	; 0x68
 8000488:	2201      	movs	r2, #1
 800048a:	481d      	ldr	r0, [pc, #116]	; (8000500 <main+0x10c>)
 800048c:	f000 fe6e 	bl	800116c <I2C_MasterReceiveDataIT>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d1f4      	bne.n	8000480 <main+0x8c>
        // printf("3\n");

		commandcode = 0x52;
 8000496:	2352      	movs	r3, #82	; 0x52
 8000498:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800049a:	bf00      	nop
 800049c:	1df9      	adds	r1, r7, #7
 800049e:	2301      	movs	r3, #1
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2368      	movs	r3, #104	; 0x68
 80004a4:	2201      	movs	r2, #1
 80004a6:	4816      	ldr	r0, [pc, #88]	; (8000500 <main+0x10c>)
 80004a8:	f000 fe16 	bl	80010d8 <I2C_MasterSendDataIT>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f4      	bne.n	800049c <main+0xa8>
		while(I2C_MasterReceiveDataIT(&I2C1Handle, rcv_buf,len, SLAVE_ADDR, I2C_DISABLE_SR)!= I2C_READY);
 80004b2:	bf00      	nop
 80004b4:	79ba      	ldrb	r2, [r7, #6]
 80004b6:	2300      	movs	r3, #0
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2368      	movs	r3, #104	; 0x68
 80004bc:	4911      	ldr	r1, [pc, #68]	; (8000504 <main+0x110>)
 80004be:	4810      	ldr	r0, [pc, #64]	; (8000500 <main+0x10c>)
 80004c0:	f000 fe54 	bl	800116c <I2C_MasterReceiveDataIT>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d1f4      	bne.n	80004b4 <main+0xc0>

		RxComplt = RESET;
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <main+0x114>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]

		// //wait till rx completes
        while(RxComplt != SET)
 80004d0:	bf00      	nop
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <main+0x114>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d1fb      	bne.n	80004d2 <main+0xde>
        {
            
        }

		rcv_buf[len+1] = '\0';
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a09      	ldr	r2, [pc, #36]	; (8000504 <main+0x110>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 80004e4:	4907      	ldr	r1, [pc, #28]	; (8000504 <main+0x110>)
 80004e6:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x118>)
 80004e8:	f001 f9e6 	bl	80018b8 <iprintf>

		RxComplt = RESET;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <main+0x114>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
 		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004f2:	e7ac      	b.n	800044e <main+0x5a>
 80004f4:	40005400 	.word	0x40005400
 80004f8:	40005800 	.word	0x40005800
 80004fc:	40020000 	.word	0x40020000
 8000500:	200000a4 	.word	0x200000a4
 8000504:	200000f4 	.word	0x200000f4
 8000508:	20000000 	.word	0x20000000
 800050c:	080028c8 	.word	0x080028c8

08000510 <I2C1_EV_IRQHandler>:
    }
}

void I2C1_EV_IRQHandler(void)
{   
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    // printf("i2c1 ev\n");
    I2C_EV_IRQHandling(&I2C1Handle);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <I2C1_EV_IRQHandler+0x10>)
 8000516:	f000 ffee 	bl	80014f6 <I2C_EV_IRQHandling>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000a4 	.word	0x200000a4

08000524 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    // printf("i2c1 er\n");
    I2C_ER_IRQHandling(&I2C1Handle);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <I2C1_ER_IRQHandler+0x10>)
 800052a:	f001 f90c 	bl	8001746 <I2C_ER_IRQHandling>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000a4 	.word	0x200000a4

08000538 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{   
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    // printf("i2c2 ev\n");
    I2C_EV_IRQHandling(&I2C2Handle);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <I2C2_EV_IRQHandler+0x10>)
 800053e:	f000 ffda 	bl	80014f6 <I2C_EV_IRQHandling>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000cc 	.word	0x200000cc

0800054c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    // printf("i2c2 er\n");
    I2C_ER_IRQHandling(&I2C2Handle);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <I2C2_ER_IRQHandler+0x10>)
 8000552:	f001 f8f8 	bl	8001746 <I2C_ER_IRQHandling>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000cc 	.word	0x200000cc

08000560 <I2C_ApplicationEventCallback>:

#if 1
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
    static uint8_t commandCode = 0;
    static uint8_t cnt = 0;
    if(AppEv == I2C_EV_DATA_REQ)
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	2b08      	cmp	r3, #8
 8000570:	d123      	bne.n	80005ba <I2C_ApplicationEventCallback+0x5a>
    {
        // // printf("Tx is complete\n");
        if(commandCode == 0x51)
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <I2C_ApplicationEventCallback+0xa4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b51      	cmp	r3, #81	; 0x51
 8000578:	d10b      	bne.n	8000592 <I2C_ApplicationEventCallback+0x32>
        {      
            // printf("s t len\n");
            I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)some_data));
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681c      	ldr	r4, [r3, #0]
 800057e:	4822      	ldr	r0, [pc, #136]	; (8000608 <I2C_ApplicationEventCallback+0xa8>)
 8000580:	f7ff fe36 	bl	80001f0 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	4620      	mov	r0, r4
 800058c:	f000 fe38 	bl	8001200 <I2C_SlaveSendData>
        I2C_GenerateStopCondition(I2C1);

        //Hang in infinite loop
        while(1);
    } 
}
 8000590:	e033      	b.n	80005fa <I2C_ApplicationEventCallback+0x9a>
        else if (commandCode == 0x52)
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <I2C_ApplicationEventCallback+0xa4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b52      	cmp	r3, #82	; 0x52
 8000598:	d12f      	bne.n	80005fa <I2C_ApplicationEventCallback+0x9a>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, some_data[cnt++]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <I2C_ApplicationEventCallback+0xac>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	1c59      	adds	r1, r3, #1
 80005a4:	b2c8      	uxtb	r0, r1
 80005a6:	4919      	ldr	r1, [pc, #100]	; (800060c <I2C_ApplicationEventCallback+0xac>)
 80005a8:	7008      	strb	r0, [r1, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <I2C_ApplicationEventCallback+0xa8>)
 80005ae:	5c5b      	ldrb	r3, [r3, r1]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4610      	mov	r0, r2
 80005b4:	f000 fe24 	bl	8001200 <I2C_SlaveSendData>
}
 80005b8:	e01f      	b.n	80005fa <I2C_ApplicationEventCallback+0x9a>
    else if(AppEv == I2C_EV_TX_CMPLT)
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01c      	beq.n	80005fa <I2C_ApplicationEventCallback+0x9a>
    else if(AppEv == I2C_EV_RX_CMPLT)
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10c      	bne.n	80005e0 <I2C_ApplicationEventCallback+0x80>
        commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fe26 	bl	800121c <I2C_SlaveReceiveData>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <I2C_ApplicationEventCallback+0xa4>)
 80005d6:	701a      	strb	r2, [r3, #0]
        RxComplt = SET;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <I2C_ApplicationEventCallback+0xb0>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
}
 80005de:	e00c      	b.n	80005fa <I2C_ApplicationEventCallback+0x9a>
    else if(AppEv == I2C_ERROR_AF)
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	2b05      	cmp	r3, #5
 80005e4:	d109      	bne.n	80005fa <I2C_ApplicationEventCallback+0x9a>
        printf("Error: Ack failure\n");
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <I2C_ApplicationEventCallback+0xb4>)
 80005e8:	f001 f9ec 	bl	80019c4 <puts>
        I2C_CloseSendData(pI2CHandle);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f888 	bl	8001702 <I2C_CloseSendData>
        I2C_GenerateStopCondition(I2C1);
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <I2C_ApplicationEventCallback+0xb8>)
 80005f4:	f000 fc0b 	bl	8000e0e <I2C_GenerateStopCondition>
        while(1);
 80005f8:	e7fe      	b.n	80005f8 <I2C_ApplicationEventCallback+0x98>
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd90      	pop	{r4, r7, pc}
 8000602:	bf00      	nop
 8000604:	20000114 	.word	0x20000114
 8000608:	20000004 	.word	0x20000004
 800060c:	20000115 	.word	0x20000115
 8000610:	20000000 	.word	0x20000000
 8000614:	080028d4 	.word	0x080028d4
 8000618:	40005400 	.word	0x40005400

0800061c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <ITM_SendChar+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <ITM_SendChar+0x44>)
 800062c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000630:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <ITM_SendChar+0x48>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <ITM_SendChar+0x48>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800063e:	bf00      	nop
 8000640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f8      	beq.n	8000640 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800064e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	6013      	str	r3, [r2, #0]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	e000edfc 	.word	0xe000edfc
 8000664:	e0000e00 	.word	0xe0000e00

08000668 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00a      	b.n	8000690 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800067a:	f3af 8000 	nop.w
 800067e:	4601      	mov	r1, r0
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	b2ca      	uxtb	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbf0      	blt.n	800067a <_read+0x12>
	}

return len;
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e009      	b.n	80006c8 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	60ba      	str	r2, [r7, #8]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffad 	bl	800061c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf1      	blt.n	80006b4 <_write+0x12>
	}
	return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_close>:

int _close(int file)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	return -1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000700:	605a      	str	r2, [r3, #4]
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <_isatty>:

int _isatty(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
	return 1;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000722:	b480      	push	{r7}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
	return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
	...

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f001 f872 	bl	8001854 <__errno>
 8000770:	4603      	mov	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <_sbrk+0x64>)
 800078c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20020000 	.word	0x20020000
 800079c:	00000400 	.word	0x00000400
 80007a0:	20000118 	.word	0x20000118
 80007a4:	20000130 	.word	0x20000130

080007a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490d      	ldr	r1, [pc, #52]	; (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0a      	ldr	r4, [pc, #40]	; (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d6:	f001 f843 	bl	8001860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fe0b 	bl	80003f4 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   r0, =_estack
 80007e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80007ec:	08002988 	.word	0x08002988
  ldr r2, =_sbss
 80007f0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80007f4:	2000012c 	.word	0x2000012c

080007f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC_IRQHandler>
	...

080007fc <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d162      	bne.n	80008d4 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a64      	ldr	r2, [pc, #400]	; (80009a4 <GPIO_PeriClockControl+0x1a8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a63      	ldr	r2, [pc, #396]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8000822:	e0b9      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a61      	ldr	r2, [pc, #388]	; (80009ac <GPIO_PeriClockControl+0x1b0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800082c:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a5d      	ldr	r2, [pc, #372]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000838:	e0ae      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a5c      	ldr	r2, [pc, #368]	; (80009b0 <GPIO_PeriClockControl+0x1b4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000842:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a58      	ldr	r2, [pc, #352]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800084e:	e0a3      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a58      	ldr	r2, [pc, #352]	; (80009b4 <GPIO_PeriClockControl+0x1b8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000858:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a52      	ldr	r2, [pc, #328]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000864:	e098      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a53      	ldr	r2, [pc, #332]	; (80009b8 <GPIO_PeriClockControl+0x1bc>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4d      	ldr	r2, [pc, #308]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087a:	e08d      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a4f      	ldr	r2, [pc, #316]	; (80009bc <GPIO_PeriClockControl+0x1c0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000884:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a47      	ldr	r2, [pc, #284]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800088a:	f043 0320 	orr.w	r3, r3, #32
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000890:	e082      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a4a      	ldr	r2, [pc, #296]	; (80009c0 <GPIO_PeriClockControl+0x1c4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800089a:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a42      	ldr	r2, [pc, #264]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a6:	e077      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a46      	ldr	r2, [pc, #280]	; (80009c4 <GPIO_PeriClockControl+0x1c8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80008b0:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008bc:	e06c      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a41      	ldr	r2, [pc, #260]	; (80009c8 <GPIO_PeriClockControl+0x1cc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d168      	bne.n	8000998 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d2:	e061      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <GPIO_PeriClockControl+0x1a8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d106      	bne.n	80008ea <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80008dc:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008e2:	f023 0301 	bic.w	r3, r3, #1
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008e8:	e056      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <GPIO_PeriClockControl+0x1b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 80008f8:	f023 0302 	bic.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008fe:	e04b      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <GPIO_PeriClockControl+0x1b4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d106      	bne.n	8000916 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800090e:	f023 0304 	bic.w	r3, r3, #4
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000914:	e040      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <GPIO_PeriClockControl+0x1b8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000924:	f023 0308 	bic.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092a:	e035      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <GPIO_PeriClockControl+0x1bc>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d106      	bne.n	8000942 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800093a:	f023 0310 	bic.w	r3, r3, #16
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000940:	e02a      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <GPIO_PeriClockControl+0x1c0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000950:	f023 0320 	bic.w	r3, r3, #32
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000956:	e01f      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <GPIO_PeriClockControl+0x1c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800096a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800096c:	e014      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <GPIO_PeriClockControl+0x1c8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800097c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000982:	e009      	b.n	8000998 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <GPIO_PeriClockControl+0x1cc>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d105      	bne.n	8000998 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <GPIO_PeriClockControl+0x1ac>)
 8000992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40021400 	.word	0x40021400
 80009c0:	40021800 	.word	0x40021800
 80009c4:	40021c00 	.word	0x40021c00
 80009c8:	40022000 	.word	0x40022000

080009cc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff0c 	bl	80007fc <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d820      	bhi.n	8000a2e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	795b      	ldrb	r3, [r3, #5]
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	400a      	ands	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e0cb      	b.n	8000bc6 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d117      	bne.n	8000a66 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a36:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <GPIO_Init+0x198>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	7912      	ldrb	r2, [r2, #4]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	2201      	movs	r2, #1
 8000a42:	408a      	lsls	r2, r1
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <GPIO_Init+0x198>)
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a4c:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <GPIO_Init+0x198>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	7912      	ldrb	r2, [r2, #4]
 8000a54:	4611      	mov	r1, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	408a      	lsls	r2, r1
 8000a5a:	43d2      	mvns	r2, r2
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4a41      	ldr	r2, [pc, #260]	; (8000b64 <GPIO_Init+0x198>)
 8000a60:	400b      	ands	r3, r1
 8000a62:	6093      	str	r3, [r2, #8]
 8000a64:	e035      	b.n	8000ad2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d117      	bne.n	8000a9e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <GPIO_Init+0x198>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	7912      	ldrb	r2, [r2, #4]
 8000a76:	4611      	mov	r1, r2
 8000a78:	2201      	movs	r2, #1
 8000a7a:	408a      	lsls	r2, r1
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a39      	ldr	r2, [pc, #228]	; (8000b64 <GPIO_Init+0x198>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <GPIO_Init+0x198>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7912      	ldrb	r2, [r2, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	408a      	lsls	r2, r1
 8000a92:	43d2      	mvns	r2, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <GPIO_Init+0x198>)
 8000a98:	400b      	ands	r3, r1
 8000a9a:	60d3      	str	r3, [r2, #12]
 8000a9c:	e019      	b.n	8000ad2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d115      	bne.n	8000ad2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <GPIO_Init+0x198>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7912      	ldrb	r2, [r2, #4]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	408a      	lsls	r2, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <GPIO_Init+0x198>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <GPIO_Init+0x198>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	7912      	ldrb	r2, [r2, #4]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	408a      	lsls	r2, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <GPIO_Init+0x198>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <GPIO_Init+0x19c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d04e      	beq.n	8000b8c <GPIO_Init+0x1c0>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <GPIO_Init+0x1a0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d032      	beq.n	8000b5e <GPIO_Init+0x192>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <GPIO_Init+0x1a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d02b      	beq.n	8000b5a <GPIO_Init+0x18e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <GPIO_Init+0x1a8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d024      	beq.n	8000b56 <GPIO_Init+0x18a>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <GPIO_Init+0x1ac>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01d      	beq.n	8000b52 <GPIO_Init+0x186>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <GPIO_Init+0x1b0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d016      	beq.n	8000b4e <GPIO_Init+0x182>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <GPIO_Init+0x1b4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00f      	beq.n	8000b4a <GPIO_Init+0x17e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <GPIO_Init+0x1b8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d008      	beq.n	8000b46 <GPIO_Init+0x17a>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <GPIO_Init+0x1bc>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <GPIO_Init+0x176>
 8000b3e:	2308      	movs	r3, #8
 8000b40:	e025      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b42:	2300      	movs	r3, #0
 8000b44:	e023      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b46:	2307      	movs	r3, #7
 8000b48:	e021      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	e01f      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b4e:	2305      	movs	r3, #5
 8000b50:	e01d      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b52:	2304      	movs	r3, #4
 8000b54:	e01b      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e019      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	e017      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e015      	b.n	8000b8e <GPIO_Init+0x1c2>
 8000b62:	bf00      	nop
 8000b64:	40013c00 	.word	0x40013c00
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40021c00 	.word	0x40021c00
 8000b88:	40022000 	.word	0x40022000
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000b90:	4b59      	ldr	r3, [pc, #356]	; (8000cf8 <GPIO_Init+0x32c>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	4a58      	ldr	r2, [pc, #352]	; (8000cf8 <GPIO_Init+0x32c>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000b9c:	7c7a      	ldrb	r2, [r7, #17]
 8000b9e:	7cbb      	ldrb	r3, [r7, #18]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	fa02 f103 	lsl.w	r1, r2, r3
 8000ba6:	4a55      	ldr	r2, [pc, #340]	; (8000cfc <GPIO_Init+0x330>)
 8000ba8:	7cfb      	ldrb	r3, [r7, #19]
 8000baa:	3302      	adds	r3, #2
 8000bac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000bb0:	4b53      	ldr	r3, [pc, #332]	; (8000d00 <GPIO_Init+0x334>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7912      	ldrb	r2, [r2, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	2201      	movs	r2, #1
 8000bbc:	408a      	lsls	r2, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4a4f      	ldr	r2, [pc, #316]	; (8000d00 <GPIO_Init+0x334>)
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	799b      	ldrb	r3, [r3, #6]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	791b      	ldrb	r3, [r3, #4]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2103      	movs	r1, #3
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6899      	ldr	r1, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	79db      	ldrb	r3, [r3, #7]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	791b      	ldrb	r3, [r3, #4]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2103      	movs	r1, #3
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	400a      	ands	r2, r1
 8000c34:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68d9      	ldr	r1, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7a1b      	ldrb	r3, [r3, #8]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2301      	movs	r3, #1
 8000c64:	408b      	lsls	r3, r1
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4619      	mov	r1, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	400a      	ands	r2, r1
 8000c70:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6859      	ldr	r1, [r3, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	795b      	ldrb	r3, [r3, #5]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d131      	bne.n	8000cee <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	7c3a      	ldrb	r2, [r7, #16]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7c3a      	ldrb	r2, [r7, #16]
 8000cbc:	4001      	ands	r1, r0
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	7c3a      	ldrb	r2, [r7, #16]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a5b      	ldrb	r3, [r3, #9]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	7c3a      	ldrb	r2, [r7, #16]
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	3208      	adds	r2, #8
 8000cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40013800 	.word	0x40013800
 8000d00:	40013c00 	.word	0x40013c00

08000d04 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]

   return value;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000d66:	78fa      	ldrb	r2, [r7, #3]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	611a      	str	r2, [r3, #16]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	611a      	str	r2, [r3, #16]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	// uint32_t dummyRead = pI2Cx->SR1;
	// dummyRead = pI2Cx->SR2;
	// (void)dummyRead;
	uint32_t dummyRead;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d01f      	beq.n	8000df6 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7f1b      	ldrb	r3, [r3, #28]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d112      	bne.n	8000de4 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d11f      	bne.n	8000e06 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fa31 	bl	8001234 <I2C_ManageAcking>

				//clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	60fb      	str	r3, [r7, #12]
		//clear ADDR flag
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
}
 8000de2:	e010      	b.n	8000e06 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	60fb      	str	r3, [r7, #12]
}
 8000df4:	e007      	b.n	8000e06 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	60fb      	str	r3, [r7, #12]
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <RCC_GetPCLK1Value+0x9c>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000e50:	7a7b      	ldrb	r3, [r7, #9]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;	
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <RCC_GetPCLK1Value+0xa0>)
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e00b      	b.n	8000e74 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000e5c:	7a7b      	ldrb	r3, [r7, #9]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;	
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <RCC_GetPCLK1Value+0xa4>)
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e005      	b.n	8000e74 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 8000e68:	7a7b      	ldrb	r3, [r7, #9]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d102      	bne.n	8000e74 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();	
 8000e6e:	f7ff ffdd 	bl	8000e2c <RCC_GetPLLOutputClock>
 8000e72:	60f8      	str	r0, [r7, #12]
	}

	//for ahb

	temp = ((RCC->CFGR >> 4) & 0xF);
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <RCC_GetPCLK1Value+0x9c>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000e82:	7a3b      	ldrb	r3, [r7, #8]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d802      	bhi.n	8000e8e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	72fb      	strb	r3, [r7, #11]
 8000e8c:	e005      	b.n	8000e9a <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];	
 8000e8e:	7a3b      	ldrb	r3, [r7, #8]
 8000e90:	3b08      	subs	r3, #8
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <RCC_GetPCLK1Value+0xa8>)
 8000e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e98:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1

	temp = ((RCC->CFGR >> 10) & 0x7);
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <RCC_GetPCLK1Value+0x9c>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	0a9b      	lsrs	r3, r3, #10
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000ea8:	7a3b      	ldrb	r3, [r7, #8]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d802      	bhi.n	8000eb4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	72bb      	strb	r3, [r7, #10]
 8000eb2:	e004      	b.n	8000ebe <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];	
 8000eb4:	7a3b      	ldrb	r3, [r7, #8]
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <RCC_GetPCLK1Value+0xac>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahbp) / apb1p;
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ec6:	7abb      	ldrb	r3, [r7, #10]
 8000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ecc:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	00f42400 	.word	0x00f42400
 8000ee0:	007a1200 	.word	0x007a1200
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	20000020 	.word	0x20000020

08000eec <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d112      	bne.n	8000f24 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	{
		pI2Cx->CR2 |=  (1 << I2C_CR2_ITBUFEN);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |=  (1 << I2C_CR2_ITEVTEN);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |=  (1 << I2C_CR2_ITERREN);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITERREN);

	}

}
 8000f22:	e011      	b.n	8000f48 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITBUFEN);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITEVTEN);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITERREN);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	605a      	str	r2, [r3, #4]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d106      	bne.n	8000f72 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |=  (1 << I2C_CR1_PE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
	}
}
 8000f70:	e005      	b.n	8000f7e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 0201 	bic.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]


	//enable clock for i2c peripheral

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f966 	bl	800126c <I2C_PeriClockControl>
	
	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7a5b      	ldrb	r3, [r3, #9]
 8000fa4:	029b      	lsls	r3, r3, #10
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000fba:	f7ff ff3f 	bl	8000e3c <RCC_GetPCLK1Value>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <I2C_Init+0x148>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0c9b      	lsrs	r3, r3, #18
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg & (0X3F);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fd8:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7a1b      	ldrb	r3, [r3, #8]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	609a      	str	r2, [r3, #8]

	//CCR calculation clock control register
	uint16_t ccr_value = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <I2C_Init+0x14c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d80f      	bhi.n	800102e <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800100e:	f7ff ff15 	bl	8000e3c <RCC_GetPCLK1Value>
 8001012:	4602      	mov	r2, r0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001020:	897b      	ldrh	r3, [r7, #10]
 8001022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e027      	b.n	800107e <I2C_Init+0xf6>
	}
	else
	{
		//mode is fast mode
		tempreg |= (1<<15);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001034:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	895b      	ldrh	r3, [r3, #10]
 800103a:	039b      	lsls	r3, r3, #14
 800103c:	461a      	mov	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	895b      	ldrh	r3, [r3, #10]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10b      	bne.n	8001064 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800104c:	f7ff fef6 	bl	8000e3c <RCC_GetPCLK1Value>
 8001050:	4601      	mov	r1, r0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001060:	817b      	strh	r3, [r7, #10]
 8001062:	e00c      	b.n	800107e <I2C_Init+0xf6>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001064:	f7ff feea 	bl	8000e3c <RCC_GetPCLK1Value>
 8001068:	4601      	mov	r1, r0
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009a      	lsls	r2, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	fbb1 f3f3 	udiv	r3, r1, r3
 800107c:	817b      	strh	r3, [r7, #10]
		}
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	61da      	str	r2, [r3, #28]

	//TRISE configuration Fpclk1 * Trise(max) + 1
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <I2C_Init+0x14c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d809      	bhi.n	80010a4 <I2C_Init+0x11c>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1;
 8001090:	f7ff fed4 	bl	8000e3c <RCC_GetPCLK1Value>
 8001094:	4603      	mov	r3, r0
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <I2C_Init+0x148>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e00c      	b.n	80010be <I2C_Init+0x136>
	}
	else
	{
		//mode is fast mode
		tempreg = (RCC_GetPCLK1Value() * 300/1000000U) + 1;
 80010a4:	f7ff feca 	bl	8000e3c <RCC_GetPCLK1Value>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <I2C_Init+0x148>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	0c9b      	lsrs	r3, r3, #18
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = tempreg;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	621a      	str	r2, [r3, #32]
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	431bde83 	.word	0x431bde83
 80010d4:	000186a0 	.word	0x000186a0

080010d8 <I2C_MasterSendDataIT>:
 * @Note              -  Complete the below code . Also include the function prototype in header file

 */
//just trigger the start condition
uint8_t  I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	7f1b      	ldrb	r3, [r3, #28]
 80010ea:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d034      	beq.n	800115c <I2C_MasterSendDataIT+0x84>
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d031      	beq.n	800115c <I2C_MasterSendDataIT+0x84>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2202      	movs	r2, #2
 8001108:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	78fa      	ldrb	r2, [r7, #3]
 800110e:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fe05 	bl	8000d2e <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001132:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001142:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001152:	605a      	str	r2, [r3, #4]


		I2C_SlaveEnableDisableCallbackEvents(I2C2, ENABLE);
 8001154:	2101      	movs	r1, #1
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <I2C_MasterSendDataIT+0x90>)
 8001158:	f7ff fec8 	bl	8000eec <I2C_SlaveEnableDisableCallbackEvents>
	}

	return busystate;
 800115c:	7dfb      	ldrb	r3, [r7, #23]

}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005800 	.word	0x40005800

0800116c <I2C_MasterReceiveDataIT>:
 *
 * @Note              - Complete the below code . Also include the fn prototype in header file

 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	460b      	mov	r3, r1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4613      	mov	r3, r2
 8001180:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CHandle->TxRxState;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	7f1b      	ldrb	r3, [r3, #28]
 8001186:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d033      	beq.n	80011f6 <I2C_MasterReceiveDataIT+0x8a>
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d030      	beq.n	80011f6 <I2C_MasterReceiveDataIT+0x8a>
	{
		// printf("mit\n");
		pI2CHandle->pRxBuffer = pRxBuffer;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception 
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	79ba      	ldrb	r2, [r7, #6]
 80011b0:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fdb4 	bl	8000d2e <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011d4:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e4:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f4:	605a      	str	r2, [r3, #4]
		
	}

	return busystate;
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <I2C_SlaveSendData>:


void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = data;
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d106      	bne.n	8001254 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 8001252:	e005      	b.n	8001260 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
	...

0800126c <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d120      	bne.n	80012c0 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a22      	ldr	r2, [pc, #136]	; (800130c <I2C_PeriClockControl+0xa0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d106      	bne.n	8001294 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <I2C_PeriClockControl+0xa4>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a21      	ldr	r2, [pc, #132]	; (8001310 <I2C_PeriClockControl+0xa4>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8001292:	e035      	b.n	8001300 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <I2C_PeriClockControl+0xa8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d106      	bne.n	80012aa <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <I2C_PeriClockControl+0xa4>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012a8:	e02a      	b.n	8001300 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <I2C_PeriClockControl+0xac>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d126      	bne.n	8001300 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012be:	e01f      	b.n	8001300 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <I2C_PeriClockControl+0xa0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d106      	bne.n	80012d6 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a10      	ldr	r2, [pc, #64]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012d4:	e014      	b.n	8001300 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <I2C_PeriClockControl+0xa8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d106      	bne.n	80012ec <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012ea:	e009      	b.n	8001300 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <I2C_PeriClockControl+0xac>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d105      	bne.n	8001300 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <I2C_PeriClockControl+0xa4>)
 80012fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40005800 	.word	0x40005800
 8001318:	40005c00 	.word	0x40005c00

0800131c <I2C_IRQInterruptConfig>:


void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d133      	bne.n	800139a <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	d80a      	bhi.n	800134e <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <I2C_IRQInterruptConfig+0xf0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4611      	mov	r1, r2
 8001346:	4a31      	ldr	r2, [pc, #196]	; (800140c <I2C_IRQInterruptConfig+0xf0>)
 8001348:	430b      	orrs	r3, r1
 800134a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 800134c:	e059      	b.n	8001402 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b1f      	cmp	r3, #31
 8001352:	d90f      	bls.n	8001374 <I2C_IRQInterruptConfig+0x58>
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b3f      	cmp	r3, #63	; 0x3f
 8001358:	d80c      	bhi.n	8001374 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <I2C_IRQInterruptConfig+0xf4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	f002 021f 	and.w	r2, r2, #31
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	4611      	mov	r1, r2
 800136c:	4a28      	ldr	r2, [pc, #160]	; (8001410 <I2C_IRQInterruptConfig+0xf4>)
 800136e:	430b      	orrs	r3, r1
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e046      	b.n	8001402 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b3f      	cmp	r3, #63	; 0x3f
 8001378:	d943      	bls.n	8001402 <I2C_IRQInterruptConfig+0xe6>
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b5f      	cmp	r3, #95	; 0x5f
 800137e:	d840      	bhi.n	8001402 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <I2C_IRQInterruptConfig+0xf8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4611      	mov	r1, r2
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <I2C_IRQInterruptConfig+0xf8>)
 8001394:	430b      	orrs	r3, r1
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	e033      	b.n	8001402 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b1f      	cmp	r3, #31
 800139e:	d80a      	bhi.n	80013b6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <I2C_IRQInterruptConfig+0xfc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	4611      	mov	r1, r2
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <I2C_IRQInterruptConfig+0xfc>)
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	e025      	b.n	8001402 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b1f      	cmp	r3, #31
 80013ba:	d90f      	bls.n	80013dc <I2C_IRQInterruptConfig+0xc0>
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b3f      	cmp	r3, #63	; 0x3f
 80013c0:	d80c      	bhi.n	80013dc <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <I2C_IRQInterruptConfig+0x100>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	f002 021f 	and.w	r2, r2, #31
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <I2C_IRQInterruptConfig+0x100>)
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e012      	b.n	8001402 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d90f      	bls.n	8001402 <I2C_IRQInterruptConfig+0xe6>
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b5f      	cmp	r3, #95	; 0x5f
 80013e6:	d80c      	bhi.n	8001402 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <I2C_IRQInterruptConfig+0x104>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <I2C_IRQInterruptConfig+0x104>)
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	e7ff      	b.n	8001402 <I2C_IRQInterruptConfig+0xe6>
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000e104 	.word	0xe000e104
 8001414:	e000e10c 	.word	0xe000e10c
 8001418:	e000e180 	.word	0xe000e180
 800141c:	e000e184 	.word	0xe000e184
 8001420:	e000e18c 	.word	0xe000e18c

08001424 <I2C_MasterHandleTXEInterrupt>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00f      	beq.n	8001454 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		// printf("txe\n");
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]
		// while(!I2C_GetFlagStatus(pI2CHandle2->pI2Cx, I2C_FLAG_RXNE)); //Wait till RXNE is set
		// int dummy_read = pI2CHandle2->pI2Cx->DR; //DR is read before next byte is received
		// (void)dummy_read; //avoid unused warning
	}

}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	// printf("rxne it\n");
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10b      	bne.n	8001486 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d91a      	bls.n	80014c4 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d105      	bne.n	80014a2 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fec9 	bl	8001234 <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d110      	bne.n	80014ee <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d104      	bne.n	80014e0 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc97 	bl	8000e0e <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f8e4 	bl	80016ae <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff f839 	bl	8000560 <I2C_ApplicationEventCallback>
	}
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <I2C_EV_IRQHandling>:


void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	//Interrupt handling for master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001508:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	613b      	str	r3, [r7, #16]
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60fb      	str	r3, [r7, #12]

	//1. Handle for interrupt generated by SB event
	// Note: SB flag is only applicable in master mode
	if(temp1 && temp3)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01b      	beq.n	8001560 <I2C_EV_IRQHandling+0x6a>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d018      	beq.n	8001560 <I2C_EV_IRQHandling+0x6a>
		// printf("sb\n");
		//SB flag is set
		//the interrupt is generated because of SB event
		//the block will not executed in slave mode because for slave SB is always zero
		//in this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7f1b      	ldrb	r3, [r3, #28]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d108      	bne.n	8001548 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7f5b      	ldrb	r3, [r3, #29]
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff fc03 	bl	8000d4c <I2C_ExecuteAddressPhaseWrite>
 8001546:	e00b      	b.n	8001560 <I2C_EV_IRQHandling+0x6a>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7f1b      	ldrb	r3, [r3, #28]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7f5b      	ldrb	r3, [r3, #29]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7ff fc0b 	bl	8000d76 <I2C_ExecuteAddressPhaseRead>


	//2. handle for interrupt generated by ADDR event
	//Note: when master mode: address is sent
	//Note: when slave mode: address matched with own address
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <I2C_EV_IRQHandling+0x88>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <I2C_EV_IRQHandling+0x88>
	{
		// printf("addr\n");
		//ADDR flag is set
		//the interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fc11 	bl	8000da0 <I2C_ClearADDRFlag>
	}


	//3. handle for interrupt generated by BTF(Byte Transfer Finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <I2C_EV_IRQHandling+0xd2>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d018      	beq.n	80015c8 <I2C_EV_IRQHandling+0xd2>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7f1b      	ldrb	r3, [r3, #28]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d114      	bne.n	80015c8 <I2C_EV_IRQHandling+0xd2>
		{
			//BTF, TXE = 1
			if(pI2CHandle->TxLen == 0)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d110      	bne.n	80015c8 <I2C_EV_IRQHandling+0xd2>
			{
				//1. generate STOP condition
				if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d104      	bne.n	80015ba <I2C_EV_IRQHandling+0xc4>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fc2a 	bl	8000e0e <I2C_GenerateStopCondition>

				//2. reset all the	member elements of the handle structure
				I2C_CloseSendData(pI2CHandle);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8a1 	bl	8001702 <I2C_CloseSendData>

				//3. notify the application about transmission complete	
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);			
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7fe ffcc 	bl	8000560 <I2C_ApplicationEventCallback>


	//4. Handle for  interrupt generated by STOPF event
	// Note: Stop detection flag(STOPF) is applicable only slave mode. For master this flag will never be set
	// The below code block will not executed by the master since STOPF will not set in master mode
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00c      	beq.n	80015f4 <I2C_EV_IRQHandling+0xfe>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <I2C_EV_IRQHandling+0xfe>
	{
		//STOP flag is set
		//Clear the STOPF (i.e. 1)read SR1 2) Write to CR1)

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	601a      	str	r2, [r3, #0]

		//notify the application about transmission complete	
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);	
 80015ec:	2102      	movs	r1, #2
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe ffb6 	bl	8000560 <I2C_ApplicationEventCallback>
	}


	//Handle for interrupt generated by TXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01f      	beq.n	8001646 <I2C_EV_IRQHandling+0x150>
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <I2C_EV_IRQHandling+0x150>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <I2C_EV_IRQHandling+0x150>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <I2C_EV_IRQHandling+0x13a>
		{
			//TXE flag is set
			//we have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7f1b      	ldrb	r3, [r3, #28]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d10e      	bne.n	8001646 <I2C_EV_IRQHandling+0x150>
			{
				// printf("m t\n");
				//BTF, TXE = 1
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fefb 	bl	8001424 <I2C_MasterHandleTXEInterrupt>
 800162e:	e00a      	b.n	8001646 <I2C_EV_IRQHandling+0x150>
		else
		{
			//slave
			// printf("slave\n");
			//make sure that slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_TRA))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <I2C_EV_IRQHandling+0x150>
			{
				// printf("s t\n");
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 800163e:	2108      	movs	r1, #8
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe ff8d 	bl	8000560 <I2C_ApplicationEventCallback>
	}



	//Handle for interrupt generated by RXNE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001650:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d019      	beq.n	800168c <I2C_EV_IRQHandling+0x196>
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <I2C_EV_IRQHandling+0x196>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <I2C_EV_IRQHandling+0x196>
	{
		//RXNE flag is set
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <I2C_EV_IRQHandling+0x18c>
		{
			// printf("rxne %x\n",pI2CHandle->I2C_Config.I2C_DeviceAddress);
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7f1b      	ldrb	r3, [r3, #28]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d114      	bne.n	80016a4 <I2C_EV_IRQHandling+0x1ae>
			{
				// printf("m r\n");
				//we have to do the data reception
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);			
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff feef 	bl	800145e <I2C_MasterHandleRXNEInterrupt>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001680:	e010      	b.n	80016a4 <I2C_EV_IRQHandling+0x1ae>
			}
		}
		else
		{
			// printf("s r\n");
			I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8001682:	2101      	movs	r1, #1
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7fe ff6b 	bl	8000560 <I2C_ApplicationEventCallback>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800168a:	e00b      	b.n	80016a4 <I2C_EV_IRQHandling+0x1ae>
	}
	else
	{
		//slave
		//make sure that slave is really in transmitter mode
		if((pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_TRA)) == 0)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <I2C_EV_IRQHandling+0x1b0>
		{
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 800169a:	2109      	movs	r1, #9
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7fe ff5f 	bl	8000560 <I2C_ApplicationEventCallback>

		}
	}

}
 80016a2:	e000      	b.n	80016a6 <I2C_EV_IRQHandling+0x1b0>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80016a4:	bf00      	nop
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016c4:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d4:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
	{
	}
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fd9d 	bl	8001234 <I2C_ManageAcking>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <I2C_CloseSendData>:
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001718:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001728:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <I2C_ER_IRQHandling>:


void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/ 
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00e      	beq.n	800178a <I2C_ER_IRQHandling+0x44>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error
		
		//Implement the code to clear the buss error flag 
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001780:	615a      	str	r2, [r3, #20]
		
		//Implement the code to notify the application about the error 
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8001782:	2103      	movs	r1, #3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7fe feeb 	bl	8000560 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/ 
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001794:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <I2C_ER_IRQHandling+0x74>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error
		
		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017b0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle,I2C_SR1_ARLO);
 80017b2:	2109      	movs	r1, #9
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7fe fed3 	bl	8000560 <I2C_ApplicationEventCallback>
	   
	}

/***********************Check for ACK failure  error************************************/ 

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00e      	beq.n	80017ea <I2C_ER_IRQHandling+0xa4>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error
		
	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle,I2C_SR1_AF);
 80017e2:	210a      	movs	r1, #10
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe febb 	bl	8000560 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00e      	beq.n	800181a <I2C_ER_IRQHandling+0xd4>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun
		
	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001810:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_OVR);
 8001812:	210b      	movs	r1, #11
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe fea3 	bl	8000560 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001824:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00e      	beq.n	800184a <I2C_ER_IRQHandling+0x104>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error
		
	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001840:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_TIMEOUT);
 8001842:	210e      	movs	r1, #14
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7fe fe8b 	bl	8000560 <I2C_ApplicationEventCallback>
	}

}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <__errno>:
 8001854:	4b01      	ldr	r3, [pc, #4]	; (800185c <__errno+0x8>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000024 	.word	0x20000024

08001860 <__libc_init_array>:
 8001860:	b570      	push	{r4, r5, r6, lr}
 8001862:	4d0d      	ldr	r5, [pc, #52]	; (8001898 <__libc_init_array+0x38>)
 8001864:	4c0d      	ldr	r4, [pc, #52]	; (800189c <__libc_init_array+0x3c>)
 8001866:	1b64      	subs	r4, r4, r5
 8001868:	10a4      	asrs	r4, r4, #2
 800186a:	2600      	movs	r6, #0
 800186c:	42a6      	cmp	r6, r4
 800186e:	d109      	bne.n	8001884 <__libc_init_array+0x24>
 8001870:	4d0b      	ldr	r5, [pc, #44]	; (80018a0 <__libc_init_array+0x40>)
 8001872:	4c0c      	ldr	r4, [pc, #48]	; (80018a4 <__libc_init_array+0x44>)
 8001874:	f001 f81c 	bl	80028b0 <_init>
 8001878:	1b64      	subs	r4, r4, r5
 800187a:	10a4      	asrs	r4, r4, #2
 800187c:	2600      	movs	r6, #0
 800187e:	42a6      	cmp	r6, r4
 8001880:	d105      	bne.n	800188e <__libc_init_array+0x2e>
 8001882:	bd70      	pop	{r4, r5, r6, pc}
 8001884:	f855 3b04 	ldr.w	r3, [r5], #4
 8001888:	4798      	blx	r3
 800188a:	3601      	adds	r6, #1
 800188c:	e7ee      	b.n	800186c <__libc_init_array+0xc>
 800188e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001892:	4798      	blx	r3
 8001894:	3601      	adds	r6, #1
 8001896:	e7f2      	b.n	800187e <__libc_init_array+0x1e>
 8001898:	08002980 	.word	0x08002980
 800189c:	08002980 	.word	0x08002980
 80018a0:	08002980 	.word	0x08002980
 80018a4:	08002984 	.word	0x08002984

080018a8 <memset>:
 80018a8:	4402      	add	r2, r0
 80018aa:	4603      	mov	r3, r0
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d100      	bne.n	80018b2 <memset+0xa>
 80018b0:	4770      	bx	lr
 80018b2:	f803 1b01 	strb.w	r1, [r3], #1
 80018b6:	e7f9      	b.n	80018ac <memset+0x4>

080018b8 <iprintf>:
 80018b8:	b40f      	push	{r0, r1, r2, r3}
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <iprintf+0x2c>)
 80018bc:	b513      	push	{r0, r1, r4, lr}
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	b124      	cbz	r4, 80018cc <iprintf+0x14>
 80018c2:	69a3      	ldr	r3, [r4, #24]
 80018c4:	b913      	cbnz	r3, 80018cc <iprintf+0x14>
 80018c6:	4620      	mov	r0, r4
 80018c8:	f000 fa5a 	bl	8001d80 <__sinit>
 80018cc:	ab05      	add	r3, sp, #20
 80018ce:	9a04      	ldr	r2, [sp, #16]
 80018d0:	68a1      	ldr	r1, [r4, #8]
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	4620      	mov	r0, r4
 80018d6:	f000 fc5f 	bl	8002198 <_vfiprintf_r>
 80018da:	b002      	add	sp, #8
 80018dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018e0:	b004      	add	sp, #16
 80018e2:	4770      	bx	lr
 80018e4:	20000024 	.word	0x20000024

080018e8 <_puts_r>:
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	460e      	mov	r6, r1
 80018ec:	4605      	mov	r5, r0
 80018ee:	b118      	cbz	r0, 80018f8 <_puts_r+0x10>
 80018f0:	6983      	ldr	r3, [r0, #24]
 80018f2:	b90b      	cbnz	r3, 80018f8 <_puts_r+0x10>
 80018f4:	f000 fa44 	bl	8001d80 <__sinit>
 80018f8:	69ab      	ldr	r3, [r5, #24]
 80018fa:	68ac      	ldr	r4, [r5, #8]
 80018fc:	b913      	cbnz	r3, 8001904 <_puts_r+0x1c>
 80018fe:	4628      	mov	r0, r5
 8001900:	f000 fa3e 	bl	8001d80 <__sinit>
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <_puts_r+0xd0>)
 8001906:	429c      	cmp	r4, r3
 8001908:	d120      	bne.n	800194c <_puts_r+0x64>
 800190a:	686c      	ldr	r4, [r5, #4]
 800190c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800190e:	07db      	lsls	r3, r3, #31
 8001910:	d405      	bmi.n	800191e <_puts_r+0x36>
 8001912:	89a3      	ldrh	r3, [r4, #12]
 8001914:	0598      	lsls	r0, r3, #22
 8001916:	d402      	bmi.n	800191e <_puts_r+0x36>
 8001918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800191a:	f000 facf 	bl	8001ebc <__retarget_lock_acquire_recursive>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	0719      	lsls	r1, r3, #28
 8001922:	d51d      	bpl.n	8001960 <_puts_r+0x78>
 8001924:	6923      	ldr	r3, [r4, #16]
 8001926:	b1db      	cbz	r3, 8001960 <_puts_r+0x78>
 8001928:	3e01      	subs	r6, #1
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001930:	3b01      	subs	r3, #1
 8001932:	60a3      	str	r3, [r4, #8]
 8001934:	bb39      	cbnz	r1, 8001986 <_puts_r+0x9e>
 8001936:	2b00      	cmp	r3, #0
 8001938:	da38      	bge.n	80019ac <_puts_r+0xc4>
 800193a:	4622      	mov	r2, r4
 800193c:	210a      	movs	r1, #10
 800193e:	4628      	mov	r0, r5
 8001940:	f000 f848 	bl	80019d4 <__swbuf_r>
 8001944:	3001      	adds	r0, #1
 8001946:	d011      	beq.n	800196c <_puts_r+0x84>
 8001948:	250a      	movs	r5, #10
 800194a:	e011      	b.n	8001970 <_puts_r+0x88>
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <_puts_r+0xd4>)
 800194e:	429c      	cmp	r4, r3
 8001950:	d101      	bne.n	8001956 <_puts_r+0x6e>
 8001952:	68ac      	ldr	r4, [r5, #8]
 8001954:	e7da      	b.n	800190c <_puts_r+0x24>
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <_puts_r+0xd8>)
 8001958:	429c      	cmp	r4, r3
 800195a:	bf08      	it	eq
 800195c:	68ec      	ldreq	r4, [r5, #12]
 800195e:	e7d5      	b.n	800190c <_puts_r+0x24>
 8001960:	4621      	mov	r1, r4
 8001962:	4628      	mov	r0, r5
 8001964:	f000 f888 	bl	8001a78 <__swsetup_r>
 8001968:	2800      	cmp	r0, #0
 800196a:	d0dd      	beq.n	8001928 <_puts_r+0x40>
 800196c:	f04f 35ff 	mov.w	r5, #4294967295
 8001970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001972:	07da      	lsls	r2, r3, #31
 8001974:	d405      	bmi.n	8001982 <_puts_r+0x9a>
 8001976:	89a3      	ldrh	r3, [r4, #12]
 8001978:	059b      	lsls	r3, r3, #22
 800197a:	d402      	bmi.n	8001982 <_puts_r+0x9a>
 800197c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800197e:	f000 fa9e 	bl	8001ebe <__retarget_lock_release_recursive>
 8001982:	4628      	mov	r0, r5
 8001984:	bd70      	pop	{r4, r5, r6, pc}
 8001986:	2b00      	cmp	r3, #0
 8001988:	da04      	bge.n	8001994 <_puts_r+0xac>
 800198a:	69a2      	ldr	r2, [r4, #24]
 800198c:	429a      	cmp	r2, r3
 800198e:	dc06      	bgt.n	800199e <_puts_r+0xb6>
 8001990:	290a      	cmp	r1, #10
 8001992:	d004      	beq.n	800199e <_puts_r+0xb6>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	6022      	str	r2, [r4, #0]
 800199a:	7019      	strb	r1, [r3, #0]
 800199c:	e7c5      	b.n	800192a <_puts_r+0x42>
 800199e:	4622      	mov	r2, r4
 80019a0:	4628      	mov	r0, r5
 80019a2:	f000 f817 	bl	80019d4 <__swbuf_r>
 80019a6:	3001      	adds	r0, #1
 80019a8:	d1bf      	bne.n	800192a <_puts_r+0x42>
 80019aa:	e7df      	b.n	800196c <_puts_r+0x84>
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	250a      	movs	r5, #10
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	6022      	str	r2, [r4, #0]
 80019b4:	701d      	strb	r5, [r3, #0]
 80019b6:	e7db      	b.n	8001970 <_puts_r+0x88>
 80019b8:	0800290c 	.word	0x0800290c
 80019bc:	0800292c 	.word	0x0800292c
 80019c0:	080028ec 	.word	0x080028ec

080019c4 <puts>:
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <puts+0xc>)
 80019c6:	4601      	mov	r1, r0
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	f7ff bf8d 	b.w	80018e8 <_puts_r>
 80019ce:	bf00      	nop
 80019d0:	20000024 	.word	0x20000024

080019d4 <__swbuf_r>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	460e      	mov	r6, r1
 80019d8:	4614      	mov	r4, r2
 80019da:	4605      	mov	r5, r0
 80019dc:	b118      	cbz	r0, 80019e6 <__swbuf_r+0x12>
 80019de:	6983      	ldr	r3, [r0, #24]
 80019e0:	b90b      	cbnz	r3, 80019e6 <__swbuf_r+0x12>
 80019e2:	f000 f9cd 	bl	8001d80 <__sinit>
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <__swbuf_r+0x98>)
 80019e8:	429c      	cmp	r4, r3
 80019ea:	d12b      	bne.n	8001a44 <__swbuf_r+0x70>
 80019ec:	686c      	ldr	r4, [r5, #4]
 80019ee:	69a3      	ldr	r3, [r4, #24]
 80019f0:	60a3      	str	r3, [r4, #8]
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	071a      	lsls	r2, r3, #28
 80019f6:	d52f      	bpl.n	8001a58 <__swbuf_r+0x84>
 80019f8:	6923      	ldr	r3, [r4, #16]
 80019fa:	b36b      	cbz	r3, 8001a58 <__swbuf_r+0x84>
 80019fc:	6923      	ldr	r3, [r4, #16]
 80019fe:	6820      	ldr	r0, [r4, #0]
 8001a00:	1ac0      	subs	r0, r0, r3
 8001a02:	6963      	ldr	r3, [r4, #20]
 8001a04:	b2f6      	uxtb	r6, r6
 8001a06:	4283      	cmp	r3, r0
 8001a08:	4637      	mov	r7, r6
 8001a0a:	dc04      	bgt.n	8001a16 <__swbuf_r+0x42>
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f000 f922 	bl	8001c58 <_fflush_r>
 8001a14:	bb30      	cbnz	r0, 8001a64 <__swbuf_r+0x90>
 8001a16:	68a3      	ldr	r3, [r4, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60a3      	str	r3, [r4, #8]
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	6022      	str	r2, [r4, #0]
 8001a22:	701e      	strb	r6, [r3, #0]
 8001a24:	6963      	ldr	r3, [r4, #20]
 8001a26:	3001      	adds	r0, #1
 8001a28:	4283      	cmp	r3, r0
 8001a2a:	d004      	beq.n	8001a36 <__swbuf_r+0x62>
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	07db      	lsls	r3, r3, #31
 8001a30:	d506      	bpl.n	8001a40 <__swbuf_r+0x6c>
 8001a32:	2e0a      	cmp	r6, #10
 8001a34:	d104      	bne.n	8001a40 <__swbuf_r+0x6c>
 8001a36:	4621      	mov	r1, r4
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f000 f90d 	bl	8001c58 <_fflush_r>
 8001a3e:	b988      	cbnz	r0, 8001a64 <__swbuf_r+0x90>
 8001a40:	4638      	mov	r0, r7
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <__swbuf_r+0x9c>)
 8001a46:	429c      	cmp	r4, r3
 8001a48:	d101      	bne.n	8001a4e <__swbuf_r+0x7a>
 8001a4a:	68ac      	ldr	r4, [r5, #8]
 8001a4c:	e7cf      	b.n	80019ee <__swbuf_r+0x1a>
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <__swbuf_r+0xa0>)
 8001a50:	429c      	cmp	r4, r3
 8001a52:	bf08      	it	eq
 8001a54:	68ec      	ldreq	r4, [r5, #12]
 8001a56:	e7ca      	b.n	80019ee <__swbuf_r+0x1a>
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 f80c 	bl	8001a78 <__swsetup_r>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d0cb      	beq.n	80019fc <__swbuf_r+0x28>
 8001a64:	f04f 37ff 	mov.w	r7, #4294967295
 8001a68:	e7ea      	b.n	8001a40 <__swbuf_r+0x6c>
 8001a6a:	bf00      	nop
 8001a6c:	0800290c 	.word	0x0800290c
 8001a70:	0800292c 	.word	0x0800292c
 8001a74:	080028ec 	.word	0x080028ec

08001a78 <__swsetup_r>:
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <__swsetup_r+0xcc>)
 8001a7a:	b570      	push	{r4, r5, r6, lr}
 8001a7c:	681d      	ldr	r5, [r3, #0]
 8001a7e:	4606      	mov	r6, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	b125      	cbz	r5, 8001a8e <__swsetup_r+0x16>
 8001a84:	69ab      	ldr	r3, [r5, #24]
 8001a86:	b913      	cbnz	r3, 8001a8e <__swsetup_r+0x16>
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f000 f979 	bl	8001d80 <__sinit>
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <__swsetup_r+0xd0>)
 8001a90:	429c      	cmp	r4, r3
 8001a92:	d10f      	bne.n	8001ab4 <__swsetup_r+0x3c>
 8001a94:	686c      	ldr	r4, [r5, #4]
 8001a96:	89a3      	ldrh	r3, [r4, #12]
 8001a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a9c:	0719      	lsls	r1, r3, #28
 8001a9e:	d42c      	bmi.n	8001afa <__swsetup_r+0x82>
 8001aa0:	06dd      	lsls	r5, r3, #27
 8001aa2:	d411      	bmi.n	8001ac8 <__swsetup_r+0x50>
 8001aa4:	2309      	movs	r3, #9
 8001aa6:	6033      	str	r3, [r6, #0]
 8001aa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001aac:	81a3      	strh	r3, [r4, #12]
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab2:	e03e      	b.n	8001b32 <__swsetup_r+0xba>
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <__swsetup_r+0xd4>)
 8001ab6:	429c      	cmp	r4, r3
 8001ab8:	d101      	bne.n	8001abe <__swsetup_r+0x46>
 8001aba:	68ac      	ldr	r4, [r5, #8]
 8001abc:	e7eb      	b.n	8001a96 <__swsetup_r+0x1e>
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <__swsetup_r+0xd8>)
 8001ac0:	429c      	cmp	r4, r3
 8001ac2:	bf08      	it	eq
 8001ac4:	68ec      	ldreq	r4, [r5, #12]
 8001ac6:	e7e6      	b.n	8001a96 <__swsetup_r+0x1e>
 8001ac8:	0758      	lsls	r0, r3, #29
 8001aca:	d512      	bpl.n	8001af2 <__swsetup_r+0x7a>
 8001acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ace:	b141      	cbz	r1, 8001ae2 <__swsetup_r+0x6a>
 8001ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ad4:	4299      	cmp	r1, r3
 8001ad6:	d002      	beq.n	8001ade <__swsetup_r+0x66>
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f000 fa57 	bl	8001f8c <_free_r>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ae8:	81a3      	strh	r3, [r4, #12]
 8001aea:	2300      	movs	r3, #0
 8001aec:	6063      	str	r3, [r4, #4]
 8001aee:	6923      	ldr	r3, [r4, #16]
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	81a3      	strh	r3, [r4, #12]
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	b94b      	cbnz	r3, 8001b12 <__swsetup_r+0x9a>
 8001afe:	89a3      	ldrh	r3, [r4, #12]
 8001b00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b08:	d003      	beq.n	8001b12 <__swsetup_r+0x9a>
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f000 f9fd 	bl	8001f0c <__smakebuf_r>
 8001b12:	89a0      	ldrh	r0, [r4, #12]
 8001b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b18:	f010 0301 	ands.w	r3, r0, #1
 8001b1c:	d00a      	beq.n	8001b34 <__swsetup_r+0xbc>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60a3      	str	r3, [r4, #8]
 8001b22:	6963      	ldr	r3, [r4, #20]
 8001b24:	425b      	negs	r3, r3
 8001b26:	61a3      	str	r3, [r4, #24]
 8001b28:	6923      	ldr	r3, [r4, #16]
 8001b2a:	b943      	cbnz	r3, 8001b3e <__swsetup_r+0xc6>
 8001b2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b30:	d1ba      	bne.n	8001aa8 <__swsetup_r+0x30>
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
 8001b34:	0781      	lsls	r1, r0, #30
 8001b36:	bf58      	it	pl
 8001b38:	6963      	ldrpl	r3, [r4, #20]
 8001b3a:	60a3      	str	r3, [r4, #8]
 8001b3c:	e7f4      	b.n	8001b28 <__swsetup_r+0xb0>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	e7f7      	b.n	8001b32 <__swsetup_r+0xba>
 8001b42:	bf00      	nop
 8001b44:	20000024 	.word	0x20000024
 8001b48:	0800290c 	.word	0x0800290c
 8001b4c:	0800292c 	.word	0x0800292c
 8001b50:	080028ec 	.word	0x080028ec

08001b54 <__sflush_r>:
 8001b54:	898a      	ldrh	r2, [r1, #12]
 8001b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b58:	4605      	mov	r5, r0
 8001b5a:	0710      	lsls	r0, r2, #28
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	d457      	bmi.n	8001c10 <__sflush_r+0xbc>
 8001b60:	684b      	ldr	r3, [r1, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	dc04      	bgt.n	8001b70 <__sflush_r+0x1c>
 8001b66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dc01      	bgt.n	8001b70 <__sflush_r+0x1c>
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b72:	2e00      	cmp	r6, #0
 8001b74:	d0fa      	beq.n	8001b6c <__sflush_r+0x18>
 8001b76:	2300      	movs	r3, #0
 8001b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b7c:	682f      	ldr	r7, [r5, #0]
 8001b7e:	602b      	str	r3, [r5, #0]
 8001b80:	d032      	beq.n	8001be8 <__sflush_r+0x94>
 8001b82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b84:	89a3      	ldrh	r3, [r4, #12]
 8001b86:	075a      	lsls	r2, r3, #29
 8001b88:	d505      	bpl.n	8001b96 <__sflush_r+0x42>
 8001b8a:	6863      	ldr	r3, [r4, #4]
 8001b8c:	1ac0      	subs	r0, r0, r3
 8001b8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b90:	b10b      	cbz	r3, 8001b96 <__sflush_r+0x42>
 8001b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b94:	1ac0      	subs	r0, r0, r3
 8001b96:	2300      	movs	r3, #0
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b9c:	6a21      	ldr	r1, [r4, #32]
 8001b9e:	4628      	mov	r0, r5
 8001ba0:	47b0      	blx	r6
 8001ba2:	1c43      	adds	r3, r0, #1
 8001ba4:	89a3      	ldrh	r3, [r4, #12]
 8001ba6:	d106      	bne.n	8001bb6 <__sflush_r+0x62>
 8001ba8:	6829      	ldr	r1, [r5, #0]
 8001baa:	291d      	cmp	r1, #29
 8001bac:	d82c      	bhi.n	8001c08 <__sflush_r+0xb4>
 8001bae:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <__sflush_r+0x100>)
 8001bb0:	40ca      	lsrs	r2, r1
 8001bb2:	07d6      	lsls	r6, r2, #31
 8001bb4:	d528      	bpl.n	8001c08 <__sflush_r+0xb4>
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	6062      	str	r2, [r4, #4]
 8001bba:	04d9      	lsls	r1, r3, #19
 8001bbc:	6922      	ldr	r2, [r4, #16]
 8001bbe:	6022      	str	r2, [r4, #0]
 8001bc0:	d504      	bpl.n	8001bcc <__sflush_r+0x78>
 8001bc2:	1c42      	adds	r2, r0, #1
 8001bc4:	d101      	bne.n	8001bca <__sflush_r+0x76>
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	b903      	cbnz	r3, 8001bcc <__sflush_r+0x78>
 8001bca:	6560      	str	r0, [r4, #84]	; 0x54
 8001bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bce:	602f      	str	r7, [r5, #0]
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	d0cb      	beq.n	8001b6c <__sflush_r+0x18>
 8001bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bd8:	4299      	cmp	r1, r3
 8001bda:	d002      	beq.n	8001be2 <__sflush_r+0x8e>
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f000 f9d5 	bl	8001f8c <_free_r>
 8001be2:	2000      	movs	r0, #0
 8001be4:	6360      	str	r0, [r4, #52]	; 0x34
 8001be6:	e7c2      	b.n	8001b6e <__sflush_r+0x1a>
 8001be8:	6a21      	ldr	r1, [r4, #32]
 8001bea:	2301      	movs	r3, #1
 8001bec:	4628      	mov	r0, r5
 8001bee:	47b0      	blx	r6
 8001bf0:	1c41      	adds	r1, r0, #1
 8001bf2:	d1c7      	bne.n	8001b84 <__sflush_r+0x30>
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0c4      	beq.n	8001b84 <__sflush_r+0x30>
 8001bfa:	2b1d      	cmp	r3, #29
 8001bfc:	d001      	beq.n	8001c02 <__sflush_r+0xae>
 8001bfe:	2b16      	cmp	r3, #22
 8001c00:	d101      	bne.n	8001c06 <__sflush_r+0xb2>
 8001c02:	602f      	str	r7, [r5, #0]
 8001c04:	e7b2      	b.n	8001b6c <__sflush_r+0x18>
 8001c06:	89a3      	ldrh	r3, [r4, #12]
 8001c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0c:	81a3      	strh	r3, [r4, #12]
 8001c0e:	e7ae      	b.n	8001b6e <__sflush_r+0x1a>
 8001c10:	690f      	ldr	r7, [r1, #16]
 8001c12:	2f00      	cmp	r7, #0
 8001c14:	d0aa      	beq.n	8001b6c <__sflush_r+0x18>
 8001c16:	0793      	lsls	r3, r2, #30
 8001c18:	680e      	ldr	r6, [r1, #0]
 8001c1a:	bf08      	it	eq
 8001c1c:	694b      	ldreq	r3, [r1, #20]
 8001c1e:	600f      	str	r7, [r1, #0]
 8001c20:	bf18      	it	ne
 8001c22:	2300      	movne	r3, #0
 8001c24:	1bf6      	subs	r6, r6, r7
 8001c26:	608b      	str	r3, [r1, #8]
 8001c28:	2e00      	cmp	r6, #0
 8001c2a:	dd9f      	ble.n	8001b6c <__sflush_r+0x18>
 8001c2c:	6a21      	ldr	r1, [r4, #32]
 8001c2e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001c32:	4633      	mov	r3, r6
 8001c34:	463a      	mov	r2, r7
 8001c36:	4628      	mov	r0, r5
 8001c38:	47e0      	blx	ip
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	dc06      	bgt.n	8001c4c <__sflush_r+0xf8>
 8001c3e:	89a3      	ldrh	r3, [r4, #12]
 8001c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c44:	81a3      	strh	r3, [r4, #12]
 8001c46:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4a:	e790      	b.n	8001b6e <__sflush_r+0x1a>
 8001c4c:	4407      	add	r7, r0
 8001c4e:	1a36      	subs	r6, r6, r0
 8001c50:	e7ea      	b.n	8001c28 <__sflush_r+0xd4>
 8001c52:	bf00      	nop
 8001c54:	20400001 	.word	0x20400001

08001c58 <_fflush_r>:
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	690b      	ldr	r3, [r1, #16]
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	b913      	cbnz	r3, 8001c68 <_fflush_r+0x10>
 8001c62:	2500      	movs	r5, #0
 8001c64:	4628      	mov	r0, r5
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
 8001c68:	b118      	cbz	r0, 8001c72 <_fflush_r+0x1a>
 8001c6a:	6983      	ldr	r3, [r0, #24]
 8001c6c:	b90b      	cbnz	r3, 8001c72 <_fflush_r+0x1a>
 8001c6e:	f000 f887 	bl	8001d80 <__sinit>
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <_fflush_r+0x6c>)
 8001c74:	429c      	cmp	r4, r3
 8001c76:	d11b      	bne.n	8001cb0 <_fflush_r+0x58>
 8001c78:	686c      	ldr	r4, [r5, #4]
 8001c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ef      	beq.n	8001c62 <_fflush_r+0xa>
 8001c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001c84:	07d0      	lsls	r0, r2, #31
 8001c86:	d404      	bmi.n	8001c92 <_fflush_r+0x3a>
 8001c88:	0599      	lsls	r1, r3, #22
 8001c8a:	d402      	bmi.n	8001c92 <_fflush_r+0x3a>
 8001c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c8e:	f000 f915 	bl	8001ebc <__retarget_lock_acquire_recursive>
 8001c92:	4628      	mov	r0, r5
 8001c94:	4621      	mov	r1, r4
 8001c96:	f7ff ff5d 	bl	8001b54 <__sflush_r>
 8001c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c9c:	07da      	lsls	r2, r3, #31
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	d4e0      	bmi.n	8001c64 <_fflush_r+0xc>
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	059b      	lsls	r3, r3, #22
 8001ca6:	d4dd      	bmi.n	8001c64 <_fflush_r+0xc>
 8001ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001caa:	f000 f908 	bl	8001ebe <__retarget_lock_release_recursive>
 8001cae:	e7d9      	b.n	8001c64 <_fflush_r+0xc>
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <_fflush_r+0x70>)
 8001cb2:	429c      	cmp	r4, r3
 8001cb4:	d101      	bne.n	8001cba <_fflush_r+0x62>
 8001cb6:	68ac      	ldr	r4, [r5, #8]
 8001cb8:	e7df      	b.n	8001c7a <_fflush_r+0x22>
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <_fflush_r+0x74>)
 8001cbc:	429c      	cmp	r4, r3
 8001cbe:	bf08      	it	eq
 8001cc0:	68ec      	ldreq	r4, [r5, #12]
 8001cc2:	e7da      	b.n	8001c7a <_fflush_r+0x22>
 8001cc4:	0800290c 	.word	0x0800290c
 8001cc8:	0800292c 	.word	0x0800292c
 8001ccc:	080028ec 	.word	0x080028ec

08001cd0 <std>:
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	b510      	push	{r4, lr}
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8001cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cde:	6083      	str	r3, [r0, #8]
 8001ce0:	8181      	strh	r1, [r0, #12]
 8001ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ce4:	81c2      	strh	r2, [r0, #14]
 8001ce6:	6183      	str	r3, [r0, #24]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	2208      	movs	r2, #8
 8001cec:	305c      	adds	r0, #92	; 0x5c
 8001cee:	f7ff fddb 	bl	80018a8 <memset>
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <std+0x38>)
 8001cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <std+0x3c>)
 8001cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <std+0x40>)
 8001cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <std+0x44>)
 8001d00:	6224      	str	r4, [r4, #32]
 8001d02:	6323      	str	r3, [r4, #48]	; 0x30
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	bf00      	nop
 8001d08:	08002741 	.word	0x08002741
 8001d0c:	08002763 	.word	0x08002763
 8001d10:	0800279b 	.word	0x0800279b
 8001d14:	080027bf 	.word	0x080027bf

08001d18 <_cleanup_r>:
 8001d18:	4901      	ldr	r1, [pc, #4]	; (8001d20 <_cleanup_r+0x8>)
 8001d1a:	f000 b8af 	b.w	8001e7c <_fwalk_reent>
 8001d1e:	bf00      	nop
 8001d20:	08001c59 	.word	0x08001c59

08001d24 <__sfmoreglue>:
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	2268      	movs	r2, #104	; 0x68
 8001d28:	1e4d      	subs	r5, r1, #1
 8001d2a:	4355      	muls	r5, r2
 8001d2c:	460e      	mov	r6, r1
 8001d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d32:	f000 f995 	bl	8002060 <_malloc_r>
 8001d36:	4604      	mov	r4, r0
 8001d38:	b140      	cbz	r0, 8001d4c <__sfmoreglue+0x28>
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8001d40:	300c      	adds	r0, #12
 8001d42:	60a0      	str	r0, [r4, #8]
 8001d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d48:	f7ff fdae 	bl	80018a8 <memset>
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}

08001d50 <__sfp_lock_acquire>:
 8001d50:	4801      	ldr	r0, [pc, #4]	; (8001d58 <__sfp_lock_acquire+0x8>)
 8001d52:	f000 b8b3 	b.w	8001ebc <__retarget_lock_acquire_recursive>
 8001d56:	bf00      	nop
 8001d58:	2000011d 	.word	0x2000011d

08001d5c <__sfp_lock_release>:
 8001d5c:	4801      	ldr	r0, [pc, #4]	; (8001d64 <__sfp_lock_release+0x8>)
 8001d5e:	f000 b8ae 	b.w	8001ebe <__retarget_lock_release_recursive>
 8001d62:	bf00      	nop
 8001d64:	2000011d 	.word	0x2000011d

08001d68 <__sinit_lock_acquire>:
 8001d68:	4801      	ldr	r0, [pc, #4]	; (8001d70 <__sinit_lock_acquire+0x8>)
 8001d6a:	f000 b8a7 	b.w	8001ebc <__retarget_lock_acquire_recursive>
 8001d6e:	bf00      	nop
 8001d70:	2000011e 	.word	0x2000011e

08001d74 <__sinit_lock_release>:
 8001d74:	4801      	ldr	r0, [pc, #4]	; (8001d7c <__sinit_lock_release+0x8>)
 8001d76:	f000 b8a2 	b.w	8001ebe <__retarget_lock_release_recursive>
 8001d7a:	bf00      	nop
 8001d7c:	2000011e 	.word	0x2000011e

08001d80 <__sinit>:
 8001d80:	b510      	push	{r4, lr}
 8001d82:	4604      	mov	r4, r0
 8001d84:	f7ff fff0 	bl	8001d68 <__sinit_lock_acquire>
 8001d88:	69a3      	ldr	r3, [r4, #24]
 8001d8a:	b11b      	cbz	r3, 8001d94 <__sinit+0x14>
 8001d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d90:	f7ff bff0 	b.w	8001d74 <__sinit_lock_release>
 8001d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d98:	6523      	str	r3, [r4, #80]	; 0x50
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <__sinit+0x68>)
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <__sinit+0x6c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	bf04      	itt	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	61a3      	streq	r3, [r4, #24]
 8001daa:	4620      	mov	r0, r4
 8001dac:	f000 f820 	bl	8001df0 <__sfp>
 8001db0:	6060      	str	r0, [r4, #4]
 8001db2:	4620      	mov	r0, r4
 8001db4:	f000 f81c 	bl	8001df0 <__sfp>
 8001db8:	60a0      	str	r0, [r4, #8]
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f000 f818 	bl	8001df0 <__sfp>
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60e0      	str	r0, [r4, #12]
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	6860      	ldr	r0, [r4, #4]
 8001dc8:	f7ff ff82 	bl	8001cd0 <std>
 8001dcc:	68a0      	ldr	r0, [r4, #8]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2109      	movs	r1, #9
 8001dd2:	f7ff ff7d 	bl	8001cd0 <std>
 8001dd6:	68e0      	ldr	r0, [r4, #12]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	2112      	movs	r1, #18
 8001ddc:	f7ff ff78 	bl	8001cd0 <std>
 8001de0:	2301      	movs	r3, #1
 8001de2:	61a3      	str	r3, [r4, #24]
 8001de4:	e7d2      	b.n	8001d8c <__sinit+0xc>
 8001de6:	bf00      	nop
 8001de8:	080028e8 	.word	0x080028e8
 8001dec:	08001d19 	.word	0x08001d19

08001df0 <__sfp>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	4607      	mov	r7, r0
 8001df4:	f7ff ffac 	bl	8001d50 <__sfp_lock_acquire>
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <__sfp+0x84>)
 8001dfa:	681e      	ldr	r6, [r3, #0]
 8001dfc:	69b3      	ldr	r3, [r6, #24]
 8001dfe:	b913      	cbnz	r3, 8001e06 <__sfp+0x16>
 8001e00:	4630      	mov	r0, r6
 8001e02:	f7ff ffbd 	bl	8001d80 <__sinit>
 8001e06:	3648      	adds	r6, #72	; 0x48
 8001e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	d503      	bpl.n	8001e18 <__sfp+0x28>
 8001e10:	6833      	ldr	r3, [r6, #0]
 8001e12:	b30b      	cbz	r3, 8001e58 <__sfp+0x68>
 8001e14:	6836      	ldr	r6, [r6, #0]
 8001e16:	e7f7      	b.n	8001e08 <__sfp+0x18>
 8001e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e1c:	b9d5      	cbnz	r5, 8001e54 <__sfp+0x64>
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <__sfp+0x88>)
 8001e20:	60e3      	str	r3, [r4, #12]
 8001e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e26:	6665      	str	r5, [r4, #100]	; 0x64
 8001e28:	f000 f847 	bl	8001eba <__retarget_lock_init_recursive>
 8001e2c:	f7ff ff96 	bl	8001d5c <__sfp_lock_release>
 8001e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e38:	6025      	str	r5, [r4, #0]
 8001e3a:	61a5      	str	r5, [r4, #24]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e44:	f7ff fd30 	bl	80018a8 <memset>
 8001e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e50:	4620      	mov	r0, r4
 8001e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e54:	3468      	adds	r4, #104	; 0x68
 8001e56:	e7d9      	b.n	8001e0c <__sfp+0x1c>
 8001e58:	2104      	movs	r1, #4
 8001e5a:	4638      	mov	r0, r7
 8001e5c:	f7ff ff62 	bl	8001d24 <__sfmoreglue>
 8001e60:	4604      	mov	r4, r0
 8001e62:	6030      	str	r0, [r6, #0]
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d1d5      	bne.n	8001e14 <__sfp+0x24>
 8001e68:	f7ff ff78 	bl	8001d5c <__sfp_lock_release>
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	e7ee      	b.n	8001e50 <__sfp+0x60>
 8001e72:	bf00      	nop
 8001e74:	080028e8 	.word	0x080028e8
 8001e78:	ffff0001 	.word	0xffff0001

08001e7c <_fwalk_reent>:
 8001e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e80:	4606      	mov	r6, r0
 8001e82:	4688      	mov	r8, r1
 8001e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e88:	2700      	movs	r7, #0
 8001e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8001e92:	d505      	bpl.n	8001ea0 <_fwalk_reent+0x24>
 8001e94:	6824      	ldr	r4, [r4, #0]
 8001e96:	2c00      	cmp	r4, #0
 8001e98:	d1f7      	bne.n	8001e8a <_fwalk_reent+0xe>
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ea0:	89ab      	ldrh	r3, [r5, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d907      	bls.n	8001eb6 <_fwalk_reent+0x3a>
 8001ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <_fwalk_reent+0x3a>
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	47c0      	blx	r8
 8001eb4:	4307      	orrs	r7, r0
 8001eb6:	3568      	adds	r5, #104	; 0x68
 8001eb8:	e7e9      	b.n	8001e8e <_fwalk_reent+0x12>

08001eba <__retarget_lock_init_recursive>:
 8001eba:	4770      	bx	lr

08001ebc <__retarget_lock_acquire_recursive>:
 8001ebc:	4770      	bx	lr

08001ebe <__retarget_lock_release_recursive>:
 8001ebe:	4770      	bx	lr

08001ec0 <__swhatbuf_r>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	460e      	mov	r6, r1
 8001ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	b096      	sub	sp, #88	; 0x58
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	da08      	bge.n	8001ee4 <__swhatbuf_r+0x24>
 8001ed2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	602a      	str	r2, [r5, #0]
 8001eda:	061a      	lsls	r2, r3, #24
 8001edc:	d410      	bmi.n	8001f00 <__swhatbuf_r+0x40>
 8001ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee2:	e00e      	b.n	8001f02 <__swhatbuf_r+0x42>
 8001ee4:	466a      	mov	r2, sp
 8001ee6:	f000 fc91 	bl	800280c <_fstat_r>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	dbf1      	blt.n	8001ed2 <__swhatbuf_r+0x12>
 8001eee:	9a01      	ldr	r2, [sp, #4]
 8001ef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ef8:	425a      	negs	r2, r3
 8001efa:	415a      	adcs	r2, r3
 8001efc:	602a      	str	r2, [r5, #0]
 8001efe:	e7ee      	b.n	8001ede <__swhatbuf_r+0x1e>
 8001f00:	2340      	movs	r3, #64	; 0x40
 8001f02:	2000      	movs	r0, #0
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	b016      	add	sp, #88	; 0x58
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f0c <__smakebuf_r>:
 8001f0c:	898b      	ldrh	r3, [r1, #12]
 8001f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f10:	079d      	lsls	r5, r3, #30
 8001f12:	4606      	mov	r6, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	d507      	bpl.n	8001f28 <__smakebuf_r+0x1c>
 8001f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f1c:	6023      	str	r3, [r4, #0]
 8001f1e:	6123      	str	r3, [r4, #16]
 8001f20:	2301      	movs	r3, #1
 8001f22:	6163      	str	r3, [r4, #20]
 8001f24:	b002      	add	sp, #8
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	ab01      	add	r3, sp, #4
 8001f2a:	466a      	mov	r2, sp
 8001f2c:	f7ff ffc8 	bl	8001ec0 <__swhatbuf_r>
 8001f30:	9900      	ldr	r1, [sp, #0]
 8001f32:	4605      	mov	r5, r0
 8001f34:	4630      	mov	r0, r6
 8001f36:	f000 f893 	bl	8002060 <_malloc_r>
 8001f3a:	b948      	cbnz	r0, 8001f50 <__smakebuf_r+0x44>
 8001f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f40:	059a      	lsls	r2, r3, #22
 8001f42:	d4ef      	bmi.n	8001f24 <__smakebuf_r+0x18>
 8001f44:	f023 0303 	bic.w	r3, r3, #3
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	81a3      	strh	r3, [r4, #12]
 8001f4e:	e7e3      	b.n	8001f18 <__smakebuf_r+0xc>
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <__smakebuf_r+0x7c>)
 8001f52:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	6020      	str	r0, [r4, #0]
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	81a3      	strh	r3, [r4, #12]
 8001f5e:	9b00      	ldr	r3, [sp, #0]
 8001f60:	6163      	str	r3, [r4, #20]
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	6120      	str	r0, [r4, #16]
 8001f66:	b15b      	cbz	r3, 8001f80 <__smakebuf_r+0x74>
 8001f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f000 fc5f 	bl	8002830 <_isatty_r>
 8001f72:	b128      	cbz	r0, 8001f80 <__smakebuf_r+0x74>
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	81a3      	strh	r3, [r4, #12]
 8001f80:	89a0      	ldrh	r0, [r4, #12]
 8001f82:	4305      	orrs	r5, r0
 8001f84:	81a5      	strh	r5, [r4, #12]
 8001f86:	e7cd      	b.n	8001f24 <__smakebuf_r+0x18>
 8001f88:	08001d19 	.word	0x08001d19

08001f8c <_free_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4605      	mov	r5, r0
 8001f90:	2900      	cmp	r1, #0
 8001f92:	d041      	beq.n	8002018 <_free_r+0x8c>
 8001f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f98:	1f0c      	subs	r4, r1, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bfb8      	it	lt
 8001f9e:	18e4      	addlt	r4, r4, r3
 8001fa0:	f000 fc68 	bl	8002874 <__malloc_lock>
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <_free_r+0x90>)
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	b933      	cbnz	r3, 8001fb8 <_free_r+0x2c>
 8001faa:	6063      	str	r3, [r4, #4]
 8001fac:	6014      	str	r4, [r2, #0]
 8001fae:	4628      	mov	r0, r5
 8001fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fb4:	f000 bc64 	b.w	8002880 <__malloc_unlock>
 8001fb8:	42a3      	cmp	r3, r4
 8001fba:	d908      	bls.n	8001fce <_free_r+0x42>
 8001fbc:	6820      	ldr	r0, [r4, #0]
 8001fbe:	1821      	adds	r1, r4, r0
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	bf01      	itttt	eq
 8001fc4:	6819      	ldreq	r1, [r3, #0]
 8001fc6:	685b      	ldreq	r3, [r3, #4]
 8001fc8:	1809      	addeq	r1, r1, r0
 8001fca:	6021      	streq	r1, [r4, #0]
 8001fcc:	e7ed      	b.n	8001faa <_free_r+0x1e>
 8001fce:	461a      	mov	r2, r3
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	b10b      	cbz	r3, 8001fd8 <_free_r+0x4c>
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	d9fa      	bls.n	8001fce <_free_r+0x42>
 8001fd8:	6811      	ldr	r1, [r2, #0]
 8001fda:	1850      	adds	r0, r2, r1
 8001fdc:	42a0      	cmp	r0, r4
 8001fde:	d10b      	bne.n	8001ff8 <_free_r+0x6c>
 8001fe0:	6820      	ldr	r0, [r4, #0]
 8001fe2:	4401      	add	r1, r0
 8001fe4:	1850      	adds	r0, r2, r1
 8001fe6:	4283      	cmp	r3, r0
 8001fe8:	6011      	str	r1, [r2, #0]
 8001fea:	d1e0      	bne.n	8001fae <_free_r+0x22>
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	6053      	str	r3, [r2, #4]
 8001ff2:	4401      	add	r1, r0
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	e7da      	b.n	8001fae <_free_r+0x22>
 8001ff8:	d902      	bls.n	8002000 <_free_r+0x74>
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	602b      	str	r3, [r5, #0]
 8001ffe:	e7d6      	b.n	8001fae <_free_r+0x22>
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	1821      	adds	r1, r4, r0
 8002004:	428b      	cmp	r3, r1
 8002006:	bf04      	itt	eq
 8002008:	6819      	ldreq	r1, [r3, #0]
 800200a:	685b      	ldreq	r3, [r3, #4]
 800200c:	6063      	str	r3, [r4, #4]
 800200e:	bf04      	itt	eq
 8002010:	1809      	addeq	r1, r1, r0
 8002012:	6021      	streq	r1, [r4, #0]
 8002014:	6054      	str	r4, [r2, #4]
 8002016:	e7ca      	b.n	8001fae <_free_r+0x22>
 8002018:	bd38      	pop	{r3, r4, r5, pc}
 800201a:	bf00      	nop
 800201c:	20000120 	.word	0x20000120

08002020 <sbrk_aligned>:
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	4e0e      	ldr	r6, [pc, #56]	; (800205c <sbrk_aligned+0x3c>)
 8002024:	460c      	mov	r4, r1
 8002026:	6831      	ldr	r1, [r6, #0]
 8002028:	4605      	mov	r5, r0
 800202a:	b911      	cbnz	r1, 8002032 <sbrk_aligned+0x12>
 800202c:	f000 fb78 	bl	8002720 <_sbrk_r>
 8002030:	6030      	str	r0, [r6, #0]
 8002032:	4621      	mov	r1, r4
 8002034:	4628      	mov	r0, r5
 8002036:	f000 fb73 	bl	8002720 <_sbrk_r>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	d00a      	beq.n	8002054 <sbrk_aligned+0x34>
 800203e:	1cc4      	adds	r4, r0, #3
 8002040:	f024 0403 	bic.w	r4, r4, #3
 8002044:	42a0      	cmp	r0, r4
 8002046:	d007      	beq.n	8002058 <sbrk_aligned+0x38>
 8002048:	1a21      	subs	r1, r4, r0
 800204a:	4628      	mov	r0, r5
 800204c:	f000 fb68 	bl	8002720 <_sbrk_r>
 8002050:	3001      	adds	r0, #1
 8002052:	d101      	bne.n	8002058 <sbrk_aligned+0x38>
 8002054:	f04f 34ff 	mov.w	r4, #4294967295
 8002058:	4620      	mov	r0, r4
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	20000124 	.word	0x20000124

08002060 <_malloc_r>:
 8002060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002064:	1ccd      	adds	r5, r1, #3
 8002066:	f025 0503 	bic.w	r5, r5, #3
 800206a:	3508      	adds	r5, #8
 800206c:	2d0c      	cmp	r5, #12
 800206e:	bf38      	it	cc
 8002070:	250c      	movcc	r5, #12
 8002072:	2d00      	cmp	r5, #0
 8002074:	4607      	mov	r7, r0
 8002076:	db01      	blt.n	800207c <_malloc_r+0x1c>
 8002078:	42a9      	cmp	r1, r5
 800207a:	d905      	bls.n	8002088 <_malloc_r+0x28>
 800207c:	230c      	movs	r3, #12
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	2600      	movs	r6, #0
 8002082:	4630      	mov	r0, r6
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002088:	4e2e      	ldr	r6, [pc, #184]	; (8002144 <_malloc_r+0xe4>)
 800208a:	f000 fbf3 	bl	8002874 <__malloc_lock>
 800208e:	6833      	ldr	r3, [r6, #0]
 8002090:	461c      	mov	r4, r3
 8002092:	bb34      	cbnz	r4, 80020e2 <_malloc_r+0x82>
 8002094:	4629      	mov	r1, r5
 8002096:	4638      	mov	r0, r7
 8002098:	f7ff ffc2 	bl	8002020 <sbrk_aligned>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	4604      	mov	r4, r0
 80020a0:	d14d      	bne.n	800213e <_malloc_r+0xde>
 80020a2:	6834      	ldr	r4, [r6, #0]
 80020a4:	4626      	mov	r6, r4
 80020a6:	2e00      	cmp	r6, #0
 80020a8:	d140      	bne.n	800212c <_malloc_r+0xcc>
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	4631      	mov	r1, r6
 80020ae:	4638      	mov	r0, r7
 80020b0:	eb04 0803 	add.w	r8, r4, r3
 80020b4:	f000 fb34 	bl	8002720 <_sbrk_r>
 80020b8:	4580      	cmp	r8, r0
 80020ba:	d13a      	bne.n	8002132 <_malloc_r+0xd2>
 80020bc:	6821      	ldr	r1, [r4, #0]
 80020be:	3503      	adds	r5, #3
 80020c0:	1a6d      	subs	r5, r5, r1
 80020c2:	f025 0503 	bic.w	r5, r5, #3
 80020c6:	3508      	adds	r5, #8
 80020c8:	2d0c      	cmp	r5, #12
 80020ca:	bf38      	it	cc
 80020cc:	250c      	movcc	r5, #12
 80020ce:	4629      	mov	r1, r5
 80020d0:	4638      	mov	r0, r7
 80020d2:	f7ff ffa5 	bl	8002020 <sbrk_aligned>
 80020d6:	3001      	adds	r0, #1
 80020d8:	d02b      	beq.n	8002132 <_malloc_r+0xd2>
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	442b      	add	r3, r5
 80020de:	6023      	str	r3, [r4, #0]
 80020e0:	e00e      	b.n	8002100 <_malloc_r+0xa0>
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	1b52      	subs	r2, r2, r5
 80020e6:	d41e      	bmi.n	8002126 <_malloc_r+0xc6>
 80020e8:	2a0b      	cmp	r2, #11
 80020ea:	d916      	bls.n	800211a <_malloc_r+0xba>
 80020ec:	1961      	adds	r1, r4, r5
 80020ee:	42a3      	cmp	r3, r4
 80020f0:	6025      	str	r5, [r4, #0]
 80020f2:	bf18      	it	ne
 80020f4:	6059      	strne	r1, [r3, #4]
 80020f6:	6863      	ldr	r3, [r4, #4]
 80020f8:	bf08      	it	eq
 80020fa:	6031      	streq	r1, [r6, #0]
 80020fc:	5162      	str	r2, [r4, r5]
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	4638      	mov	r0, r7
 8002102:	f104 060b 	add.w	r6, r4, #11
 8002106:	f000 fbbb 	bl	8002880 <__malloc_unlock>
 800210a:	f026 0607 	bic.w	r6, r6, #7
 800210e:	1d23      	adds	r3, r4, #4
 8002110:	1af2      	subs	r2, r6, r3
 8002112:	d0b6      	beq.n	8002082 <_malloc_r+0x22>
 8002114:	1b9b      	subs	r3, r3, r6
 8002116:	50a3      	str	r3, [r4, r2]
 8002118:	e7b3      	b.n	8002082 <_malloc_r+0x22>
 800211a:	6862      	ldr	r2, [r4, #4]
 800211c:	42a3      	cmp	r3, r4
 800211e:	bf0c      	ite	eq
 8002120:	6032      	streq	r2, [r6, #0]
 8002122:	605a      	strne	r2, [r3, #4]
 8002124:	e7ec      	b.n	8002100 <_malloc_r+0xa0>
 8002126:	4623      	mov	r3, r4
 8002128:	6864      	ldr	r4, [r4, #4]
 800212a:	e7b2      	b.n	8002092 <_malloc_r+0x32>
 800212c:	4634      	mov	r4, r6
 800212e:	6876      	ldr	r6, [r6, #4]
 8002130:	e7b9      	b.n	80020a6 <_malloc_r+0x46>
 8002132:	230c      	movs	r3, #12
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4638      	mov	r0, r7
 8002138:	f000 fba2 	bl	8002880 <__malloc_unlock>
 800213c:	e7a1      	b.n	8002082 <_malloc_r+0x22>
 800213e:	6025      	str	r5, [r4, #0]
 8002140:	e7de      	b.n	8002100 <_malloc_r+0xa0>
 8002142:	bf00      	nop
 8002144:	20000120 	.word	0x20000120

08002148 <__sfputc_r>:
 8002148:	6893      	ldr	r3, [r2, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	b410      	push	{r4}
 8002150:	6093      	str	r3, [r2, #8]
 8002152:	da07      	bge.n	8002164 <__sfputc_r+0x1c>
 8002154:	6994      	ldr	r4, [r2, #24]
 8002156:	42a3      	cmp	r3, r4
 8002158:	db01      	blt.n	800215e <__sfputc_r+0x16>
 800215a:	290a      	cmp	r1, #10
 800215c:	d102      	bne.n	8002164 <__sfputc_r+0x1c>
 800215e:	bc10      	pop	{r4}
 8002160:	f7ff bc38 	b.w	80019d4 <__swbuf_r>
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	1c58      	adds	r0, r3, #1
 8002168:	6010      	str	r0, [r2, #0]
 800216a:	7019      	strb	r1, [r3, #0]
 800216c:	4608      	mov	r0, r1
 800216e:	bc10      	pop	{r4}
 8002170:	4770      	bx	lr

08002172 <__sfputs_r>:
 8002172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002174:	4606      	mov	r6, r0
 8002176:	460f      	mov	r7, r1
 8002178:	4614      	mov	r4, r2
 800217a:	18d5      	adds	r5, r2, r3
 800217c:	42ac      	cmp	r4, r5
 800217e:	d101      	bne.n	8002184 <__sfputs_r+0x12>
 8002180:	2000      	movs	r0, #0
 8002182:	e007      	b.n	8002194 <__sfputs_r+0x22>
 8002184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002188:	463a      	mov	r2, r7
 800218a:	4630      	mov	r0, r6
 800218c:	f7ff ffdc 	bl	8002148 <__sfputc_r>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d1f3      	bne.n	800217c <__sfputs_r+0xa>
 8002194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002198 <_vfiprintf_r>:
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	460d      	mov	r5, r1
 800219e:	b09d      	sub	sp, #116	; 0x74
 80021a0:	4614      	mov	r4, r2
 80021a2:	4698      	mov	r8, r3
 80021a4:	4606      	mov	r6, r0
 80021a6:	b118      	cbz	r0, 80021b0 <_vfiprintf_r+0x18>
 80021a8:	6983      	ldr	r3, [r0, #24]
 80021aa:	b90b      	cbnz	r3, 80021b0 <_vfiprintf_r+0x18>
 80021ac:	f7ff fde8 	bl	8001d80 <__sinit>
 80021b0:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <_vfiprintf_r+0x240>)
 80021b2:	429d      	cmp	r5, r3
 80021b4:	d11b      	bne.n	80021ee <_vfiprintf_r+0x56>
 80021b6:	6875      	ldr	r5, [r6, #4]
 80021b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021ba:	07d9      	lsls	r1, r3, #31
 80021bc:	d405      	bmi.n	80021ca <_vfiprintf_r+0x32>
 80021be:	89ab      	ldrh	r3, [r5, #12]
 80021c0:	059a      	lsls	r2, r3, #22
 80021c2:	d402      	bmi.n	80021ca <_vfiprintf_r+0x32>
 80021c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021c6:	f7ff fe79 	bl	8001ebc <__retarget_lock_acquire_recursive>
 80021ca:	89ab      	ldrh	r3, [r5, #12]
 80021cc:	071b      	lsls	r3, r3, #28
 80021ce:	d501      	bpl.n	80021d4 <_vfiprintf_r+0x3c>
 80021d0:	692b      	ldr	r3, [r5, #16]
 80021d2:	b9eb      	cbnz	r3, 8002210 <_vfiprintf_r+0x78>
 80021d4:	4629      	mov	r1, r5
 80021d6:	4630      	mov	r0, r6
 80021d8:	f7ff fc4e 	bl	8001a78 <__swsetup_r>
 80021dc:	b1c0      	cbz	r0, 8002210 <_vfiprintf_r+0x78>
 80021de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021e0:	07dc      	lsls	r4, r3, #31
 80021e2:	d50e      	bpl.n	8002202 <_vfiprintf_r+0x6a>
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	b01d      	add	sp, #116	; 0x74
 80021ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ee:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <_vfiprintf_r+0x244>)
 80021f0:	429d      	cmp	r5, r3
 80021f2:	d101      	bne.n	80021f8 <_vfiprintf_r+0x60>
 80021f4:	68b5      	ldr	r5, [r6, #8]
 80021f6:	e7df      	b.n	80021b8 <_vfiprintf_r+0x20>
 80021f8:	4b79      	ldr	r3, [pc, #484]	; (80023e0 <_vfiprintf_r+0x248>)
 80021fa:	429d      	cmp	r5, r3
 80021fc:	bf08      	it	eq
 80021fe:	68f5      	ldreq	r5, [r6, #12]
 8002200:	e7da      	b.n	80021b8 <_vfiprintf_r+0x20>
 8002202:	89ab      	ldrh	r3, [r5, #12]
 8002204:	0598      	lsls	r0, r3, #22
 8002206:	d4ed      	bmi.n	80021e4 <_vfiprintf_r+0x4c>
 8002208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800220a:	f7ff fe58 	bl	8001ebe <__retarget_lock_release_recursive>
 800220e:	e7e9      	b.n	80021e4 <_vfiprintf_r+0x4c>
 8002210:	2300      	movs	r3, #0
 8002212:	9309      	str	r3, [sp, #36]	; 0x24
 8002214:	2320      	movs	r3, #32
 8002216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800221a:	f8cd 800c 	str.w	r8, [sp, #12]
 800221e:	2330      	movs	r3, #48	; 0x30
 8002220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80023e4 <_vfiprintf_r+0x24c>
 8002224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002228:	f04f 0901 	mov.w	r9, #1
 800222c:	4623      	mov	r3, r4
 800222e:	469a      	mov	sl, r3
 8002230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002234:	b10a      	cbz	r2, 800223a <_vfiprintf_r+0xa2>
 8002236:	2a25      	cmp	r2, #37	; 0x25
 8002238:	d1f9      	bne.n	800222e <_vfiprintf_r+0x96>
 800223a:	ebba 0b04 	subs.w	fp, sl, r4
 800223e:	d00b      	beq.n	8002258 <_vfiprintf_r+0xc0>
 8002240:	465b      	mov	r3, fp
 8002242:	4622      	mov	r2, r4
 8002244:	4629      	mov	r1, r5
 8002246:	4630      	mov	r0, r6
 8002248:	f7ff ff93 	bl	8002172 <__sfputs_r>
 800224c:	3001      	adds	r0, #1
 800224e:	f000 80aa 	beq.w	80023a6 <_vfiprintf_r+0x20e>
 8002252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002254:	445a      	add	r2, fp
 8002256:	9209      	str	r2, [sp, #36]	; 0x24
 8002258:	f89a 3000 	ldrb.w	r3, [sl]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a2 	beq.w	80023a6 <_vfiprintf_r+0x20e>
 8002262:	2300      	movs	r3, #0
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800226c:	f10a 0a01 	add.w	sl, sl, #1
 8002270:	9304      	str	r3, [sp, #16]
 8002272:	9307      	str	r3, [sp, #28]
 8002274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002278:	931a      	str	r3, [sp, #104]	; 0x68
 800227a:	4654      	mov	r4, sl
 800227c:	2205      	movs	r2, #5
 800227e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002282:	4858      	ldr	r0, [pc, #352]	; (80023e4 <_vfiprintf_r+0x24c>)
 8002284:	f7fd ffbc 	bl	8000200 <memchr>
 8002288:	9a04      	ldr	r2, [sp, #16]
 800228a:	b9d8      	cbnz	r0, 80022c4 <_vfiprintf_r+0x12c>
 800228c:	06d1      	lsls	r1, r2, #27
 800228e:	bf44      	itt	mi
 8002290:	2320      	movmi	r3, #32
 8002292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002296:	0713      	lsls	r3, r2, #28
 8002298:	bf44      	itt	mi
 800229a:	232b      	movmi	r3, #43	; 0x2b
 800229c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022a0:	f89a 3000 	ldrb.w	r3, [sl]
 80022a4:	2b2a      	cmp	r3, #42	; 0x2a
 80022a6:	d015      	beq.n	80022d4 <_vfiprintf_r+0x13c>
 80022a8:	9a07      	ldr	r2, [sp, #28]
 80022aa:	4654      	mov	r4, sl
 80022ac:	2000      	movs	r0, #0
 80022ae:	f04f 0c0a 	mov.w	ip, #10
 80022b2:	4621      	mov	r1, r4
 80022b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022b8:	3b30      	subs	r3, #48	; 0x30
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d94e      	bls.n	800235c <_vfiprintf_r+0x1c4>
 80022be:	b1b0      	cbz	r0, 80022ee <_vfiprintf_r+0x156>
 80022c0:	9207      	str	r2, [sp, #28]
 80022c2:	e014      	b.n	80022ee <_vfiprintf_r+0x156>
 80022c4:	eba0 0308 	sub.w	r3, r0, r8
 80022c8:	fa09 f303 	lsl.w	r3, r9, r3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	9304      	str	r3, [sp, #16]
 80022d0:	46a2      	mov	sl, r4
 80022d2:	e7d2      	b.n	800227a <_vfiprintf_r+0xe2>
 80022d4:	9b03      	ldr	r3, [sp, #12]
 80022d6:	1d19      	adds	r1, r3, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	9103      	str	r1, [sp, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bfbb      	ittet	lt
 80022e0:	425b      	neglt	r3, r3
 80022e2:	f042 0202 	orrlt.w	r2, r2, #2
 80022e6:	9307      	strge	r3, [sp, #28]
 80022e8:	9307      	strlt	r3, [sp, #28]
 80022ea:	bfb8      	it	lt
 80022ec:	9204      	strlt	r2, [sp, #16]
 80022ee:	7823      	ldrb	r3, [r4, #0]
 80022f0:	2b2e      	cmp	r3, #46	; 0x2e
 80022f2:	d10c      	bne.n	800230e <_vfiprintf_r+0x176>
 80022f4:	7863      	ldrb	r3, [r4, #1]
 80022f6:	2b2a      	cmp	r3, #42	; 0x2a
 80022f8:	d135      	bne.n	8002366 <_vfiprintf_r+0x1ce>
 80022fa:	9b03      	ldr	r3, [sp, #12]
 80022fc:	1d1a      	adds	r2, r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9203      	str	r2, [sp, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	bfb8      	it	lt
 8002306:	f04f 33ff 	movlt.w	r3, #4294967295
 800230a:	3402      	adds	r4, #2
 800230c:	9305      	str	r3, [sp, #20]
 800230e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80023e8 <_vfiprintf_r+0x250>
 8002312:	7821      	ldrb	r1, [r4, #0]
 8002314:	2203      	movs	r2, #3
 8002316:	4650      	mov	r0, sl
 8002318:	f7fd ff72 	bl	8000200 <memchr>
 800231c:	b140      	cbz	r0, 8002330 <_vfiprintf_r+0x198>
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	eba0 000a 	sub.w	r0, r0, sl
 8002324:	fa03 f000 	lsl.w	r0, r3, r0
 8002328:	9b04      	ldr	r3, [sp, #16]
 800232a:	4303      	orrs	r3, r0
 800232c:	3401      	adds	r4, #1
 800232e:	9304      	str	r3, [sp, #16]
 8002330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002334:	482d      	ldr	r0, [pc, #180]	; (80023ec <_vfiprintf_r+0x254>)
 8002336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800233a:	2206      	movs	r2, #6
 800233c:	f7fd ff60 	bl	8000200 <memchr>
 8002340:	2800      	cmp	r0, #0
 8002342:	d03f      	beq.n	80023c4 <_vfiprintf_r+0x22c>
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <_vfiprintf_r+0x258>)
 8002346:	bb1b      	cbnz	r3, 8002390 <_vfiprintf_r+0x1f8>
 8002348:	9b03      	ldr	r3, [sp, #12]
 800234a:	3307      	adds	r3, #7
 800234c:	f023 0307 	bic.w	r3, r3, #7
 8002350:	3308      	adds	r3, #8
 8002352:	9303      	str	r3, [sp, #12]
 8002354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002356:	443b      	add	r3, r7
 8002358:	9309      	str	r3, [sp, #36]	; 0x24
 800235a:	e767      	b.n	800222c <_vfiprintf_r+0x94>
 800235c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002360:	460c      	mov	r4, r1
 8002362:	2001      	movs	r0, #1
 8002364:	e7a5      	b.n	80022b2 <_vfiprintf_r+0x11a>
 8002366:	2300      	movs	r3, #0
 8002368:	3401      	adds	r4, #1
 800236a:	9305      	str	r3, [sp, #20]
 800236c:	4619      	mov	r1, r3
 800236e:	f04f 0c0a 	mov.w	ip, #10
 8002372:	4620      	mov	r0, r4
 8002374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002378:	3a30      	subs	r2, #48	; 0x30
 800237a:	2a09      	cmp	r2, #9
 800237c:	d903      	bls.n	8002386 <_vfiprintf_r+0x1ee>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0c5      	beq.n	800230e <_vfiprintf_r+0x176>
 8002382:	9105      	str	r1, [sp, #20]
 8002384:	e7c3      	b.n	800230e <_vfiprintf_r+0x176>
 8002386:	fb0c 2101 	mla	r1, ip, r1, r2
 800238a:	4604      	mov	r4, r0
 800238c:	2301      	movs	r3, #1
 800238e:	e7f0      	b.n	8002372 <_vfiprintf_r+0x1da>
 8002390:	ab03      	add	r3, sp, #12
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	462a      	mov	r2, r5
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <_vfiprintf_r+0x25c>)
 8002398:	a904      	add	r1, sp, #16
 800239a:	4630      	mov	r0, r6
 800239c:	f3af 8000 	nop.w
 80023a0:	4607      	mov	r7, r0
 80023a2:	1c78      	adds	r0, r7, #1
 80023a4:	d1d6      	bne.n	8002354 <_vfiprintf_r+0x1bc>
 80023a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023a8:	07d9      	lsls	r1, r3, #31
 80023aa:	d405      	bmi.n	80023b8 <_vfiprintf_r+0x220>
 80023ac:	89ab      	ldrh	r3, [r5, #12]
 80023ae:	059a      	lsls	r2, r3, #22
 80023b0:	d402      	bmi.n	80023b8 <_vfiprintf_r+0x220>
 80023b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023b4:	f7ff fd83 	bl	8001ebe <__retarget_lock_release_recursive>
 80023b8:	89ab      	ldrh	r3, [r5, #12]
 80023ba:	065b      	lsls	r3, r3, #25
 80023bc:	f53f af12 	bmi.w	80021e4 <_vfiprintf_r+0x4c>
 80023c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023c2:	e711      	b.n	80021e8 <_vfiprintf_r+0x50>
 80023c4:	ab03      	add	r3, sp, #12
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	462a      	mov	r2, r5
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <_vfiprintf_r+0x25c>)
 80023cc:	a904      	add	r1, sp, #16
 80023ce:	4630      	mov	r0, r6
 80023d0:	f000 f880 	bl	80024d4 <_printf_i>
 80023d4:	e7e4      	b.n	80023a0 <_vfiprintf_r+0x208>
 80023d6:	bf00      	nop
 80023d8:	0800290c 	.word	0x0800290c
 80023dc:	0800292c 	.word	0x0800292c
 80023e0:	080028ec 	.word	0x080028ec
 80023e4:	0800294c 	.word	0x0800294c
 80023e8:	08002952 	.word	0x08002952
 80023ec:	08002956 	.word	0x08002956
 80023f0:	00000000 	.word	0x00000000
 80023f4:	08002173 	.word	0x08002173

080023f8 <_printf_common>:
 80023f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023fc:	4616      	mov	r6, r2
 80023fe:	4699      	mov	r9, r3
 8002400:	688a      	ldr	r2, [r1, #8]
 8002402:	690b      	ldr	r3, [r1, #16]
 8002404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002408:	4293      	cmp	r3, r2
 800240a:	bfb8      	it	lt
 800240c:	4613      	movlt	r3, r2
 800240e:	6033      	str	r3, [r6, #0]
 8002410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002414:	4607      	mov	r7, r0
 8002416:	460c      	mov	r4, r1
 8002418:	b10a      	cbz	r2, 800241e <_printf_common+0x26>
 800241a:	3301      	adds	r3, #1
 800241c:	6033      	str	r3, [r6, #0]
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	0699      	lsls	r1, r3, #26
 8002422:	bf42      	ittt	mi
 8002424:	6833      	ldrmi	r3, [r6, #0]
 8002426:	3302      	addmi	r3, #2
 8002428:	6033      	strmi	r3, [r6, #0]
 800242a:	6825      	ldr	r5, [r4, #0]
 800242c:	f015 0506 	ands.w	r5, r5, #6
 8002430:	d106      	bne.n	8002440 <_printf_common+0x48>
 8002432:	f104 0a19 	add.w	sl, r4, #25
 8002436:	68e3      	ldr	r3, [r4, #12]
 8002438:	6832      	ldr	r2, [r6, #0]
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	42ab      	cmp	r3, r5
 800243e:	dc26      	bgt.n	800248e <_printf_common+0x96>
 8002440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002444:	1e13      	subs	r3, r2, #0
 8002446:	6822      	ldr	r2, [r4, #0]
 8002448:	bf18      	it	ne
 800244a:	2301      	movne	r3, #1
 800244c:	0692      	lsls	r2, r2, #26
 800244e:	d42b      	bmi.n	80024a8 <_printf_common+0xb0>
 8002450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002454:	4649      	mov	r1, r9
 8002456:	4638      	mov	r0, r7
 8002458:	47c0      	blx	r8
 800245a:	3001      	adds	r0, #1
 800245c:	d01e      	beq.n	800249c <_printf_common+0xa4>
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	68e5      	ldr	r5, [r4, #12]
 8002462:	6832      	ldr	r2, [r6, #0]
 8002464:	f003 0306 	and.w	r3, r3, #6
 8002468:	2b04      	cmp	r3, #4
 800246a:	bf08      	it	eq
 800246c:	1aad      	subeq	r5, r5, r2
 800246e:	68a3      	ldr	r3, [r4, #8]
 8002470:	6922      	ldr	r2, [r4, #16]
 8002472:	bf0c      	ite	eq
 8002474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002478:	2500      	movne	r5, #0
 800247a:	4293      	cmp	r3, r2
 800247c:	bfc4      	itt	gt
 800247e:	1a9b      	subgt	r3, r3, r2
 8002480:	18ed      	addgt	r5, r5, r3
 8002482:	2600      	movs	r6, #0
 8002484:	341a      	adds	r4, #26
 8002486:	42b5      	cmp	r5, r6
 8002488:	d11a      	bne.n	80024c0 <_printf_common+0xc8>
 800248a:	2000      	movs	r0, #0
 800248c:	e008      	b.n	80024a0 <_printf_common+0xa8>
 800248e:	2301      	movs	r3, #1
 8002490:	4652      	mov	r2, sl
 8002492:	4649      	mov	r1, r9
 8002494:	4638      	mov	r0, r7
 8002496:	47c0      	blx	r8
 8002498:	3001      	adds	r0, #1
 800249a:	d103      	bne.n	80024a4 <_printf_common+0xac>
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a4:	3501      	adds	r5, #1
 80024a6:	e7c6      	b.n	8002436 <_printf_common+0x3e>
 80024a8:	18e1      	adds	r1, r4, r3
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	2030      	movs	r0, #48	; 0x30
 80024ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024b2:	4422      	add	r2, r4
 80024b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024bc:	3302      	adds	r3, #2
 80024be:	e7c7      	b.n	8002450 <_printf_common+0x58>
 80024c0:	2301      	movs	r3, #1
 80024c2:	4622      	mov	r2, r4
 80024c4:	4649      	mov	r1, r9
 80024c6:	4638      	mov	r0, r7
 80024c8:	47c0      	blx	r8
 80024ca:	3001      	adds	r0, #1
 80024cc:	d0e6      	beq.n	800249c <_printf_common+0xa4>
 80024ce:	3601      	adds	r6, #1
 80024d0:	e7d9      	b.n	8002486 <_printf_common+0x8e>
	...

080024d4 <_printf_i>:
 80024d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024d8:	7e0f      	ldrb	r7, [r1, #24]
 80024da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024dc:	2f78      	cmp	r7, #120	; 0x78
 80024de:	4691      	mov	r9, r2
 80024e0:	4680      	mov	r8, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	469a      	mov	sl, r3
 80024e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024ea:	d807      	bhi.n	80024fc <_printf_i+0x28>
 80024ec:	2f62      	cmp	r7, #98	; 0x62
 80024ee:	d80a      	bhi.n	8002506 <_printf_i+0x32>
 80024f0:	2f00      	cmp	r7, #0
 80024f2:	f000 80d8 	beq.w	80026a6 <_printf_i+0x1d2>
 80024f6:	2f58      	cmp	r7, #88	; 0x58
 80024f8:	f000 80a3 	beq.w	8002642 <_printf_i+0x16e>
 80024fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002504:	e03a      	b.n	800257c <_printf_i+0xa8>
 8002506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800250a:	2b15      	cmp	r3, #21
 800250c:	d8f6      	bhi.n	80024fc <_printf_i+0x28>
 800250e:	a101      	add	r1, pc, #4	; (adr r1, 8002514 <_printf_i+0x40>)
 8002510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002514:	0800256d 	.word	0x0800256d
 8002518:	08002581 	.word	0x08002581
 800251c:	080024fd 	.word	0x080024fd
 8002520:	080024fd 	.word	0x080024fd
 8002524:	080024fd 	.word	0x080024fd
 8002528:	080024fd 	.word	0x080024fd
 800252c:	08002581 	.word	0x08002581
 8002530:	080024fd 	.word	0x080024fd
 8002534:	080024fd 	.word	0x080024fd
 8002538:	080024fd 	.word	0x080024fd
 800253c:	080024fd 	.word	0x080024fd
 8002540:	0800268d 	.word	0x0800268d
 8002544:	080025b1 	.word	0x080025b1
 8002548:	0800266f 	.word	0x0800266f
 800254c:	080024fd 	.word	0x080024fd
 8002550:	080024fd 	.word	0x080024fd
 8002554:	080026af 	.word	0x080026af
 8002558:	080024fd 	.word	0x080024fd
 800255c:	080025b1 	.word	0x080025b1
 8002560:	080024fd 	.word	0x080024fd
 8002564:	080024fd 	.word	0x080024fd
 8002568:	08002677 	.word	0x08002677
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	602a      	str	r2, [r5, #0]
 8002574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800257c:	2301      	movs	r3, #1
 800257e:	e0a3      	b.n	80026c8 <_printf_i+0x1f4>
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	6829      	ldr	r1, [r5, #0]
 8002584:	0606      	lsls	r6, r0, #24
 8002586:	f101 0304 	add.w	r3, r1, #4
 800258a:	d50a      	bpl.n	80025a2 <_printf_i+0xce>
 800258c:	680e      	ldr	r6, [r1, #0]
 800258e:	602b      	str	r3, [r5, #0]
 8002590:	2e00      	cmp	r6, #0
 8002592:	da03      	bge.n	800259c <_printf_i+0xc8>
 8002594:	232d      	movs	r3, #45	; 0x2d
 8002596:	4276      	negs	r6, r6
 8002598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800259c:	485e      	ldr	r0, [pc, #376]	; (8002718 <_printf_i+0x244>)
 800259e:	230a      	movs	r3, #10
 80025a0:	e019      	b.n	80025d6 <_printf_i+0x102>
 80025a2:	680e      	ldr	r6, [r1, #0]
 80025a4:	602b      	str	r3, [r5, #0]
 80025a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025aa:	bf18      	it	ne
 80025ac:	b236      	sxthne	r6, r6
 80025ae:	e7ef      	b.n	8002590 <_printf_i+0xbc>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	6820      	ldr	r0, [r4, #0]
 80025b4:	1d19      	adds	r1, r3, #4
 80025b6:	6029      	str	r1, [r5, #0]
 80025b8:	0601      	lsls	r1, r0, #24
 80025ba:	d501      	bpl.n	80025c0 <_printf_i+0xec>
 80025bc:	681e      	ldr	r6, [r3, #0]
 80025be:	e002      	b.n	80025c6 <_printf_i+0xf2>
 80025c0:	0646      	lsls	r6, r0, #25
 80025c2:	d5fb      	bpl.n	80025bc <_printf_i+0xe8>
 80025c4:	881e      	ldrh	r6, [r3, #0]
 80025c6:	4854      	ldr	r0, [pc, #336]	; (8002718 <_printf_i+0x244>)
 80025c8:	2f6f      	cmp	r7, #111	; 0x6f
 80025ca:	bf0c      	ite	eq
 80025cc:	2308      	moveq	r3, #8
 80025ce:	230a      	movne	r3, #10
 80025d0:	2100      	movs	r1, #0
 80025d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025d6:	6865      	ldr	r5, [r4, #4]
 80025d8:	60a5      	str	r5, [r4, #8]
 80025da:	2d00      	cmp	r5, #0
 80025dc:	bfa2      	ittt	ge
 80025de:	6821      	ldrge	r1, [r4, #0]
 80025e0:	f021 0104 	bicge.w	r1, r1, #4
 80025e4:	6021      	strge	r1, [r4, #0]
 80025e6:	b90e      	cbnz	r6, 80025ec <_printf_i+0x118>
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d04d      	beq.n	8002688 <_printf_i+0x1b4>
 80025ec:	4615      	mov	r5, r2
 80025ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80025f2:	fb03 6711 	mls	r7, r3, r1, r6
 80025f6:	5dc7      	ldrb	r7, [r0, r7]
 80025f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025fc:	4637      	mov	r7, r6
 80025fe:	42bb      	cmp	r3, r7
 8002600:	460e      	mov	r6, r1
 8002602:	d9f4      	bls.n	80025ee <_printf_i+0x11a>
 8002604:	2b08      	cmp	r3, #8
 8002606:	d10b      	bne.n	8002620 <_printf_i+0x14c>
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	07de      	lsls	r6, r3, #31
 800260c:	d508      	bpl.n	8002620 <_printf_i+0x14c>
 800260e:	6923      	ldr	r3, [r4, #16]
 8002610:	6861      	ldr	r1, [r4, #4]
 8002612:	4299      	cmp	r1, r3
 8002614:	bfde      	ittt	le
 8002616:	2330      	movle	r3, #48	; 0x30
 8002618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800261c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002620:	1b52      	subs	r2, r2, r5
 8002622:	6122      	str	r2, [r4, #16]
 8002624:	f8cd a000 	str.w	sl, [sp]
 8002628:	464b      	mov	r3, r9
 800262a:	aa03      	add	r2, sp, #12
 800262c:	4621      	mov	r1, r4
 800262e:	4640      	mov	r0, r8
 8002630:	f7ff fee2 	bl	80023f8 <_printf_common>
 8002634:	3001      	adds	r0, #1
 8002636:	d14c      	bne.n	80026d2 <_printf_i+0x1fe>
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	b004      	add	sp, #16
 800263e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002642:	4835      	ldr	r0, [pc, #212]	; (8002718 <_printf_i+0x244>)
 8002644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002648:	6829      	ldr	r1, [r5, #0]
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002650:	6029      	str	r1, [r5, #0]
 8002652:	061d      	lsls	r5, r3, #24
 8002654:	d514      	bpl.n	8002680 <_printf_i+0x1ac>
 8002656:	07df      	lsls	r7, r3, #31
 8002658:	bf44      	itt	mi
 800265a:	f043 0320 	orrmi.w	r3, r3, #32
 800265e:	6023      	strmi	r3, [r4, #0]
 8002660:	b91e      	cbnz	r6, 800266a <_printf_i+0x196>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f023 0320 	bic.w	r3, r3, #32
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	2310      	movs	r3, #16
 800266c:	e7b0      	b.n	80025d0 <_printf_i+0xfc>
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	2378      	movs	r3, #120	; 0x78
 8002678:	4828      	ldr	r0, [pc, #160]	; (800271c <_printf_i+0x248>)
 800267a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800267e:	e7e3      	b.n	8002648 <_printf_i+0x174>
 8002680:	0659      	lsls	r1, r3, #25
 8002682:	bf48      	it	mi
 8002684:	b2b6      	uxthmi	r6, r6
 8002686:	e7e6      	b.n	8002656 <_printf_i+0x182>
 8002688:	4615      	mov	r5, r2
 800268a:	e7bb      	b.n	8002604 <_printf_i+0x130>
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	6826      	ldr	r6, [r4, #0]
 8002690:	6961      	ldr	r1, [r4, #20]
 8002692:	1d18      	adds	r0, r3, #4
 8002694:	6028      	str	r0, [r5, #0]
 8002696:	0635      	lsls	r5, r6, #24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	d501      	bpl.n	80026a0 <_printf_i+0x1cc>
 800269c:	6019      	str	r1, [r3, #0]
 800269e:	e002      	b.n	80026a6 <_printf_i+0x1d2>
 80026a0:	0670      	lsls	r0, r6, #25
 80026a2:	d5fb      	bpl.n	800269c <_printf_i+0x1c8>
 80026a4:	8019      	strh	r1, [r3, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	6123      	str	r3, [r4, #16]
 80026aa:	4615      	mov	r5, r2
 80026ac:	e7ba      	b.n	8002624 <_printf_i+0x150>
 80026ae:	682b      	ldr	r3, [r5, #0]
 80026b0:	1d1a      	adds	r2, r3, #4
 80026b2:	602a      	str	r2, [r5, #0]
 80026b4:	681d      	ldr	r5, [r3, #0]
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4628      	mov	r0, r5
 80026bc:	f7fd fda0 	bl	8000200 <memchr>
 80026c0:	b108      	cbz	r0, 80026c6 <_printf_i+0x1f2>
 80026c2:	1b40      	subs	r0, r0, r5
 80026c4:	6060      	str	r0, [r4, #4]
 80026c6:	6863      	ldr	r3, [r4, #4]
 80026c8:	6123      	str	r3, [r4, #16]
 80026ca:	2300      	movs	r3, #0
 80026cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026d0:	e7a8      	b.n	8002624 <_printf_i+0x150>
 80026d2:	6923      	ldr	r3, [r4, #16]
 80026d4:	462a      	mov	r2, r5
 80026d6:	4649      	mov	r1, r9
 80026d8:	4640      	mov	r0, r8
 80026da:	47d0      	blx	sl
 80026dc:	3001      	adds	r0, #1
 80026de:	d0ab      	beq.n	8002638 <_printf_i+0x164>
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	079b      	lsls	r3, r3, #30
 80026e4:	d413      	bmi.n	800270e <_printf_i+0x23a>
 80026e6:	68e0      	ldr	r0, [r4, #12]
 80026e8:	9b03      	ldr	r3, [sp, #12]
 80026ea:	4298      	cmp	r0, r3
 80026ec:	bfb8      	it	lt
 80026ee:	4618      	movlt	r0, r3
 80026f0:	e7a4      	b.n	800263c <_printf_i+0x168>
 80026f2:	2301      	movs	r3, #1
 80026f4:	4632      	mov	r2, r6
 80026f6:	4649      	mov	r1, r9
 80026f8:	4640      	mov	r0, r8
 80026fa:	47d0      	blx	sl
 80026fc:	3001      	adds	r0, #1
 80026fe:	d09b      	beq.n	8002638 <_printf_i+0x164>
 8002700:	3501      	adds	r5, #1
 8002702:	68e3      	ldr	r3, [r4, #12]
 8002704:	9903      	ldr	r1, [sp, #12]
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	42ab      	cmp	r3, r5
 800270a:	dcf2      	bgt.n	80026f2 <_printf_i+0x21e>
 800270c:	e7eb      	b.n	80026e6 <_printf_i+0x212>
 800270e:	2500      	movs	r5, #0
 8002710:	f104 0619 	add.w	r6, r4, #25
 8002714:	e7f5      	b.n	8002702 <_printf_i+0x22e>
 8002716:	bf00      	nop
 8002718:	0800295d 	.word	0x0800295d
 800271c:	0800296e 	.word	0x0800296e

08002720 <_sbrk_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4d06      	ldr	r5, [pc, #24]	; (800273c <_sbrk_r+0x1c>)
 8002724:	2300      	movs	r3, #0
 8002726:	4604      	mov	r4, r0
 8002728:	4608      	mov	r0, r1
 800272a:	602b      	str	r3, [r5, #0]
 800272c:	f7fe f806 	bl	800073c <_sbrk>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d102      	bne.n	800273a <_sbrk_r+0x1a>
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	b103      	cbz	r3, 800273a <_sbrk_r+0x1a>
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	20000128 	.word	0x20000128

08002740 <__sread>:
 8002740:	b510      	push	{r4, lr}
 8002742:	460c      	mov	r4, r1
 8002744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002748:	f000 f8a0 	bl	800288c <_read_r>
 800274c:	2800      	cmp	r0, #0
 800274e:	bfab      	itete	ge
 8002750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002752:	89a3      	ldrhlt	r3, [r4, #12]
 8002754:	181b      	addge	r3, r3, r0
 8002756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800275a:	bfac      	ite	ge
 800275c:	6563      	strge	r3, [r4, #84]	; 0x54
 800275e:	81a3      	strhlt	r3, [r4, #12]
 8002760:	bd10      	pop	{r4, pc}

08002762 <__swrite>:
 8002762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002766:	461f      	mov	r7, r3
 8002768:	898b      	ldrh	r3, [r1, #12]
 800276a:	05db      	lsls	r3, r3, #23
 800276c:	4605      	mov	r5, r0
 800276e:	460c      	mov	r4, r1
 8002770:	4616      	mov	r6, r2
 8002772:	d505      	bpl.n	8002780 <__swrite+0x1e>
 8002774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002778:	2302      	movs	r3, #2
 800277a:	2200      	movs	r2, #0
 800277c:	f000 f868 	bl	8002850 <_lseek_r>
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800278a:	81a3      	strh	r3, [r4, #12]
 800278c:	4632      	mov	r2, r6
 800278e:	463b      	mov	r3, r7
 8002790:	4628      	mov	r0, r5
 8002792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002796:	f000 b817 	b.w	80027c8 <_write_r>

0800279a <__sseek>:
 800279a:	b510      	push	{r4, lr}
 800279c:	460c      	mov	r4, r1
 800279e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a2:	f000 f855 	bl	8002850 <_lseek_r>
 80027a6:	1c43      	adds	r3, r0, #1
 80027a8:	89a3      	ldrh	r3, [r4, #12]
 80027aa:	bf15      	itete	ne
 80027ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80027ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027b6:	81a3      	strheq	r3, [r4, #12]
 80027b8:	bf18      	it	ne
 80027ba:	81a3      	strhne	r3, [r4, #12]
 80027bc:	bd10      	pop	{r4, pc}

080027be <__sclose>:
 80027be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c2:	f000 b813 	b.w	80027ec <_close_r>
	...

080027c8 <_write_r>:
 80027c8:	b538      	push	{r3, r4, r5, lr}
 80027ca:	4d07      	ldr	r5, [pc, #28]	; (80027e8 <_write_r+0x20>)
 80027cc:	4604      	mov	r4, r0
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	2200      	movs	r2, #0
 80027d4:	602a      	str	r2, [r5, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f7fd ff63 	bl	80006a2 <_write>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d102      	bne.n	80027e6 <_write_r+0x1e>
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	b103      	cbz	r3, 80027e6 <_write_r+0x1e>
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
 80027e8:	20000128 	.word	0x20000128

080027ec <_close_r>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4d06      	ldr	r5, [pc, #24]	; (8002808 <_close_r+0x1c>)
 80027f0:	2300      	movs	r3, #0
 80027f2:	4604      	mov	r4, r0
 80027f4:	4608      	mov	r0, r1
 80027f6:	602b      	str	r3, [r5, #0]
 80027f8:	f7fd ff6f 	bl	80006da <_close>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d102      	bne.n	8002806 <_close_r+0x1a>
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	b103      	cbz	r3, 8002806 <_close_r+0x1a>
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	20000128 	.word	0x20000128

0800280c <_fstat_r>:
 800280c:	b538      	push	{r3, r4, r5, lr}
 800280e:	4d07      	ldr	r5, [pc, #28]	; (800282c <_fstat_r+0x20>)
 8002810:	2300      	movs	r3, #0
 8002812:	4604      	mov	r4, r0
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	602b      	str	r3, [r5, #0]
 800281a:	f7fd ff69 	bl	80006f0 <_fstat>
 800281e:	1c43      	adds	r3, r0, #1
 8002820:	d102      	bne.n	8002828 <_fstat_r+0x1c>
 8002822:	682b      	ldr	r3, [r5, #0]
 8002824:	b103      	cbz	r3, 8002828 <_fstat_r+0x1c>
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	bd38      	pop	{r3, r4, r5, pc}
 800282a:	bf00      	nop
 800282c:	20000128 	.word	0x20000128

08002830 <_isatty_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4d06      	ldr	r5, [pc, #24]	; (800284c <_isatty_r+0x1c>)
 8002834:	2300      	movs	r3, #0
 8002836:	4604      	mov	r4, r0
 8002838:	4608      	mov	r0, r1
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	f7fd ff67 	bl	800070e <_isatty>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d102      	bne.n	800284a <_isatty_r+0x1a>
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	b103      	cbz	r3, 800284a <_isatty_r+0x1a>
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	20000128 	.word	0x20000128

08002850 <_lseek_r>:
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	4d07      	ldr	r5, [pc, #28]	; (8002870 <_lseek_r+0x20>)
 8002854:	4604      	mov	r4, r0
 8002856:	4608      	mov	r0, r1
 8002858:	4611      	mov	r1, r2
 800285a:	2200      	movs	r2, #0
 800285c:	602a      	str	r2, [r5, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	f7fd ff5f 	bl	8000722 <_lseek>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d102      	bne.n	800286e <_lseek_r+0x1e>
 8002868:	682b      	ldr	r3, [r5, #0]
 800286a:	b103      	cbz	r3, 800286e <_lseek_r+0x1e>
 800286c:	6023      	str	r3, [r4, #0]
 800286e:	bd38      	pop	{r3, r4, r5, pc}
 8002870:	20000128 	.word	0x20000128

08002874 <__malloc_lock>:
 8002874:	4801      	ldr	r0, [pc, #4]	; (800287c <__malloc_lock+0x8>)
 8002876:	f7ff bb21 	b.w	8001ebc <__retarget_lock_acquire_recursive>
 800287a:	bf00      	nop
 800287c:	2000011c 	.word	0x2000011c

08002880 <__malloc_unlock>:
 8002880:	4801      	ldr	r0, [pc, #4]	; (8002888 <__malloc_unlock+0x8>)
 8002882:	f7ff bb1c 	b.w	8001ebe <__retarget_lock_release_recursive>
 8002886:	bf00      	nop
 8002888:	2000011c 	.word	0x2000011c

0800288c <_read_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	4d07      	ldr	r5, [pc, #28]	; (80028ac <_read_r+0x20>)
 8002890:	4604      	mov	r4, r0
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	2200      	movs	r2, #0
 8002898:	602a      	str	r2, [r5, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	f7fd fee4 	bl	8000668 <_read>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d102      	bne.n	80028aa <_read_r+0x1e>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	b103      	cbz	r3, 80028aa <_read_r+0x1e>
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	bd38      	pop	{r3, r4, r5, pc}
 80028ac:	20000128 	.word	0x20000128

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
