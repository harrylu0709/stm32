
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d20  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ec8  08000ec8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ec8  08000ec8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec8  08000ec8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec8  08000ec8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000006c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020024  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000189b  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000559  00000000  00000000  000218e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  00021e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  00022008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dbd  00000000  00000000  00022190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000221c  00000000  00000000  00024f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a8dc  00000000  00000000  00027169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00031a45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000694  00000000  00000000  00031a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000024 	.word	0x20000024
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000eb0 	.word	0x08000eb0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000028 	.word	0x20000028
 80001e4:	08000eb0 	.word	0x08000eb0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#define MY_ADDR 0x61

#define SLAVE_ADDR  0x68

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <GPIO_ButtonInit+0x2c>)
 800022c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800022e:	2300      	movs	r3, #0
 8000230:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000232:	2300      	movs	r3, #0
 8000234:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000236:	2302      	movs	r3, #2
 8000238:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f9d7 	bl	80005f4 <GPIO_Init>
//
//	GPIO_PeriClockControl(GPIOD,ENABLE);
//
//	GPIO_Init(&GpioLed);

}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <I2C1_GPIOinits>:

void I2C1_GPIOinits(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1Pins;

    I2C1Pins.pGPIOx = GPIOB;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <I2C1_GPIOinits+0x40>)
 800025c:	607b      	str	r3, [r7, #4]
    I2C1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800025e:	2302      	movs	r3, #2
 8000260:	727b      	strb	r3, [r7, #9]
    I2C1Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000262:	2301      	movs	r3, #1
 8000264:	733b      	strb	r3, [r7, #12]
    I2C1Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000266:	2301      	movs	r3, #1
 8000268:	72fb      	strb	r3, [r7, #11]
    I2C1Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800026a:	2304      	movs	r3, #4
 800026c:	737b      	strb	r3, [r7, #13]
    I2C1Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026e:	2302      	movs	r3, #2
 8000270:	72bb      	strb	r3, [r7, #10]

    //scl
    I2C1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000272:	2306      	movs	r3, #6
 8000274:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C1Pins);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f9bb 	bl	80005f4 <GPIO_Init>
    // //scl
    // I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
    // GPIO_Init(&I2CPins);

    //sda
    I2C1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800027e:	2307      	movs	r3, #7
 8000280:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C1Pins);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f9b5 	bl	80005f4 <GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020400 	.word	0x40020400

08000298 <I2C2_GPIOinits>:

void I2C2_GPIOinits(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C2Pins;

    I2C2Pins.pGPIOx = GPIOB;
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <I2C2_GPIOinits+0x40>)
 80002a0:	607b      	str	r3, [r7, #4]
    I2C2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002a2:	2302      	movs	r3, #2
 80002a4:	727b      	strb	r3, [r7, #9]
    I2C2Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002a6:	2301      	movs	r3, #1
 80002a8:	733b      	strb	r3, [r7, #12]
    I2C2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002aa:	2301      	movs	r3, #1
 80002ac:	72fb      	strb	r3, [r7, #11]
    I2C2Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002ae:	2304      	movs	r3, #4
 80002b0:	737b      	strb	r3, [r7, #13]
    I2C2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b2:	2302      	movs	r3, #2
 80002b4:	72bb      	strb	r3, [r7, #10]

    //scl
    I2C2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 80002b6:	230a      	movs	r3, #10
 80002b8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C2Pins);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f999 	bl	80005f4 <GPIO_Init>

    //sda
    I2C2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 80002c2:	230b      	movs	r3, #11
 80002c4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C2Pins);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f993 	bl	80005f4 <GPIO_Init>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400

080002dc <I2C1_Inits>:

void I2C1_Inits(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <I2C1_Inits+0x2c>)
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <I2C1_Inits+0x30>)
 80002e4:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <I2C1_Inits+0x2c>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <I2C1_Inits+0x2c>)
 80002ee:	2261      	movs	r2, #97	; 0x61
 80002f0:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <I2C1_Inits+0x2c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	815a      	strh	r2, [r3, #10]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <I2C1_Inits+0x2c>)
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <I2C1_Inits+0x34>)
 80002fc:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C1Handle);
 80002fe:	4802      	ldr	r0, [pc, #8]	; (8000308 <I2C1_Inits+0x2c>)
 8000300:	f000 fc0e 	bl	8000b20 <I2C_Init>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000040 	.word	0x20000040
 800030c:	40005400 	.word	0x40005400
 8000310:	000186a0 	.word	0x000186a0

08000314 <I2C2_Inits>:

void I2C2_Inits(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    I2C2Handle.pI2Cx = I2C2;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <I2C2_Inits+0x2c>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <I2C2_Inits+0x30>)
 800031c:	601a      	str	r2, [r3, #0]
    I2C2Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <I2C2_Inits+0x2c>)
 8000320:	2201      	movs	r2, #1
 8000322:	725a      	strb	r2, [r3, #9]
    I2C2Handle.I2C_Config.I2C_DeviceAddress = SLAVE_ADDR;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <I2C2_Inits+0x2c>)
 8000326:	2268      	movs	r2, #104	; 0x68
 8000328:	721a      	strb	r2, [r3, #8]
    I2C2Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <I2C2_Inits+0x2c>)
 800032c:	2200      	movs	r2, #0
 800032e:	815a      	strh	r2, [r3, #10]
    I2C2Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <I2C2_Inits+0x2c>)
 8000332:	4a05      	ldr	r2, [pc, #20]	; (8000348 <I2C2_Inits+0x34>)
 8000334:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C2Handle);
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <I2C2_Inits+0x2c>)
 8000338:	f000 fbf2 	bl	8000b20 <I2C_Init>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000068 	.word	0x20000068
 8000344:	40005800 	.word	0x40005800
 8000348:	000186a0 	.word	0x000186a0

0800034c <main>:

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af02      	add	r7, sp, #8
	// printf("start\n");
    GPIO_ButtonInit();
 8000352:	f7ff ff67 	bl	8000224 <GPIO_ButtonInit>

    I2C1_GPIOinits();
 8000356:	f7ff ff7d 	bl	8000254 <I2C1_GPIOinits>

    I2C1_Inits();
 800035a:	f7ff ffbf 	bl	80002dc <I2C1_Inits>

    I2C_PeripheralControl(I2C1, ENABLE);
 800035e:	2101      	movs	r1, #1
 8000360:	4815      	ldr	r0, [pc, #84]	; (80003b8 <main+0x6c>)
 8000362:	f000 fbc1 	bl	8000ae8 <I2C_PeripheralControl>

    //ack bit is made 1 after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000366:	2101      	movs	r1, #1
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <main+0x6c>)
 800036a:	f000 fd09 	bl	8000d80 <I2C_ManageAcking>


    I2C2_GPIOinits();
 800036e:	f7ff ff93 	bl	8000298 <I2C2_GPIOinits>

    I2C2_Inits();
 8000372:	f7ff ffcf 	bl	8000314 <I2C2_Inits>

    I2C_PeripheralControl(I2C2, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <main+0x70>)
 800037a:	f000 fbb5 	bl	8000ae8 <I2C_PeripheralControl>

    //ack bit is made 1 after PE = 1
    I2C_ManageAcking(I2C2, I2C_ACK_ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	480e      	ldr	r0, [pc, #56]	; (80003bc <main+0x70>)
 8000382:	f000 fcfd 	bl	8000d80 <I2C_ManageAcking>

    while(1)
    {
 //		//wait till button is pressed
 		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000386:	bf00      	nop
 8000388:	2100      	movs	r1, #0
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <main+0x74>)
 800038c:	f000 face 	bl	800092c <GPIO_ReadFromInputPin>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f8      	beq.n	8000388 <main+0x3c>

 		//to avoid button de-bouncing related issues 200ms of delay
 		delay();
 8000396:	f7ff ff2f 	bl	80001f8 <delay>

 		//send some data to the slave

 		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data), SLAVE_ADDR, 0, &I2C2Handle);
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <main+0x78>)
 800039c:	f7ff ff24 	bl	80001e8 <strlen>
 80003a0:	4602      	mov	r2, r0
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <main+0x7c>)
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2300      	movs	r3, #0
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2368      	movs	r3, #104	; 0x68
 80003ac:	4905      	ldr	r1, [pc, #20]	; (80003c4 <main+0x78>)
 80003ae:	4807      	ldr	r0, [pc, #28]	; (80003cc <main+0x80>)
 80003b0:	f000 fc6f 	bl	8000c92 <I2C_MasterSendData>
 		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80003b4:	e7e7      	b.n	8000386 <main+0x3a>
 80003b6:	bf00      	nop
 80003b8:	40005400 	.word	0x40005400
 80003bc:	40005800 	.word	0x40005800
 80003c0:	40020000 	.word	0x40020000
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000068 	.word	0x20000068
 80003cc:	20000040 	.word	0x20000040

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	; (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	; (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 fd33 	bl	8000e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff ffa3 	bl	800034c <main>

08000406 <LoopForever>:

LoopForever:
    b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000414:	08000ed0 	.word	0x08000ed0
  ldr r2, =_sbss
 8000418:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800041c:	20000090 	.word	0x20000090

08000420 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	460b      	mov	r3, r1
 800042e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d162      	bne.n	80004fc <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a64      	ldr	r2, [pc, #400]	; (80005cc <GPIO_PeriClockControl+0x1a8>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800043e:	4b64      	ldr	r3, [pc, #400]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a63      	ldr	r2, [pc, #396]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 800044a:	e0b9      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a61      	ldr	r2, [pc, #388]	; (80005d4 <GPIO_PeriClockControl+0x1b0>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000454:	4b5e      	ldr	r3, [pc, #376]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a5d      	ldr	r2, [pc, #372]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e0ae      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a5c      	ldr	r2, [pc, #368]	; (80005d8 <GPIO_PeriClockControl+0x1b4>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800046a:	4b59      	ldr	r3, [pc, #356]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a58      	ldr	r2, [pc, #352]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e0a3      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a58      	ldr	r2, [pc, #352]	; (80005dc <GPIO_PeriClockControl+0x1b8>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000480:	4b53      	ldr	r3, [pc, #332]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a52      	ldr	r2, [pc, #328]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000486:	f043 0308 	orr.w	r3, r3, #8
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e098      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a53      	ldr	r2, [pc, #332]	; (80005e0 <GPIO_PeriClockControl+0x1bc>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000496:	4b4e      	ldr	r3, [pc, #312]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a4d      	ldr	r2, [pc, #308]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800049c:	f043 0310 	orr.w	r3, r3, #16
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e08d      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a4f      	ldr	r2, [pc, #316]	; (80005e4 <GPIO_PeriClockControl+0x1c0>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004ac:	4b48      	ldr	r3, [pc, #288]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a47      	ldr	r2, [pc, #284]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	f043 0320 	orr.w	r3, r3, #32
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e082      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a4a      	ldr	r2, [pc, #296]	; (80005e8 <GPIO_PeriClockControl+0x1c4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004c2:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a42      	ldr	r2, [pc, #264]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e077      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a46      	ldr	r2, [pc, #280]	; (80005ec <GPIO_PeriClockControl+0x1c8>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004d8:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a3c      	ldr	r2, [pc, #240]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e06c      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a41      	ldr	r2, [pc, #260]	; (80005f0 <GPIO_PeriClockControl+0x1cc>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d168      	bne.n	80005c0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80004ee:	4b38      	ldr	r3, [pc, #224]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a37      	ldr	r2, [pc, #220]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e061      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a33      	ldr	r2, [pc, #204]	; (80005cc <GPIO_PeriClockControl+0x1a8>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a31      	ldr	r2, [pc, #196]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e056      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <GPIO_PeriClockControl+0x1b0>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800051a:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e04b      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <GPIO_PeriClockControl+0x1b4>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000536:	f023 0304 	bic.w	r3, r3, #4
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e040      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <GPIO_PeriClockControl+0x1b8>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000546:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800054c:	f023 0308 	bic.w	r3, r3, #8
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e035      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <GPIO_PeriClockControl+0x1bc>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000562:	f023 0310 	bic.w	r3, r3, #16
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e02a      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <GPIO_PeriClockControl+0x1c0>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 8000578:	f023 0320 	bic.w	r3, r3, #32
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e01f      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <GPIO_PeriClockControl+0x1c4>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 800058e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e014      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <GPIO_PeriClockControl+0x1c8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80005a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e009      	b.n	80005c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <GPIO_PeriClockControl+0x1cc>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d105      	bne.n	80005c0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <GPIO_PeriClockControl+0x1ac>)
 80005ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40021400 	.word	0x40021400
 80005e8:	40021800 	.word	0x40021800
 80005ec:	40021c00 	.word	0x40021c00
 80005f0:	40022000 	.word	0x40022000

080005f4 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff0c 	bl	8000424 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d820      	bhi.n	8000656 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	2103      	movs	r1, #3
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	400a      	ands	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6819      	ldr	r1, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	430a      	orrs	r2, r1
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	e0cb      	b.n	80007ee <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	795b      	ldrb	r3, [r3, #5]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d117      	bne.n	800068e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <GPIO_Init+0x198>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a47      	ldr	r2, [pc, #284]	; (800078c <GPIO_Init+0x198>)
 8000670:	430b      	orrs	r3, r1
 8000672:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000674:	4b45      	ldr	r3, [pc, #276]	; (800078c <GPIO_Init+0x198>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	43d2      	mvns	r2, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a41      	ldr	r2, [pc, #260]	; (800078c <GPIO_Init+0x198>)
 8000688:	400b      	ands	r3, r1
 800068a:	6093      	str	r3, [r2, #8]
 800068c:	e035      	b.n	80006fa <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	795b      	ldrb	r3, [r3, #5]
 8000692:	2b05      	cmp	r3, #5
 8000694:	d117      	bne.n	80006c6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000696:	4b3d      	ldr	r3, [pc, #244]	; (800078c <GPIO_Init+0x198>)
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	7912      	ldrb	r2, [r2, #4]
 800069e:	4611      	mov	r1, r2
 80006a0:	2201      	movs	r2, #1
 80006a2:	408a      	lsls	r2, r1
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a39      	ldr	r2, [pc, #228]	; (800078c <GPIO_Init+0x198>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <GPIO_Init+0x198>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	43d2      	mvns	r2, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <GPIO_Init+0x198>)
 80006c0:	400b      	ands	r3, r1
 80006c2:	60d3      	str	r3, [r2, #12]
 80006c4:	e019      	b.n	80006fa <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d115      	bne.n	80006fa <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <GPIO_Init+0x198>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	7912      	ldrb	r2, [r2, #4]
 80006d6:	4611      	mov	r1, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	408a      	lsls	r2, r1
 80006dc:	4611      	mov	r1, r2
 80006de:	4a2b      	ldr	r2, [pc, #172]	; (800078c <GPIO_Init+0x198>)
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <GPIO_Init+0x198>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <GPIO_Init+0x198>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <GPIO_Init+0x19c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d04e      	beq.n	80007b4 <GPIO_Init+0x1c0>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <GPIO_Init+0x1a0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d032      	beq.n	8000786 <GPIO_Init+0x192>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <GPIO_Init+0x1a4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d02b      	beq.n	8000782 <GPIO_Init+0x18e>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <GPIO_Init+0x1a8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d024      	beq.n	800077e <GPIO_Init+0x18a>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <GPIO_Init+0x1ac>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d01d      	beq.n	800077a <GPIO_Init+0x186>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <GPIO_Init+0x1b0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d016      	beq.n	8000776 <GPIO_Init+0x182>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <GPIO_Init+0x1b4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d00f      	beq.n	8000772 <GPIO_Init+0x17e>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <GPIO_Init+0x1b8>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d008      	beq.n	800076e <GPIO_Init+0x17a>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <GPIO_Init+0x1bc>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <GPIO_Init+0x176>
 8000766:	2308      	movs	r3, #8
 8000768:	e025      	b.n	80007b6 <GPIO_Init+0x1c2>
 800076a:	2300      	movs	r3, #0
 800076c:	e023      	b.n	80007b6 <GPIO_Init+0x1c2>
 800076e:	2307      	movs	r3, #7
 8000770:	e021      	b.n	80007b6 <GPIO_Init+0x1c2>
 8000772:	2306      	movs	r3, #6
 8000774:	e01f      	b.n	80007b6 <GPIO_Init+0x1c2>
 8000776:	2305      	movs	r3, #5
 8000778:	e01d      	b.n	80007b6 <GPIO_Init+0x1c2>
 800077a:	2304      	movs	r3, #4
 800077c:	e01b      	b.n	80007b6 <GPIO_Init+0x1c2>
 800077e:	2303      	movs	r3, #3
 8000780:	e019      	b.n	80007b6 <GPIO_Init+0x1c2>
 8000782:	2302      	movs	r3, #2
 8000784:	e017      	b.n	80007b6 <GPIO_Init+0x1c2>
 8000786:	2301      	movs	r3, #1
 8000788:	e015      	b.n	80007b6 <GPIO_Init+0x1c2>
 800078a:	bf00      	nop
 800078c:	40013c00 	.word	0x40013c00
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40021400 	.word	0x40021400
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40021c00 	.word	0x40021c00
 80007b0:	40022000 	.word	0x40022000
 80007b4:	2300      	movs	r3, #0
 80007b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007b8:	4b59      	ldr	r3, [pc, #356]	; (8000920 <GPIO_Init+0x32c>)
 80007ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007bc:	4a58      	ldr	r2, [pc, #352]	; (8000920 <GPIO_Init+0x32c>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80007c4:	7c7a      	ldrb	r2, [r7, #17]
 80007c6:	7cbb      	ldrb	r3, [r7, #18]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	fa02 f103 	lsl.w	r1, r2, r3
 80007ce:	4a55      	ldr	r2, [pc, #340]	; (8000924 <GPIO_Init+0x330>)
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	3302      	adds	r3, #2
 80007d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007d8:	4b53      	ldr	r3, [pc, #332]	; (8000928 <GPIO_Init+0x334>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7912      	ldrb	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a4f      	ldr	r2, [pc, #316]	; (8000928 <GPIO_Init+0x334>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	799b      	ldrb	r3, [r3, #6]
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	2103      	movs	r1, #3
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	400a      	ands	r2, r1
 800081c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6899      	ldr	r1, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	430a      	orrs	r2, r1
 800082c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	79db      	ldrb	r3, [r3, #7]
 8000832:	461a      	mov	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	2103      	movs	r1, #3
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	4619      	mov	r1, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	400a      	ands	r2, r1
 800085c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68d9      	ldr	r1, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	430a      	orrs	r2, r1
 800086c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7a1b      	ldrb	r3, [r3, #8]
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	685a      	ldr	r2, [r3, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	4619      	mov	r1, r3
 800088a:	2301      	movs	r3, #1
 800088c:	408b      	lsls	r3, r1
 800088e:	43db      	mvns	r3, r3
 8000890:	4619      	mov	r1, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	400a      	ands	r2, r1
 8000898:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6859      	ldr	r1, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d131      	bne.n	8000916 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	08db      	lsrs	r3, r3, #3
 80008b8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	7c3a      	ldrb	r2, [r7, #16]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	7c3a      	ldrb	r2, [r7, #16]
 80008e4:	4001      	ands	r1, r0
 80008e6:	3208      	adds	r2, #8
 80008e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	7c3a      	ldrb	r2, [r7, #16]
 80008f2:	3208      	adds	r2, #8
 80008f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a5b      	ldrb	r3, [r3, #9]
 80008fc:	461a      	mov	r2, r3
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	7c3a      	ldrb	r2, [r7, #16]
 800090e:	4301      	orrs	r1, r0
 8000910:	3208      	adds	r2, #8
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40013800 	.word	0x40013800
 8000928:	40013c00 	.word	0x40013c00

0800092c <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	fa22 f303 	lsr.w	r3, r2, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]

   return value;
 800094a:	7bfb      	ldrb	r3, [r7, #15]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	611a      	str	r2, [r3, #16]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <I2C_ClearADDRFlag>:
	SlaveAddr |= 1;
	pI2Cx->DR = SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
	// uint32_t dummyRead = pI2Cx->SR1;
	// dummyRead = pI2Cx->SR2;
	// (void)dummyRead;
	uint32_t dummyRead;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d01f      	beq.n	80009f4 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7f1b      	ldrb	r3, [r3, #28]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d112      	bne.n	80009e2 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d11f      	bne.n	8000a04 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f9d8 	bl	8000d80 <I2C_ManageAcking>

				//clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	60fb      	str	r3, [r7, #12]
		//clear ADDR flag
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
}
 80009e0:	e010      	b.n	8000a04 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	60fb      	str	r3, [r7, #12]
}
 80009f2:	e007      	b.n	8000a04 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	60fb      	str	r3, [r7, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
	return 0;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <RCC_GetPCLK1Value+0x9c>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000a4c:	7a7b      	ldrb	r3, [r7, #9]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;	
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <RCC_GetPCLK1Value+0xa0>)
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e00b      	b.n	8000a70 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000a58:	7a7b      	ldrb	r3, [r7, #9]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d102      	bne.n	8000a64 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;	
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <RCC_GetPCLK1Value+0xa4>)
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e005      	b.n	8000a70 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 8000a64:	7a7b      	ldrb	r3, [r7, #9]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d102      	bne.n	8000a70 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();	
 8000a6a:	f7ff ffde 	bl	8000a2a <RCC_GetPLLOutputClock>
 8000a6e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb

	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <RCC_GetPCLK1Value+0x9c>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 030f 	and.w	r3, r3, #15
 8000a7c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a7e:	7a3b      	ldrb	r3, [r7, #8]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d802      	bhi.n	8000a8a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	72fb      	strb	r3, [r7, #11]
 8000a88:	e005      	b.n	8000a96 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];	
 8000a8a:	7a3b      	ldrb	r3, [r7, #8]
 8000a8c:	3b08      	subs	r3, #8
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <RCC_GetPCLK1Value+0xa8>)
 8000a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a94:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1

	temp = ((RCC->CFGR >> 10) & 0x7);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <RCC_GetPCLK1Value+0x9c>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	0a9b      	lsrs	r3, r3, #10
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000aa4:	7a3b      	ldrb	r3, [r7, #8]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d802      	bhi.n	8000ab0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	72bb      	strb	r3, [r7, #10]
 8000aae:	e004      	b.n	8000aba <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];	
 8000ab0:	7a3b      	ldrb	r3, [r7, #8]
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <RCC_GetPCLK1Value+0xac>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahbp) / apb1p;
 8000aba:	7afb      	ldrb	r3, [r7, #11]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ac2:	7abb      	ldrb	r3, [r7, #10]
 8000ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac8:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	00f42400 	.word	0x00f42400
 8000adc:	007a1200 	.word	0x007a1200
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	20000020 	.word	0x20000020

08000ae8 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d106      	bne.n	8000b08 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |=  (1 << I2C_CR1_PE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
	}
}
 8000b06:	e005      	b.n	8000b14 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 0201 	bic.w	r2, r3, #1
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]


	//enable clock for i2c peripheral

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f940 	bl	8000db8 <I2C_PeriClockControl>
	
	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7a5b      	ldrb	r3, [r3, #9]
 8000b3c:	029b      	lsls	r3, r3, #10
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000b52:	f7ff ff71 	bl	8000a38 <RCC_GetPCLK1Value>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <I2C_Init+0x144>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg & (0X3F);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b70:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7a1b      	ldrb	r3, [r3, #8]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b86:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	609a      	str	r2, [r3, #8]

	//CCR calculation clock control register
	uint16_t ccr_value = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <I2C_Init+0x148>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d80f      	bhi.n	8000bc2 <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ba2:	f7ff ff49 	bl	8000a38 <RCC_GetPCLK1Value>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000bb4:	897b      	ldrh	r3, [r7, #10]
 8000bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e027      	b.n	8000c12 <I2C_Init+0xf2>
	}
	else
	{
		//mode is fast mode
		tempreg |= (1<<15);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	895b      	ldrh	r3, [r3, #10]
 8000bce:	039b      	lsls	r3, r3, #14
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	895b      	ldrh	r3, [r3, #10]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10b      	bne.n	8000bf8 <I2C_Init+0xd8>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000be0:	f7ff ff2a 	bl	8000a38 <RCC_GetPCLK1Value>
 8000be4:	4601      	mov	r1, r0
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf4:	817b      	strh	r3, [r7, #10]
 8000bf6:	e00c      	b.n	8000c12 <I2C_Init+0xf2>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000bf8:	f7ff ff1e 	bl	8000a38 <RCC_GetPCLK1Value>
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	009a      	lsls	r2, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c10:	817b      	strh	r3, [r7, #10]
		}
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	61da      	str	r2, [r3, #28]

	//TRISE configuration Fpclk1 * Trise(max) + 1
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <I2C_Init+0x148>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d809      	bhi.n	8000c38 <I2C_Init+0x118>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1;
 8000c24:	f7ff ff08 	bl	8000a38 <RCC_GetPCLK1Value>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <I2C_Init+0x144>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e00c      	b.n	8000c52 <I2C_Init+0x132>
	}
	else
	{
		//mode is fast mode
		tempreg = (RCC_GetPCLK1Value() * 300/1000000U) + 1;
 8000c38:	f7ff fefe 	bl	8000a38 <RCC_GetPCLK1Value>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <I2C_Init+0x144>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = tempreg;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	621a      	str	r2, [r3, #32]
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	431bde83 	.word	0x431bde83
 8000c68:	000186a0 	.word	0x000186a0

08000c6c <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle ,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr,I2C_Handle_t *pI2CHandle2)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	70fb      	strb	r3, [r7, #3]
	//reference manual 27.3.3 figure 243
	//1. generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe56 	bl	8000956 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in SR1
	// Note: until SB is cleared SCL will be stretched(pulled to low)
	//By reference manual: Cleared by software by reading SR1 followed by writing DR, or by hardware when PE = 0
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000caa:	bf00      	nop
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ffda 	bl	8000c6c <I2C_GetFlagStatus>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f6      	beq.n	8000cac <I2C_MasterSendData+0x1a>

	//3. Send the address of slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe54 	bl	8000974 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000ccc:	bf00      	nop
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffc9 	bl	8000c6c <I2C_GetFlagStatus>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f6      	beq.n	8000cce <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched(pulled to low)
	I2C_ClearADDRFlag(pI2CHandle);
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f7ff fe5c 	bl	800099e <I2C_ClearADDRFlag>
	I2C_ClearADDRFlag(pI2CHandle2);
 8000ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ce8:	f7ff fe59 	bl	800099e <I2C_ClearADDRFlag>

	//6.Send the data until len becomes 0
	for(int i = Len; i>0; i--)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e022      	b.n	8000d38 <I2C_MasterSendData+0xa6>
	{
		
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 8000cf2:	bf00      	nop
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffb6 	bl	8000c6c <I2C_GetFlagStatus>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f6      	beq.n	8000cf4 <I2C_MasterSendData+0x62>

		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]

		while(!I2C_GetFlagStatus(pI2CHandle2->pI2Cx, I2C_FLAG_RXNE)); //Wait till RXNE is set
 8000d16:	bf00      	nop
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffa4 	bl	8000c6c <I2C_GetFlagStatus>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f6      	beq.n	8000d18 <I2C_MasterSendData+0x86>
		int dummy_read = pI2CHandle2->pI2Cx->DR; //DR is read before next byte is received
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	613b      	str	r3, [r7, #16]
	for(int i = Len; i>0; i--)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dcd9      	bgt.n	8000cf2 <I2C_MasterSendData+0x60>
	} 
	
	//7. when Len becomes zero wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// Note: TXE = 1, BTF = 1, means that both SR and DR are empty and next transmission should begin
	// when BTF = 1 SCL will be stretched(pulled to low)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000d3e:	bf00      	nop
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff90 	bl	8000c6c <I2C_GetFlagStatus>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f6      	beq.n	8000d40 <I2C_MasterSendData+0xae>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000d52:	bf00      	nop
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff86 	bl	8000c6c <I2C_GetFlagStatus>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f6      	beq.n	8000d54 <I2C_MasterSendData+0xc2>

	//8. Generate STOP condition and master need not to wait for the completion of STOP condition
	// Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000d66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <I2C_MasterSendData+0xe6>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe4a 	bl	8000a0c <I2C_GenerateStopCondition>
}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <I2C_ManageAcking>:
{
	return (uint8_t)pI2Cx->DR;
}

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d106      	bne.n	8000da0 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 8000d9e:	e005      	b.n	8000dac <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d120      	bne.n	8000e0c <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <I2C_PeriClockControl+0xa0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d106      	bne.n	8000de0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000dde:	e035      	b.n	8000e4c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <I2C_PeriClockControl+0xa8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d106      	bne.n	8000df6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000dee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000df4:	e02a      	b.n	8000e4c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <I2C_PeriClockControl+0xac>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d126      	bne.n	8000e4c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e0a:	e01f      	b.n	8000e4c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <I2C_PeriClockControl+0xa0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d106      	bne.n	8000e22 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e20:	e014      	b.n	8000e4c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <I2C_PeriClockControl+0xa8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d106      	bne.n	8000e38 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e36:	e009      	b.n	8000e4c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <I2C_PeriClockControl+0xac>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d105      	bne.n	8000e4c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <I2C_PeriClockControl+0xa4>)
 8000e46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40005800 	.word	0x40005800
 8000e64:	40005c00 	.word	0x40005c00

08000e68 <__libc_init_array>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	4d0d      	ldr	r5, [pc, #52]	; (8000ea0 <__libc_init_array+0x38>)
 8000e6c:	4c0d      	ldr	r4, [pc, #52]	; (8000ea4 <__libc_init_array+0x3c>)
 8000e6e:	1b64      	subs	r4, r4, r5
 8000e70:	10a4      	asrs	r4, r4, #2
 8000e72:	2600      	movs	r6, #0
 8000e74:	42a6      	cmp	r6, r4
 8000e76:	d109      	bne.n	8000e8c <__libc_init_array+0x24>
 8000e78:	4d0b      	ldr	r5, [pc, #44]	; (8000ea8 <__libc_init_array+0x40>)
 8000e7a:	4c0c      	ldr	r4, [pc, #48]	; (8000eac <__libc_init_array+0x44>)
 8000e7c:	f000 f818 	bl	8000eb0 <_init>
 8000e80:	1b64      	subs	r4, r4, r5
 8000e82:	10a4      	asrs	r4, r4, #2
 8000e84:	2600      	movs	r6, #0
 8000e86:	42a6      	cmp	r6, r4
 8000e88:	d105      	bne.n	8000e96 <__libc_init_array+0x2e>
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
 8000e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e90:	4798      	blx	r3
 8000e92:	3601      	adds	r6, #1
 8000e94:	e7ee      	b.n	8000e74 <__libc_init_array+0xc>
 8000e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e9a:	4798      	blx	r3
 8000e9c:	3601      	adds	r6, #1
 8000e9e:	e7f2      	b.n	8000e86 <__libc_init_array+0x1e>
 8000ea0:	08000ec8 	.word	0x08000ec8
 8000ea4:	08000ec8 	.word	0x08000ec8
 8000ea8:	08000ec8 	.word	0x08000ec8
 8000eac:	08000ecc 	.word	0x08000ecc

08000eb0 <_init>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr

08000ebc <_fini>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr
