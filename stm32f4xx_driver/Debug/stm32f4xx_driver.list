
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800262c  0800262c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800262c  0800262c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800262c  0800262c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000074  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020a9  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000748  00000000  00000000  0002213b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a8  00000000  00000000  00022888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000250  00000000  00000000  00022b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000039b8  00000000  00000000  00022d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c71  00000000  00000000  00026738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bd2e  00000000  00000000  000293a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000350d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001220  00000000  00000000  00035128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002524 	.word	0x08002524

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002524 	.word	0x08002524

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:
uint8_t btn_flag = 0;
//arduino led


void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <SPI1_GPIOInits>:
void SPI1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <SPI1_GPIOInits+0x58>)
 80002c4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002ca:	2305      	movs	r3, #5
 80002cc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ce:	2302      	movs	r3, #2
 80002d0:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002d2:	2300      	movs	r3, #0
 80002d4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002d6:	2300      	movs	r3, #0
 80002d8:	72fb      	strb	r3, [r7, #11]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80002da:	2305      	movs	r3, #5
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fbad 	bl	8000a40 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fba7 	bl	8000a40 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002f2:	2306      	movs	r3, #6
 80002f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fba1 	bl	8000a40 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80002fe:	2304      	movs	r3, #4
 8000300:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fb9b 	bl	8000a40 <GPIO_Init>
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40020000 	.word	0x40020000

08000318 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <SPI2_GPIOInits+0x58>)
 8000320:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000322:	2302      	movs	r3, #2
 8000324:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000326:	2305      	movs	r3, #5
 8000328:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800032a:	2302      	movs	r3, #2
 800032c:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800032e:	2300      	movs	r3, #0
 8000330:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000332:	2300      	movs	r3, #0
 8000334:	72fb      	strb	r3, [r7, #11]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000336:	230d      	movs	r3, #13
 8000338:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fb7f 	bl	8000a40 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000342:	230f      	movs	r3, #15
 8000344:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fb79 	bl	8000a40 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800034e:	230e      	movs	r3, #14
 8000350:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fb73 	bl	8000a40 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800035a:	230c      	movs	r3, #12
 800035c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fb6d 	bl	8000a40 <GPIO_Init>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40020400 	.word	0x40020400

08000374 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <GPIO_ButtonInit+0x2c>)
 800037c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800037e:	2300      	movs	r3, #0
 8000380:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000382:	2300      	movs	r3, #0
 8000384:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000386:	2302      	movs	r3, #2
 8000388:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800038a:	2300      	movs	r3, #0
 800038c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fb55 	bl	8000a40 <GPIO_Init>

}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40020000 	.word	0x40020000

080003a4 <SPI1_Inits>:

void SPI1_Inits(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
//	SPI_Handle_t SPI1handle;

	SPI1handle.pSPIx = SPI1;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <SPI1_Inits+0x40>)
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <SPI1_Inits+0x44>)
 80003ac:	601a      	str	r2, [r3, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <SPI1_Inits+0x40>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	715a      	strb	r2, [r3, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode= SPI_DEVICE_MODE_SLAVE;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <SPI1_Inits+0x40>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	711a      	strb	r2, [r3, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed= SPI_SCLK_SPEED_DIV4; //generate 8MHz
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <SPI1_Inits+0x40>)
 80003bc:	2201      	movs	r2, #1
 80003be:	719a      	strb	r2, [r3, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <SPI1_Inits+0x40>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	71da      	strb	r2, [r3, #7]
	SPI1handle.SPIConfig.SPI_CPOL= SPI_CPOL_LOW;//default
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <SPI1_Inits+0x40>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	721a      	strb	r2, [r3, #8]
	SPI1handle.SPIConfig.SPI_CPHA= SPI_CPHA_LOW;//default
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <SPI1_Inits+0x40>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	725a      	strb	r2, [r3, #9]
	SPI1handle.SPIConfig.SPI_SSM= SPI_SSM_EN;//software slave management enabled for NSS pin
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SPI1_Inits+0x40>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	729a      	strb	r2, [r3, #10]
	SPI_Init(&SPI1handle);
 80003d8:	4802      	ldr	r0, [pc, #8]	; (80003e4 <SPI1_Inits+0x40>)
 80003da:	f000 fdd1 	bl	8000f80 <SPI_Init>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000084 	.word	0x20000084
 80003e8:	40013000 	.word	0x40013000

080003ec <SPI2_Inits>:

void SPI2_Inits(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0


	SPI2handle.pSPIx = SPI2;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <SPI2_Inits+0x40>)
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <SPI2_Inits+0x44>)
 80003f4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <SPI2_Inits+0x40>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode= SPI_DEVICE_MODE_MASTER;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <SPI2_Inits+0x40>)
 80003fe:	2201      	movs	r2, #1
 8000400:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed= SPI_SCLK_SPEED_DIV4; //generate 8MHz
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <SPI2_Inits+0x40>)
 8000404:	2201      	movs	r2, #1
 8000406:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <SPI2_Inits+0x40>)
 800040a:	2200      	movs	r2, #0
 800040c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL= SPI_CPOL_LOW;//default
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <SPI2_Inits+0x40>)
 8000410:	2200      	movs	r2, #0
 8000412:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA= SPI_CPHA_LOW;//default
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <SPI2_Inits+0x40>)
 8000416:	2200      	movs	r2, #0
 8000418:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM= SPI_SSM_EN;//software slave management enabled for NSS pin
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <SPI2_Inits+0x40>)
 800041c:	2201      	movs	r2, #1
 800041e:	729a      	strb	r2, [r3, #10]
	SPI_Init(&SPI2handle);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <SPI2_Inits+0x40>)
 8000422:	f000 fdad 	bl	8000f80 <SPI_Init>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000a4 	.word	0x200000a4
 8000430:	40003800 	.word	0x40003800

08000434 <SPI2_GPIO_InterruptPinInit>:

void SPI2_GPIO_InterruptPinInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	220c      	movs	r2, #12
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f001 f86b 	bl	800151c <memset>
	spiIntPin.pGPIOx = GPIOD;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SPI2_GPIO_InterruptPinInit+0x50>)
 8000448:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800044a:	2306      	movs	r3, #6
 800044c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800044e:	2304      	movs	r3, #4
 8000450:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000456:	2300      	movs	r3, #0
 8000458:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800045a:	2101      	movs	r1, #1
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <SPI2_GPIO_InterruptPinInit+0x50>)
 800045e:	f000 fa07 	bl	8000870 <GPIO_PeriClockControl>

	GPIO_Init(&spiIntPin);
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f000 faeb 	bl	8000a40 <GPIO_Init>
	//IRQ configuartions
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 800046a:	210f      	movs	r1, #15
 800046c:	2017      	movs	r0, #23
 800046e:	f000 fd07 	bl	8000e80 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000472:	2101      	movs	r1, #1
 8000474:	2017      	movs	r0, #23
 8000476:	f000 fc7f 	bl	8000d78 <GPIO_IRQInterruptConfig>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40020c00 	.word	0x40020c00

08000488 <GPIO_Btn_InterruptPinInit>:

void GPIO_Btn_InterruptPinInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	memset(&GPIOBtn, 0 , sizeof(GPIOBtn));
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	220c      	movs	r2, #12
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f001 f841 	bl	800151c <memset>
	GPIOBtn.pGPIOx = GPIOA;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <GPIO_Btn_InterruptPinInit+0x50>)
 800049c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800049e:	2300      	movs	r3, #0
 80004a0:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80004a2:	2304      	movs	r3, #4
 80004a4:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80004a6:	2302      	movs	r3, #2
 80004a8:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80004aa:	2300      	movs	r3, #0
 80004ac:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA,ENABLE);
 80004ae:	2101      	movs	r1, #1
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <GPIO_Btn_InterruptPinInit+0x50>)
 80004b2:	f000 f9dd 	bl	8000870 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fac1 	bl	8000a40 <GPIO_Init>
	//IRQ configuartions
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI15);
 80004be:	210f      	movs	r1, #15
 80004c0:	2006      	movs	r0, #6
 80004c2:	f000 fcdd 	bl	8000e80 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 80004c6:	2101      	movs	r1, #1
 80004c8:	2006      	movs	r0, #6
 80004ca:	f000 fc55 	bl	8000d78 <GPIO_IRQInterruptConfig>
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020000 	.word	0x40020000

080004dc <main>:
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xFF;
 80004e2:	23ff      	movs	r3, #255	; 0xff
 80004e4:	71fb      	strb	r3, [r7, #7]
//	initialise_monitor_handles();

	printf("Application is running\n");
 80004e6:	4844      	ldr	r0, [pc, #272]	; (80005f8 <main+0x11c>)
 80004e8:	f001 f8a6 	bl	8001638 <puts>

	GPIO_ButtonInit();
 80004ec:	f7ff ff42 	bl	8000374 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80004f0:	f7ff ff12 	bl	8000318 <SPI2_GPIOInits>

	SPI1_GPIOInits();
 80004f4:	f7ff fee2 	bl	80002bc <SPI1_GPIOInits>
	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80004f8:	f7ff ff78 	bl	80003ec <SPI2_Inits>

	SPI1_Inits();
 80004fc:	f7ff ff52 	bl	80003a4 <SPI1_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000500:	2101      	movs	r1, #1
 8000502:	483e      	ldr	r0, [pc, #248]	; (80005fc <main+0x120>)
 8000504:	f000 fdc5 	bl	8001092 <SPI_SSOEConfig>
	SPI_SSOEConfig(SPI1,ENABLE);
 8000508:	2101      	movs	r1, #1
 800050a:	483d      	ldr	r0, [pc, #244]	; (8000600 <main+0x124>)
 800050c:	f000 fdc1 	bl	8001092 <SPI_SSOEConfig>

	SPI2_GPIO_InterruptPinInit();
 8000510:	f7ff ff90 	bl	8000434 <SPI2_GPIO_InterruptPinInit>
	GPIO_Btn_InterruptPinInit();
 8000514:	f7ff ffb8 	bl	8000488 <GPIO_Btn_InterruptPinInit>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 8000518:	2101      	movs	r1, #1
 800051a:	2024      	movs	r0, #36	; 0x24
 800051c:	f000 fdd4 	bl	80010c8 <SPI_IRQInterruptConfig>
	SPI_IRQInterruptConfig(IRQ_NO_SPI1,ENABLE);
 8000520:	2101      	movs	r1, #1
 8000522:	2023      	movs	r0, #35	; 0x23
 8000524:	f000 fdd0 	bl	80010c8 <SPI_IRQInterruptConfig>

	while(1)
	{
		while(!btn_flag);
 8000528:	bf00      	nop
 800052a:	4b36      	ldr	r3, [pc, #216]	; (8000604 <main+0x128>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0fb      	beq.n	800052a <main+0x4e>
		GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,DISABLE);
 8000532:	2100      	movs	r1, #0
 8000534:	2006      	movs	r0, #6
 8000536:	f000 fc1f 	bl	8000d78 <GPIO_IRQInterruptConfig>
		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 800053a:	2100      	movs	r1, #0
 800053c:	2017      	movs	r0, #23
 800053e:	f000 fc1b 	bl	8000d78 <GPIO_IRQInterruptConfig>
		SPI_PeripheralControl(SPI2,ENABLE);
 8000542:	2101      	movs	r1, #1
 8000544:	482d      	ldr	r0, [pc, #180]	; (80005fc <main+0x120>)
 8000546:	f000 fd89 	bl	800105c <SPI_PeripheralControl>
		SPI_PeripheralControl(SPI1,ENABLE);
 800054a:	2101      	movs	r1, #1
 800054c:	482c      	ldr	r0, [pc, #176]	; (8000600 <main+0x124>)
 800054e:	f000 fd85 	bl	800105c <SPI_PeripheralControl>

		while(!dataAvailable);
 8000552:	bf00      	nop
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <main+0x12c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0fa      	beq.n	8000554 <main+0x78>

		printf("send\n");
 800055e:	482b      	ldr	r0, [pc, #172]	; (800060c <main+0x130>)
 8000560:	f001 f86a 	bl	8001638 <puts>
		while(SPI_SendDataIT(&SPI2handle,&commandcode, 1) == SPI_BUSY_IN_TX);
 8000564:	bf00      	nop
 8000566:	2201      	movs	r2, #1
 8000568:	4929      	ldr	r1, [pc, #164]	; (8000610 <main+0x134>)
 800056a:	482a      	ldr	r0, [pc, #168]	; (8000614 <main+0x138>)
 800056c:	f000 fe30 	bl	80011d0 <SPI_SendDataIT>
 8000570:	4603      	mov	r3, r0
 8000572:	2b02      	cmp	r3, #2
 8000574:	d0f7      	beq.n	8000566 <main+0x8a>
//		SPI_SendData(SPI1,&dummy_write,1);
//		SPI_ReceiveData(SPI1,&slave_rx,1);
		printf("rx %x\n",slave_rx);
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <main+0x13c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	4827      	ldr	r0, [pc, #156]	; (800061c <main+0x140>)
 8000580:	f000 ffd4 	bl	800152c <iprintf>
		while(SPI_SendDataIT(&SPI1handle,&dummy_write, 1) == SPI_BUSY_IN_TX);
 8000584:	bf00      	nop
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	4824      	ldr	r0, [pc, #144]	; (8000620 <main+0x144>)
 800058e:	f000 fe1f 	bl	80011d0 <SPI_SendDataIT>
 8000592:	4603      	mov	r3, r0
 8000594:	2b02      	cmp	r3, #2
 8000596:	d0f6      	beq.n	8000586 <main+0xaa>
		while(SPI_ReceiveDataIT(&SPI1handle,&slave_rx, 1) == SPI_BUSY_IN_RX);
 8000598:	bf00      	nop
 800059a:	2201      	movs	r2, #1
 800059c:	491e      	ldr	r1, [pc, #120]	; (8000618 <main+0x13c>)
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <main+0x144>)
 80005a0:	f000 fe3a 	bl	8001218 <SPI_ReceiveDataIT>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d0f7      	beq.n	800059a <main+0xbe>
////			SPI_SendData(SPI1,&dummy_write,1);
////			SPI_ReceiveData(SPI1,&slave_rx,1);
////			printf("slave_rx %x\n",slave_rx);
//			GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,ENABLE);
//		}
		btn_flag = 0;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x128>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
		dataAvailable = 0;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <main+0x12c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]

		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80005b6:	bf00      	nop
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0x120>)
 80005bc:	f000 fd3b 	bl	8001036 <SPI_GetFlagStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1f8      	bne.n	80005b8 <main+0xdc>
		while( SPI_GetFlagStatus(SPI1,SPI_BUSY_FLAG) );
 80005c6:	bf00      	nop
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <main+0x124>)
 80005cc:	f000 fd33 	bl	8001036 <SPI_GetFlagStatus>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f8      	bne.n	80005c8 <main+0xec>
		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80005d6:	2100      	movs	r1, #0
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <main+0x120>)
 80005da:	f000 fd3f 	bl	800105c <SPI_PeripheralControl>
		SPI_PeripheralControl(SPI1,DISABLE);
 80005de:	2100      	movs	r1, #0
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <main+0x124>)
 80005e2:	f000 fd3b 	bl	800105c <SPI_PeripheralControl>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,ENABLE);
 80005e6:	2101      	movs	r1, #1
 80005e8:	2006      	movs	r0, #6
 80005ea:	f000 fbc5 	bl	8000d78 <GPIO_IRQInterruptConfig>
		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 80005ee:	2101      	movs	r1, #1
 80005f0:	2017      	movs	r0, #23
 80005f2:	f000 fbc1 	bl	8000d78 <GPIO_IRQInterruptConfig>
		while(!btn_flag);
 80005f6:	e797      	b.n	8000528 <main+0x4c>
 80005f8:	0800253c 	.word	0x0800253c
 80005fc:	40003800 	.word	0x40003800
 8000600:	40013000 	.word	0x40013000
 8000604:	200000c6 	.word	0x200000c6
 8000608:	200000c5 	.word	0x200000c5
 800060c:	08002554 	.word	0x08002554
 8000610:	20000000 	.word	0x20000000
 8000614:	200000a4 	.word	0x200000a4
 8000618:	200000c4 	.word	0x200000c4
 800061c:	0800255c 	.word	0x0800255c
 8000620:	20000084 	.word	0x20000084

08000624 <SPI2_IRQHandler>:
	return 0;
}


void SPI2_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	printf("spi2 irq\n");
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <SPI2_IRQHandler+0x14>)
 800062a:	f001 f805 	bl	8001638 <puts>
	SPI_IRQHandling(&SPI2handle);
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <SPI2_IRQHandler+0x18>)
 8000630:	f000 fe1a 	bl	8001268 <SPI_IRQHandling>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08002564 	.word	0x08002564
 800063c:	200000a4 	.word	0x200000a4

08000640 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	printf("spi1 irq\n");
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <SPI1_IRQHandler+0x14>)
 8000646:	f000 fff7 	bl	8001638 <puts>
	SPI_IRQHandling(&SPI1handle);
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <SPI1_IRQHandler+0x18>)
 800064c:	f000 fe0c 	bl	8001268 <SPI_IRQHandling>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08002570 	.word	0x08002570
 8000658:	20000084 	.word	0x20000084

0800065c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)//ISR
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	delay();
 8000660:	f7ff fe16 	bl	8000290 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0); //clear the pending event from EXTI line
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fc35 	bl	8000ed4 <GPIO_IRQHandling>
	btn_flag = 1;
 800066a:	4b02      	ldr	r3, [pc, #8]	; (8000674 <EXTI0_IRQHandler+0x18>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
//	SPI_SendData(SPI2,&commandcode,1);
//	SPI_SendData(SPI1,&dummy_write,1);
//	SPI_ReceiveData(SPI1,&slave_rx,1);
//	while(SPI_SendDataIT(&SPI2handle,&commandcode, 1) == SPI_BUSY_IN_TX);
//	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000c6 	.word	0x200000c6

08000678 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)//ISR
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6); //clear the pending event from EXTI line
 800067c:	2006      	movs	r0, #6
 800067e:	f000 fc29 	bl	8000ed4 <GPIO_IRQHandling>
	dataAvailable = 1;
 8000682:	4b02      	ldr	r3, [pc, #8]	; (800068c <EXTI9_5_IRQHandler+0x14>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000c5 	.word	0x200000c5

08000690 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <ITM_SendChar+0x44>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <ITM_SendChar+0x44>)
 80006a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <ITM_SendChar+0x48>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <ITM_SendChar+0x48>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006b2:	bf00      	nop
 80006b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f8      	beq.n	80006b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80006c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	e000edfc 	.word	0xe000edfc
 80006d8:	e0000e00 	.word	0xe0000e00

080006dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e00a      	b.n	8000704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006ee:	f3af 8000 	nop.w
 80006f2:	4601      	mov	r1, r0
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	60ba      	str	r2, [r7, #8]
 80006fa:	b2ca      	uxtb	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf0      	blt.n	80006ee <_read+0x12>
	}

return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e009      	b.n	800073c <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	60ba      	str	r2, [r7, #8]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffad 	bl	8000690 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3301      	adds	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	dbf1      	blt.n	8000728 <_write+0x12>
	}
	return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_close>:

int _close(int file)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	return -1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000774:	605a      	str	r2, [r3, #4]
	return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <_isatty>:

int _isatty(int file)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	return 1;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000796:	b480      	push	{r7}
 8000798:	b085      	sub	sp, #20
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
	return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <_sbrk+0x5c>)
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <_sbrk+0x60>)
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <_sbrk+0x64>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <_sbrk+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d207      	bcs.n	80007f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e0:	f000 fe72 	bl	80014c8 <__errno>
 80007e4:	4603      	mov	r3, r0
 80007e6:	220c      	movs	r2, #12
 80007e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e009      	b.n	8000804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_sbrk+0x64>)
 8000800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20020000 	.word	0x20020000
 8000810:	00000400 	.word	0x00000400
 8000814:	200000c8 	.word	0x200000c8
 8000818:	200000e0 	.word	0x200000e0

0800081c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000820:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084a:	f000 fe43 	bl	80014d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fe45 	bl	80004dc <main>

08000852 <LoopForever>:

LoopForever:
    b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000860:	08002634 	.word	0x08002634
  ldr r2, =_sbss
 8000864:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000868:	200000dc 	.word	0x200000dc

0800086c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC_IRQHandler>
	...

08000870 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d162      	bne.n	8000948 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a64      	ldr	r2, [pc, #400]	; (8000a18 <GPIO_PeriClockControl+0x1a8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800088a:	4b64      	ldr	r3, [pc, #400]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a63      	ldr	r2, [pc, #396]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 8000896:	e0b9      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a61      	ldr	r2, [pc, #388]	; (8000a20 <GPIO_PeriClockControl+0x1b0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80008a0:	4b5e      	ldr	r3, [pc, #376]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a5d      	ldr	r2, [pc, #372]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ac:	e0ae      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a5c      	ldr	r2, [pc, #368]	; (8000a24 <GPIO_PeriClockControl+0x1b4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80008b6:	4b59      	ldr	r3, [pc, #356]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a58      	ldr	r2, [pc, #352]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c2:	e0a3      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a58      	ldr	r2, [pc, #352]	; (8000a28 <GPIO_PeriClockControl+0x1b8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80008cc:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a52      	ldr	r2, [pc, #328]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d8:	e098      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a53      	ldr	r2, [pc, #332]	; (8000a2c <GPIO_PeriClockControl+0x1bc>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4d      	ldr	r2, [pc, #308]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ee:	e08d      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <GPIO_PeriClockControl+0x1c0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80008f8:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80008fe:	f043 0320 	orr.w	r3, r3, #32
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000904:	e082      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a4a      	ldr	r2, [pc, #296]	; (8000a34 <GPIO_PeriClockControl+0x1c4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800090e:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a42      	ldr	r2, [pc, #264]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
}
 800091a:	e077      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <GPIO_PeriClockControl+0x1c8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a3c      	ldr	r2, [pc, #240]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000930:	e06c      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <GPIO_PeriClockControl+0x1cc>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d168      	bne.n	8000a0c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000946:	e061      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a33      	ldr	r2, [pc, #204]	; (8000a18 <GPIO_PeriClockControl+0x1a8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000956:	f023 0301 	bic.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095c:	e056      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a2f      	ldr	r2, [pc, #188]	; (8000a20 <GPIO_PeriClockControl+0x1b0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 800096c:	f023 0302 	bic.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000972:	e04b      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <GPIO_PeriClockControl+0x1b4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000982:	f023 0304 	bic.w	r3, r3, #4
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000988:	e040      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <GPIO_PeriClockControl+0x1b8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000998:	f023 0308 	bic.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099e:	e035      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <GPIO_PeriClockControl+0x1bc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d106      	bne.n	80009b6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009ae:	f023 0310 	bic.w	r3, r3, #16
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b4:	e02a      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <GPIO_PeriClockControl+0x1c0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009c4:	f023 0320 	bic.w	r3, r3, #32
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ca:	e01f      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <GPIO_PeriClockControl+0x1c4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e0:	e014      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <GPIO_PeriClockControl+0x1c8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 80009f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f6:	e009      	b.n	8000a0c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <GPIO_PeriClockControl+0x1cc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d105      	bne.n	8000a0c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <GPIO_PeriClockControl+0x1ac>)
 8000a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40021400 	.word	0x40021400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	40021c00 	.word	0x40021c00
 8000a3c:	40022000 	.word	0x40022000

08000a40 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff0c 	bl	8000870 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	795b      	ldrb	r3, [r3, #5]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d820      	bhi.n	8000aa2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	795b      	ldrb	r3, [r3, #5]
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	791b      	ldrb	r3, [r3, #4]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2103      	movs	r1, #3
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6819      	ldr	r1, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e0cb      	b.n	8000c3a <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d117      	bne.n	8000ada <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <GPIO_Init+0x198>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	7912      	ldrb	r2, [r2, #4]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	408a      	lsls	r2, r1
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4a47      	ldr	r2, [pc, #284]	; (8000bd8 <GPIO_Init+0x198>)
 8000abc:	430b      	orrs	r3, r1
 8000abe:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ac0:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <GPIO_Init+0x198>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	7912      	ldrb	r2, [r2, #4]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	2201      	movs	r2, #1
 8000acc:	408a      	lsls	r2, r1
 8000ace:	43d2      	mvns	r2, r2
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a41      	ldr	r2, [pc, #260]	; (8000bd8 <GPIO_Init+0x198>)
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	6093      	str	r3, [r2, #8]
 8000ad8:	e035      	b.n	8000b46 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	795b      	ldrb	r3, [r3, #5]
 8000ade:	2b05      	cmp	r3, #5
 8000ae0:	d117      	bne.n	8000b12 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <GPIO_Init+0x198>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	7912      	ldrb	r2, [r2, #4]
 8000aea:	4611      	mov	r1, r2
 8000aec:	2201      	movs	r2, #1
 8000aee:	408a      	lsls	r2, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a39      	ldr	r2, [pc, #228]	; (8000bd8 <GPIO_Init+0x198>)
 8000af4:	430b      	orrs	r3, r1
 8000af6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <GPIO_Init+0x198>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	7912      	ldrb	r2, [r2, #4]
 8000b00:	4611      	mov	r1, r2
 8000b02:	2201      	movs	r2, #1
 8000b04:	408a      	lsls	r2, r1
 8000b06:	43d2      	mvns	r2, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <GPIO_Init+0x198>)
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	60d3      	str	r3, [r2, #12]
 8000b10:	e019      	b.n	8000b46 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	795b      	ldrb	r3, [r3, #5]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d115      	bne.n	8000b46 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <GPIO_Init+0x198>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	7912      	ldrb	r2, [r2, #4]
 8000b22:	4611      	mov	r1, r2
 8000b24:	2201      	movs	r2, #1
 8000b26:	408a      	lsls	r2, r1
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4a2b      	ldr	r2, [pc, #172]	; (8000bd8 <GPIO_Init+0x198>)
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <GPIO_Init+0x198>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	7912      	ldrb	r2, [r2, #4]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	408a      	lsls	r2, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <GPIO_Init+0x198>)
 8000b42:	430b      	orrs	r3, r1
 8000b44:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <GPIO_Init+0x19c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d04e      	beq.n	8000c00 <GPIO_Init+0x1c0>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <GPIO_Init+0x1a0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d032      	beq.n	8000bd2 <GPIO_Init+0x192>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <GPIO_Init+0x1a4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d02b      	beq.n	8000bce <GPIO_Init+0x18e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <GPIO_Init+0x1a8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d024      	beq.n	8000bca <GPIO_Init+0x18a>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <GPIO_Init+0x1ac>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01d      	beq.n	8000bc6 <GPIO_Init+0x186>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <GPIO_Init+0x1b0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d016      	beq.n	8000bc2 <GPIO_Init+0x182>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <GPIO_Init+0x1b4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d00f      	beq.n	8000bbe <GPIO_Init+0x17e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <GPIO_Init+0x1b8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d008      	beq.n	8000bba <GPIO_Init+0x17a>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <GPIO_Init+0x1bc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <GPIO_Init+0x176>
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	e025      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e023      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bba:	2307      	movs	r3, #7
 8000bbc:	e021      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	e01f      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	e01d      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	e01b      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e019      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e017      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e015      	b.n	8000c02 <GPIO_Init+0x1c2>
 8000bd6:	bf00      	nop
 8000bd8:	40013c00 	.word	0x40013c00
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40021c00 	.word	0x40021c00
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	2300      	movs	r3, #0
 8000c02:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <GPIO_Init+0x32c>)
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	4a58      	ldr	r2, [pc, #352]	; (8000d6c <GPIO_Init+0x32c>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000c10:	7c7a      	ldrb	r2, [r7, #17]
 8000c12:	7cbb      	ldrb	r3, [r7, #18]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fa02 f103 	lsl.w	r1, r2, r3
 8000c1a:	4a55      	ldr	r2, [pc, #340]	; (8000d70 <GPIO_Init+0x330>)
 8000c1c:	7cfb      	ldrb	r3, [r7, #19]
 8000c1e:	3302      	adds	r3, #2
 8000c20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c24:	4b53      	ldr	r3, [pc, #332]	; (8000d74 <GPIO_Init+0x334>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	7912      	ldrb	r2, [r2, #4]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	2201      	movs	r2, #1
 8000c30:	408a      	lsls	r2, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	4a4f      	ldr	r2, [pc, #316]	; (8000d74 <GPIO_Init+0x334>)
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	799b      	ldrb	r3, [r3, #6]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2103      	movs	r1, #3
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	400a      	ands	r2, r1
 8000c68:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6899      	ldr	r1, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	79db      	ldrb	r3, [r3, #7]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	791b      	ldrb	r3, [r3, #4]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2103      	movs	r1, #3
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68d9      	ldr	r1, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	791b      	ldrb	r3, [r3, #4]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6859      	ldr	r1, [r3, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	795b      	ldrb	r3, [r3, #5]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d131      	bne.n	8000d62 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	791b      	ldrb	r3, [r3, #4]
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	7c3a      	ldrb	r2, [r7, #16]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	7c3a      	ldrb	r2, [r7, #16]
 8000d30:	4001      	ands	r1, r0
 8000d32:	3208      	adds	r2, #8
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	7c3a      	ldrb	r2, [r7, #16]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a5b      	ldrb	r3, [r3, #9]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	7c3a      	ldrb	r2, [r7, #16]
 8000d5a:	4301      	orrs	r1, r0
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40013c00 	.word	0x40013c00

08000d78 <GPIO_IRQInterruptConfig>:
 *
 * @Note              -

 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d133      	bne.n	8000df6 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b1f      	cmp	r3, #31
 8000d92:	d80a      	bhi.n	8000daa <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <GPIO_IRQInterruptConfig+0xf0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	79fa      	ldrb	r2, [r7, #7]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4611      	mov	r1, r2
 8000da2:	4a31      	ldr	r2, [pc, #196]	; (8000e68 <GPIO_IRQInterruptConfig+0xf0>)
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000da8:	e059      	b.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b1f      	cmp	r3, #31
 8000dae:	d90f      	bls.n	8000dd0 <GPIO_IRQInterruptConfig+0x58>
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b3f      	cmp	r3, #63	; 0x3f
 8000db4:	d80c      	bhi.n	8000dd0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <GPIO_IRQInterruptConfig+0xf4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	f002 021f 	and.w	r2, r2, #31
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <GPIO_IRQInterruptConfig+0xf4>)
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e046      	b.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd4:	d943      	bls.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b5f      	cmp	r3, #95	; 0x5f
 8000dda:	d840      	bhi.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <GPIO_IRQInterruptConfig+0xf8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	4611      	mov	r1, r2
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <GPIO_IRQInterruptConfig+0xf8>)
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	e033      	b.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b1f      	cmp	r3, #31
 8000dfa:	d80a      	bhi.n	8000e12 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <GPIO_IRQInterruptConfig+0xfc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <GPIO_IRQInterruptConfig+0xfc>)
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	e025      	b.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b1f      	cmp	r3, #31
 8000e16:	d90f      	bls.n	8000e38 <GPIO_IRQInterruptConfig+0xc0>
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e1c:	d80c      	bhi.n	8000e38 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <GPIO_IRQInterruptConfig+0x100>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	f002 021f 	and.w	r2, r2, #31
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <GPIO_IRQInterruptConfig+0x100>)
 8000e32:	430b      	orrs	r3, r1
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e012      	b.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e3c:	d90f      	bls.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b5f      	cmp	r3, #95	; 0x5f
 8000e42:	d80c      	bhi.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <GPIO_IRQInterruptConfig+0x104>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <GPIO_IRQInterruptConfig+0x104>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	e7ff      	b.n	8000e5e <GPIO_IRQInterruptConfig+0xe6>
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000e104 	.word	0xe000e104
 8000e70:	e000e108 	.word	0xe000e108
 8000e74:	e000e180 	.word	0xe000e180
 8000e78:	e000e184 	.word	0xe000e184
 8000e7c:	e000e188 	.word	0xe000e188

08000e80 <GPIO_IRQPriorityConfig>:
 *
 * @Note              -

 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000eac:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	7b7b      	ldrb	r3, [r7, #13]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ec0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]

}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <GPIO_IRQHandling>:
 *
 * @Note              -

 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <GPIO_IRQHandling+0x3c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	79fa      	ldrb	r2, [r7, #7]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d009      	beq.n	8000f04 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <GPIO_IRQHandling+0x3c>)
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <GPIO_IRQHandling+0x3c>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6153      	str	r3, [r2, #20]
	}

}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d11f      	bne.n	8000f66 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <SPI_PeriClockControl+0x5c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d106      	bne.n	8000f3c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <SPI_PeriClockControl+0x60>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <SPI_PeriClockControl+0x60>)
 8000f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
	}
//	else
//	{
//		//TODO
//	}
}
 8000f3a:	e014      	b.n	8000f66 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <SPI_PeriClockControl+0x64>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d106      	bne.n	8000f52 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <SPI_PeriClockControl+0x60>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SPI_PeriClockControl+0x60>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f50:	e009      	b.n	8000f66 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <SPI_PeriClockControl+0x68>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d105      	bne.n	8000f66 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SPI_PeriClockControl+0x60>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SPI_PeriClockControl+0x60>)
 8000f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40003800 	.word	0x40003800
 8000f7c:	40003c00 	.word	0x40003c00

08000f80 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffc0 	bl	8000f14 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	795b      	ldrb	r3, [r3, #5]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d104      	bne.n	8000fb8 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e014      	b.n	8000fe2 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	795b      	ldrb	r3, [r3, #5]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d104      	bne.n	8000fca <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e00b      	b.n	8000fe2 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	795b      	ldrb	r3, [r3, #5]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d107      	bne.n	8000fe2 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fd8:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe0:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	799b      	ldrb	r3, [r3, #6]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	79db      	ldrb	r3, [r3, #7]
 8000ff4:	02db      	lsls	r3, r3, #11
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	461a      	mov	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a5b      	ldrb	r3, [r3, #9]
 8001010:	461a      	mov	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7a9b      	ldrb	r3, [r3, #10]
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	601a      	str	r2, [r3, #0]

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d106      	bne.n	800107c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 800107a:	e005      	b.n	8001088 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d106      	bne.n	80010b2 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f043 0204 	orr.w	r2, r3, #4
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80010b0:	e005      	b.n	80010be <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f023 0204 	bic.w	r2, r3, #4
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	605a      	str	r2, [r3, #4]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SPI_IRQInterruptConfig>:
 *
 * @Note              -

 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d133      	bne.n	8001146 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b1f      	cmp	r3, #31
 80010e2:	d80a      	bhi.n	80010fa <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <SPI_IRQInterruptConfig+0xf0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	4611      	mov	r1, r2
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <SPI_IRQInterruptConfig+0xf0>)
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80010f8:	e059      	b.n	80011ae <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	d90f      	bls.n	8001120 <SPI_IRQInterruptConfig+0x58>
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b3f      	cmp	r3, #63	; 0x3f
 8001104:	d80c      	bhi.n	8001120 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <SPI_IRQInterruptConfig+0xf4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	79fa      	ldrb	r2, [r7, #7]
 800110c:	f002 021f 	and.w	r2, r2, #31
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	4611      	mov	r1, r2
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <SPI_IRQInterruptConfig+0xf4>)
 800111a:	430b      	orrs	r3, r1
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e046      	b.n	80011ae <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b3f      	cmp	r3, #63	; 0x3f
 8001124:	d943      	bls.n	80011ae <SPI_IRQInterruptConfig+0xe6>
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b5f      	cmp	r3, #95	; 0x5f
 800112a:	d840      	bhi.n	80011ae <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <SPI_IRQInterruptConfig+0xf8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	79fa      	ldrb	r2, [r7, #7]
 8001132:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4611      	mov	r1, r2
 800113e:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <SPI_IRQInterruptConfig+0xf8>)
 8001140:	430b      	orrs	r3, r1
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	e033      	b.n	80011ae <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b1f      	cmp	r3, #31
 800114a:	d80a      	bhi.n	8001162 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <SPI_IRQInterruptConfig+0xfc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	4611      	mov	r1, r2
 800115a:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <SPI_IRQInterruptConfig+0xfc>)
 800115c:	430b      	orrs	r3, r1
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	e025      	b.n	80011ae <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b1f      	cmp	r3, #31
 8001166:	d90f      	bls.n	8001188 <SPI_IRQInterruptConfig+0xc0>
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b3f      	cmp	r3, #63	; 0x3f
 800116c:	d80c      	bhi.n	8001188 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <SPI_IRQInterruptConfig+0x100>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	f002 021f 	and.w	r2, r2, #31
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	4611      	mov	r1, r2
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <SPI_IRQInterruptConfig+0x100>)
 8001182:	430b      	orrs	r3, r1
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e012      	b.n	80011ae <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d90f      	bls.n	80011ae <SPI_IRQInterruptConfig+0xe6>
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b5f      	cmp	r3, #95	; 0x5f
 8001192:	d80c      	bhi.n	80011ae <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <SPI_IRQInterruptConfig+0x104>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	79fa      	ldrb	r2, [r7, #7]
 800119a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4611      	mov	r1, r2
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <SPI_IRQInterruptConfig+0x104>)
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	e7ff      	b.n	80011ae <SPI_IRQInterruptConfig+0xe6>
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000e104 	.word	0xe000e104
 80011c0:	e000e10c 	.word	0xe000e10c
 80011c4:	e000e180 	.word	0xe000e180
 80011c8:	e000e184 	.word	0xe000e184
 80011cc:	e000e18c 	.word	0xe000e18c

080011d0 <SPI_SendDataIT>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TxState;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	7f1b      	ldrb	r3, [r3, #28]
 80011e0:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d010      	beq.n	800120a <SPI_SendDataIT+0x3a>
	{
		// 1. save the Tx buffer address and Len information in some global variable(SPI_Handle_t)
		pSPIHandle->pTxBuffer = pTxBuffer;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	615a      	str	r2, [r3, #20]

		// 2. Mark the SPI state as busy in transmission so that
		// no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2202      	movs	r2, #2
 80011f8:	771a      	strb	r2, [r3, #28]

		// 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001208:	605a      	str	r2, [r3, #4]
		// 4. Data Transmission will be handled by the ISR mode (will implement later)
	}

	return state;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
	...

08001218 <SPI_ReceiveDataIT>:

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	7f5b      	ldrb	r3, [r3, #29]
 8001228:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d013      	beq.n	8001258 <SPI_ReceiveDataIT+0x40>
	{
		printf("rcit\n");
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <SPI_ReceiveDataIT+0x4c>)
 8001232:	f000 fa01 	bl	8001638 <puts>
		// 1. save the Rx buffer address and Len information in some global variable(SPI_Handle_t)
		pSPIHandle->pRxBuffer = pRxBuffer;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]

		// 2. Mark the SPI state as busy in transmission so that
		// no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	775a      	strb	r2, [r3, #29]

		// 3. Enable the TXEIE control bit to get interrupt whenever RXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001256:	605a      	str	r2, [r3, #4]
		// 4. Data Transmission will be handled by the ISR mode (will implement later)
	}

	return state;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	08002584 	.word	0x08002584

08001268 <SPI_IRQHandling>:
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	uint8_t cond1, cond2;

	cond1 = pHandle->pSPIx->SR  & (1<<SPI_SR_TXE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	73fb      	strb	r3, [r7, #15]
	cond2 = pHandle->pSPIx->CR2 & (1<<SPI_CR2_TXEIE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800128a:	73bb      	strb	r3, [r7, #14]

	if(cond1 && cond2)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d008      	beq.n	80012a4 <SPI_IRQHandling+0x3c>
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <SPI_IRQHandling+0x3c>
	{
		printf("tx\n");
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <SPI_IRQHandling+0xa8>)
 800129a:	f000 f9cd 	bl	8001638 <puts>
		//handle txe
		spi_txe_interrupt_handle(pHandle);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f83a 	bl	8001318 <spi_txe_interrupt_handle>
	}

	cond1 = pHandle->pSPIx->SR  & (1<<SPI_SR_RXNE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
	cond2 = pHandle->pSPIx->CR2 & (1<<SPI_CR2_RXNEIE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012be:	73bb      	strb	r3, [r7, #14]

	if(cond1 && cond2)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d008      	beq.n	80012d8 <SPI_IRQHandling+0x70>
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <SPI_IRQHandling+0x70>
	{
		printf("rx\n");
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <SPI_IRQHandling+0xac>)
 80012ce:	f000 f9b3 	bl	8001638 <puts>
		spi_rxne_interrupt_handle(pHandle);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f860 	bl	8001398 <spi_rxne_interrupt_handle>
	}

	cond1 = pHandle->pSPIx->SR  & (1<<SPI_SR_OVR);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e4:	73fb      	strb	r3, [r7, #15]
	cond2 = pHandle->pSPIx->CR2 & (1<<SPI_CR2_ERRIE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	73bb      	strb	r3, [r7, #14]

	if(cond1 && cond2)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <SPI_IRQHandling+0x9e>
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <SPI_IRQHandling+0x9e>
	{
		spi_ovr_err_interrupt_handle(pHandle);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f889 	bl	8001418 <spi_ovr_err_interrupt_handle>
	}
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	0800258c 	.word	0x0800258c
 8001314:	08002590 	.word	0x08002590

08001318 <spi_txe_interrupt_handle>:


static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	//check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	e00f      	b.n	800137a <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	1e5a      	subs	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60da      	str	r2, [r3, #12]
	}

	if(pSPIHandle->TxLen == 0)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero, so close the spi transmission and inform the application that
		//Tx is over

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f860 	bl	8001448 <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8001388:	2101      	movs	r1, #1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f890 	bl	80014b0 <SPI_ApplicationEventCallback>
	}
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	//check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d015      	beq.n	80013da <spi_rxne_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pRxBuffer);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60da      	str	r2, [r3, #12]
		pSPIHandle->RxLen--;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
		pSPIHandle->RxLen--;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
		(uint16_t*)pSPIHandle->pRxBuffer++;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	e00f      	b.n	80013fa <spi_rxne_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR = *pSPIHandle->pRxBuffer;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60da      	str	r2, [r3, #12]
		pSPIHandle->RxLen--;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
	}

	if(pSPIHandle->RxLen == 0)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <spi_rxne_interrupt_handle+0x78>
	{
		//TxLen is zero, so close the spi transmission and inform the application that
		//Tx is over

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseReception(pSPIHandle);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f83a 	bl	800147c <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8001408:	2102      	movs	r1, #2
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f850 	bl	80014b0 <SPI_ApplicationEventCallback>
	}
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f1b      	ldrb	r3, [r3, #28]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d007      	beq.n	8001438 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	//If SPI is busy in Tx and over error happens ，application should clear ovr flag on its own
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001438:	2103      	movs	r1, #3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f838 	bl	80014b0 <SPI_ApplicationEventCallback>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <SPI_CloseTransmisson>:

void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800145e:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	771a      	strb	r2, [r3, #28]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001492:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	775a      	strb	r2, [r3, #29]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SPI_ApplicationEventCallback>:
	(void)temp;
}


__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
	//This is a weak implemenation, the user application may override this function
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <__errno>:
 80014c8:	4b01      	ldr	r3, [pc, #4]	; (80014d0 <__errno+0x8>)
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000004 	.word	0x20000004

080014d4 <__libc_init_array>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	4d0d      	ldr	r5, [pc, #52]	; (800150c <__libc_init_array+0x38>)
 80014d8:	4c0d      	ldr	r4, [pc, #52]	; (8001510 <__libc_init_array+0x3c>)
 80014da:	1b64      	subs	r4, r4, r5
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	2600      	movs	r6, #0
 80014e0:	42a6      	cmp	r6, r4
 80014e2:	d109      	bne.n	80014f8 <__libc_init_array+0x24>
 80014e4:	4d0b      	ldr	r5, [pc, #44]	; (8001514 <__libc_init_array+0x40>)
 80014e6:	4c0c      	ldr	r4, [pc, #48]	; (8001518 <__libc_init_array+0x44>)
 80014e8:	f001 f81c 	bl	8002524 <_init>
 80014ec:	1b64      	subs	r4, r4, r5
 80014ee:	10a4      	asrs	r4, r4, #2
 80014f0:	2600      	movs	r6, #0
 80014f2:	42a6      	cmp	r6, r4
 80014f4:	d105      	bne.n	8001502 <__libc_init_array+0x2e>
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014fc:	4798      	blx	r3
 80014fe:	3601      	adds	r6, #1
 8001500:	e7ee      	b.n	80014e0 <__libc_init_array+0xc>
 8001502:	f855 3b04 	ldr.w	r3, [r5], #4
 8001506:	4798      	blx	r3
 8001508:	3601      	adds	r6, #1
 800150a:	e7f2      	b.n	80014f2 <__libc_init_array+0x1e>
 800150c:	0800262c 	.word	0x0800262c
 8001510:	0800262c 	.word	0x0800262c
 8001514:	0800262c 	.word	0x0800262c
 8001518:	08002630 	.word	0x08002630

0800151c <memset>:
 800151c:	4402      	add	r2, r0
 800151e:	4603      	mov	r3, r0
 8001520:	4293      	cmp	r3, r2
 8001522:	d100      	bne.n	8001526 <memset+0xa>
 8001524:	4770      	bx	lr
 8001526:	f803 1b01 	strb.w	r1, [r3], #1
 800152a:	e7f9      	b.n	8001520 <memset+0x4>

0800152c <iprintf>:
 800152c:	b40f      	push	{r0, r1, r2, r3}
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <iprintf+0x2c>)
 8001530:	b513      	push	{r0, r1, r4, lr}
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	b124      	cbz	r4, 8001540 <iprintf+0x14>
 8001536:	69a3      	ldr	r3, [r4, #24]
 8001538:	b913      	cbnz	r3, 8001540 <iprintf+0x14>
 800153a:	4620      	mov	r0, r4
 800153c:	f000 fa5a 	bl	80019f4 <__sinit>
 8001540:	ab05      	add	r3, sp, #20
 8001542:	9a04      	ldr	r2, [sp, #16]
 8001544:	68a1      	ldr	r1, [r4, #8]
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	4620      	mov	r0, r4
 800154a:	f000 fc5f 	bl	8001e0c <_vfiprintf_r>
 800154e:	b002      	add	sp, #8
 8001550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001554:	b004      	add	sp, #16
 8001556:	4770      	bx	lr
 8001558:	20000004 	.word	0x20000004

0800155c <_puts_r>:
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	460e      	mov	r6, r1
 8001560:	4605      	mov	r5, r0
 8001562:	b118      	cbz	r0, 800156c <_puts_r+0x10>
 8001564:	6983      	ldr	r3, [r0, #24]
 8001566:	b90b      	cbnz	r3, 800156c <_puts_r+0x10>
 8001568:	f000 fa44 	bl	80019f4 <__sinit>
 800156c:	69ab      	ldr	r3, [r5, #24]
 800156e:	68ac      	ldr	r4, [r5, #8]
 8001570:	b913      	cbnz	r3, 8001578 <_puts_r+0x1c>
 8001572:	4628      	mov	r0, r5
 8001574:	f000 fa3e 	bl	80019f4 <__sinit>
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <_puts_r+0xd0>)
 800157a:	429c      	cmp	r4, r3
 800157c:	d120      	bne.n	80015c0 <_puts_r+0x64>
 800157e:	686c      	ldr	r4, [r5, #4]
 8001580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001582:	07db      	lsls	r3, r3, #31
 8001584:	d405      	bmi.n	8001592 <_puts_r+0x36>
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	0598      	lsls	r0, r3, #22
 800158a:	d402      	bmi.n	8001592 <_puts_r+0x36>
 800158c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800158e:	f000 facf 	bl	8001b30 <__retarget_lock_acquire_recursive>
 8001592:	89a3      	ldrh	r3, [r4, #12]
 8001594:	0719      	lsls	r1, r3, #28
 8001596:	d51d      	bpl.n	80015d4 <_puts_r+0x78>
 8001598:	6923      	ldr	r3, [r4, #16]
 800159a:	b1db      	cbz	r3, 80015d4 <_puts_r+0x78>
 800159c:	3e01      	subs	r6, #1
 800159e:	68a3      	ldr	r3, [r4, #8]
 80015a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60a3      	str	r3, [r4, #8]
 80015a8:	bb39      	cbnz	r1, 80015fa <_puts_r+0x9e>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da38      	bge.n	8001620 <_puts_r+0xc4>
 80015ae:	4622      	mov	r2, r4
 80015b0:	210a      	movs	r1, #10
 80015b2:	4628      	mov	r0, r5
 80015b4:	f000 f848 	bl	8001648 <__swbuf_r>
 80015b8:	3001      	adds	r0, #1
 80015ba:	d011      	beq.n	80015e0 <_puts_r+0x84>
 80015bc:	250a      	movs	r5, #10
 80015be:	e011      	b.n	80015e4 <_puts_r+0x88>
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <_puts_r+0xd4>)
 80015c2:	429c      	cmp	r4, r3
 80015c4:	d101      	bne.n	80015ca <_puts_r+0x6e>
 80015c6:	68ac      	ldr	r4, [r5, #8]
 80015c8:	e7da      	b.n	8001580 <_puts_r+0x24>
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <_puts_r+0xd8>)
 80015cc:	429c      	cmp	r4, r3
 80015ce:	bf08      	it	eq
 80015d0:	68ec      	ldreq	r4, [r5, #12]
 80015d2:	e7d5      	b.n	8001580 <_puts_r+0x24>
 80015d4:	4621      	mov	r1, r4
 80015d6:	4628      	mov	r0, r5
 80015d8:	f000 f888 	bl	80016ec <__swsetup_r>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d0dd      	beq.n	800159c <_puts_r+0x40>
 80015e0:	f04f 35ff 	mov.w	r5, #4294967295
 80015e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015e6:	07da      	lsls	r2, r3, #31
 80015e8:	d405      	bmi.n	80015f6 <_puts_r+0x9a>
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	059b      	lsls	r3, r3, #22
 80015ee:	d402      	bmi.n	80015f6 <_puts_r+0x9a>
 80015f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015f2:	f000 fa9e 	bl	8001b32 <__retarget_lock_release_recursive>
 80015f6:	4628      	mov	r0, r5
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da04      	bge.n	8001608 <_puts_r+0xac>
 80015fe:	69a2      	ldr	r2, [r4, #24]
 8001600:	429a      	cmp	r2, r3
 8001602:	dc06      	bgt.n	8001612 <_puts_r+0xb6>
 8001604:	290a      	cmp	r1, #10
 8001606:	d004      	beq.n	8001612 <_puts_r+0xb6>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	6022      	str	r2, [r4, #0]
 800160e:	7019      	strb	r1, [r3, #0]
 8001610:	e7c5      	b.n	800159e <_puts_r+0x42>
 8001612:	4622      	mov	r2, r4
 8001614:	4628      	mov	r0, r5
 8001616:	f000 f817 	bl	8001648 <__swbuf_r>
 800161a:	3001      	adds	r0, #1
 800161c:	d1bf      	bne.n	800159e <_puts_r+0x42>
 800161e:	e7df      	b.n	80015e0 <_puts_r+0x84>
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	250a      	movs	r5, #10
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	6022      	str	r2, [r4, #0]
 8001628:	701d      	strb	r5, [r3, #0]
 800162a:	e7db      	b.n	80015e4 <_puts_r+0x88>
 800162c:	080025b8 	.word	0x080025b8
 8001630:	080025d8 	.word	0x080025d8
 8001634:	08002598 	.word	0x08002598

08001638 <puts>:
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <puts+0xc>)
 800163a:	4601      	mov	r1, r0
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	f7ff bf8d 	b.w	800155c <_puts_r>
 8001642:	bf00      	nop
 8001644:	20000004 	.word	0x20000004

08001648 <__swbuf_r>:
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	460e      	mov	r6, r1
 800164c:	4614      	mov	r4, r2
 800164e:	4605      	mov	r5, r0
 8001650:	b118      	cbz	r0, 800165a <__swbuf_r+0x12>
 8001652:	6983      	ldr	r3, [r0, #24]
 8001654:	b90b      	cbnz	r3, 800165a <__swbuf_r+0x12>
 8001656:	f000 f9cd 	bl	80019f4 <__sinit>
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <__swbuf_r+0x98>)
 800165c:	429c      	cmp	r4, r3
 800165e:	d12b      	bne.n	80016b8 <__swbuf_r+0x70>
 8001660:	686c      	ldr	r4, [r5, #4]
 8001662:	69a3      	ldr	r3, [r4, #24]
 8001664:	60a3      	str	r3, [r4, #8]
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	071a      	lsls	r2, r3, #28
 800166a:	d52f      	bpl.n	80016cc <__swbuf_r+0x84>
 800166c:	6923      	ldr	r3, [r4, #16]
 800166e:	b36b      	cbz	r3, 80016cc <__swbuf_r+0x84>
 8001670:	6923      	ldr	r3, [r4, #16]
 8001672:	6820      	ldr	r0, [r4, #0]
 8001674:	1ac0      	subs	r0, r0, r3
 8001676:	6963      	ldr	r3, [r4, #20]
 8001678:	b2f6      	uxtb	r6, r6
 800167a:	4283      	cmp	r3, r0
 800167c:	4637      	mov	r7, r6
 800167e:	dc04      	bgt.n	800168a <__swbuf_r+0x42>
 8001680:	4621      	mov	r1, r4
 8001682:	4628      	mov	r0, r5
 8001684:	f000 f922 	bl	80018cc <_fflush_r>
 8001688:	bb30      	cbnz	r0, 80016d8 <__swbuf_r+0x90>
 800168a:	68a3      	ldr	r3, [r4, #8]
 800168c:	3b01      	subs	r3, #1
 800168e:	60a3      	str	r3, [r4, #8]
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	6022      	str	r2, [r4, #0]
 8001696:	701e      	strb	r6, [r3, #0]
 8001698:	6963      	ldr	r3, [r4, #20]
 800169a:	3001      	adds	r0, #1
 800169c:	4283      	cmp	r3, r0
 800169e:	d004      	beq.n	80016aa <__swbuf_r+0x62>
 80016a0:	89a3      	ldrh	r3, [r4, #12]
 80016a2:	07db      	lsls	r3, r3, #31
 80016a4:	d506      	bpl.n	80016b4 <__swbuf_r+0x6c>
 80016a6:	2e0a      	cmp	r6, #10
 80016a8:	d104      	bne.n	80016b4 <__swbuf_r+0x6c>
 80016aa:	4621      	mov	r1, r4
 80016ac:	4628      	mov	r0, r5
 80016ae:	f000 f90d 	bl	80018cc <_fflush_r>
 80016b2:	b988      	cbnz	r0, 80016d8 <__swbuf_r+0x90>
 80016b4:	4638      	mov	r0, r7
 80016b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <__swbuf_r+0x9c>)
 80016ba:	429c      	cmp	r4, r3
 80016bc:	d101      	bne.n	80016c2 <__swbuf_r+0x7a>
 80016be:	68ac      	ldr	r4, [r5, #8]
 80016c0:	e7cf      	b.n	8001662 <__swbuf_r+0x1a>
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <__swbuf_r+0xa0>)
 80016c4:	429c      	cmp	r4, r3
 80016c6:	bf08      	it	eq
 80016c8:	68ec      	ldreq	r4, [r5, #12]
 80016ca:	e7ca      	b.n	8001662 <__swbuf_r+0x1a>
 80016cc:	4621      	mov	r1, r4
 80016ce:	4628      	mov	r0, r5
 80016d0:	f000 f80c 	bl	80016ec <__swsetup_r>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d0cb      	beq.n	8001670 <__swbuf_r+0x28>
 80016d8:	f04f 37ff 	mov.w	r7, #4294967295
 80016dc:	e7ea      	b.n	80016b4 <__swbuf_r+0x6c>
 80016de:	bf00      	nop
 80016e0:	080025b8 	.word	0x080025b8
 80016e4:	080025d8 	.word	0x080025d8
 80016e8:	08002598 	.word	0x08002598

080016ec <__swsetup_r>:
 80016ec:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <__swsetup_r+0xcc>)
 80016ee:	b570      	push	{r4, r5, r6, lr}
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	4606      	mov	r6, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	b125      	cbz	r5, 8001702 <__swsetup_r+0x16>
 80016f8:	69ab      	ldr	r3, [r5, #24]
 80016fa:	b913      	cbnz	r3, 8001702 <__swsetup_r+0x16>
 80016fc:	4628      	mov	r0, r5
 80016fe:	f000 f979 	bl	80019f4 <__sinit>
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <__swsetup_r+0xd0>)
 8001704:	429c      	cmp	r4, r3
 8001706:	d10f      	bne.n	8001728 <__swsetup_r+0x3c>
 8001708:	686c      	ldr	r4, [r5, #4]
 800170a:	89a3      	ldrh	r3, [r4, #12]
 800170c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001710:	0719      	lsls	r1, r3, #28
 8001712:	d42c      	bmi.n	800176e <__swsetup_r+0x82>
 8001714:	06dd      	lsls	r5, r3, #27
 8001716:	d411      	bmi.n	800173c <__swsetup_r+0x50>
 8001718:	2309      	movs	r3, #9
 800171a:	6033      	str	r3, [r6, #0]
 800171c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001720:	81a3      	strh	r3, [r4, #12]
 8001722:	f04f 30ff 	mov.w	r0, #4294967295
 8001726:	e03e      	b.n	80017a6 <__swsetup_r+0xba>
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <__swsetup_r+0xd4>)
 800172a:	429c      	cmp	r4, r3
 800172c:	d101      	bne.n	8001732 <__swsetup_r+0x46>
 800172e:	68ac      	ldr	r4, [r5, #8]
 8001730:	e7eb      	b.n	800170a <__swsetup_r+0x1e>
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <__swsetup_r+0xd8>)
 8001734:	429c      	cmp	r4, r3
 8001736:	bf08      	it	eq
 8001738:	68ec      	ldreq	r4, [r5, #12]
 800173a:	e7e6      	b.n	800170a <__swsetup_r+0x1e>
 800173c:	0758      	lsls	r0, r3, #29
 800173e:	d512      	bpl.n	8001766 <__swsetup_r+0x7a>
 8001740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001742:	b141      	cbz	r1, 8001756 <__swsetup_r+0x6a>
 8001744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001748:	4299      	cmp	r1, r3
 800174a:	d002      	beq.n	8001752 <__swsetup_r+0x66>
 800174c:	4630      	mov	r0, r6
 800174e:	f000 fa57 	bl	8001c00 <_free_r>
 8001752:	2300      	movs	r3, #0
 8001754:	6363      	str	r3, [r4, #52]	; 0x34
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800175c:	81a3      	strh	r3, [r4, #12]
 800175e:	2300      	movs	r3, #0
 8001760:	6063      	str	r3, [r4, #4]
 8001762:	6923      	ldr	r3, [r4, #16]
 8001764:	6023      	str	r3, [r4, #0]
 8001766:	89a3      	ldrh	r3, [r4, #12]
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	81a3      	strh	r3, [r4, #12]
 800176e:	6923      	ldr	r3, [r4, #16]
 8001770:	b94b      	cbnz	r3, 8001786 <__swsetup_r+0x9a>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177c:	d003      	beq.n	8001786 <__swsetup_r+0x9a>
 800177e:	4621      	mov	r1, r4
 8001780:	4630      	mov	r0, r6
 8001782:	f000 f9fd 	bl	8001b80 <__smakebuf_r>
 8001786:	89a0      	ldrh	r0, [r4, #12]
 8001788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800178c:	f010 0301 	ands.w	r3, r0, #1
 8001790:	d00a      	beq.n	80017a8 <__swsetup_r+0xbc>
 8001792:	2300      	movs	r3, #0
 8001794:	60a3      	str	r3, [r4, #8]
 8001796:	6963      	ldr	r3, [r4, #20]
 8001798:	425b      	negs	r3, r3
 800179a:	61a3      	str	r3, [r4, #24]
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	b943      	cbnz	r3, 80017b2 <__swsetup_r+0xc6>
 80017a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80017a4:	d1ba      	bne.n	800171c <__swsetup_r+0x30>
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
 80017a8:	0781      	lsls	r1, r0, #30
 80017aa:	bf58      	it	pl
 80017ac:	6963      	ldrpl	r3, [r4, #20]
 80017ae:	60a3      	str	r3, [r4, #8]
 80017b0:	e7f4      	b.n	800179c <__swsetup_r+0xb0>
 80017b2:	2000      	movs	r0, #0
 80017b4:	e7f7      	b.n	80017a6 <__swsetup_r+0xba>
 80017b6:	bf00      	nop
 80017b8:	20000004 	.word	0x20000004
 80017bc:	080025b8 	.word	0x080025b8
 80017c0:	080025d8 	.word	0x080025d8
 80017c4:	08002598 	.word	0x08002598

080017c8 <__sflush_r>:
 80017c8:	898a      	ldrh	r2, [r1, #12]
 80017ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017cc:	4605      	mov	r5, r0
 80017ce:	0710      	lsls	r0, r2, #28
 80017d0:	460c      	mov	r4, r1
 80017d2:	d457      	bmi.n	8001884 <__sflush_r+0xbc>
 80017d4:	684b      	ldr	r3, [r1, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dc04      	bgt.n	80017e4 <__sflush_r+0x1c>
 80017da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dc01      	bgt.n	80017e4 <__sflush_r+0x1c>
 80017e0:	2000      	movs	r0, #0
 80017e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017e6:	2e00      	cmp	r6, #0
 80017e8:	d0fa      	beq.n	80017e0 <__sflush_r+0x18>
 80017ea:	2300      	movs	r3, #0
 80017ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017f0:	682f      	ldr	r7, [r5, #0]
 80017f2:	602b      	str	r3, [r5, #0]
 80017f4:	d032      	beq.n	800185c <__sflush_r+0x94>
 80017f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	075a      	lsls	r2, r3, #29
 80017fc:	d505      	bpl.n	800180a <__sflush_r+0x42>
 80017fe:	6863      	ldr	r3, [r4, #4]
 8001800:	1ac0      	subs	r0, r0, r3
 8001802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001804:	b10b      	cbz	r3, 800180a <__sflush_r+0x42>
 8001806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001808:	1ac0      	subs	r0, r0, r3
 800180a:	2300      	movs	r3, #0
 800180c:	4602      	mov	r2, r0
 800180e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001810:	6a21      	ldr	r1, [r4, #32]
 8001812:	4628      	mov	r0, r5
 8001814:	47b0      	blx	r6
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	89a3      	ldrh	r3, [r4, #12]
 800181a:	d106      	bne.n	800182a <__sflush_r+0x62>
 800181c:	6829      	ldr	r1, [r5, #0]
 800181e:	291d      	cmp	r1, #29
 8001820:	d82c      	bhi.n	800187c <__sflush_r+0xb4>
 8001822:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <__sflush_r+0x100>)
 8001824:	40ca      	lsrs	r2, r1
 8001826:	07d6      	lsls	r6, r2, #31
 8001828:	d528      	bpl.n	800187c <__sflush_r+0xb4>
 800182a:	2200      	movs	r2, #0
 800182c:	6062      	str	r2, [r4, #4]
 800182e:	04d9      	lsls	r1, r3, #19
 8001830:	6922      	ldr	r2, [r4, #16]
 8001832:	6022      	str	r2, [r4, #0]
 8001834:	d504      	bpl.n	8001840 <__sflush_r+0x78>
 8001836:	1c42      	adds	r2, r0, #1
 8001838:	d101      	bne.n	800183e <__sflush_r+0x76>
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	b903      	cbnz	r3, 8001840 <__sflush_r+0x78>
 800183e:	6560      	str	r0, [r4, #84]	; 0x54
 8001840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001842:	602f      	str	r7, [r5, #0]
 8001844:	2900      	cmp	r1, #0
 8001846:	d0cb      	beq.n	80017e0 <__sflush_r+0x18>
 8001848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800184c:	4299      	cmp	r1, r3
 800184e:	d002      	beq.n	8001856 <__sflush_r+0x8e>
 8001850:	4628      	mov	r0, r5
 8001852:	f000 f9d5 	bl	8001c00 <_free_r>
 8001856:	2000      	movs	r0, #0
 8001858:	6360      	str	r0, [r4, #52]	; 0x34
 800185a:	e7c2      	b.n	80017e2 <__sflush_r+0x1a>
 800185c:	6a21      	ldr	r1, [r4, #32]
 800185e:	2301      	movs	r3, #1
 8001860:	4628      	mov	r0, r5
 8001862:	47b0      	blx	r6
 8001864:	1c41      	adds	r1, r0, #1
 8001866:	d1c7      	bne.n	80017f8 <__sflush_r+0x30>
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0c4      	beq.n	80017f8 <__sflush_r+0x30>
 800186e:	2b1d      	cmp	r3, #29
 8001870:	d001      	beq.n	8001876 <__sflush_r+0xae>
 8001872:	2b16      	cmp	r3, #22
 8001874:	d101      	bne.n	800187a <__sflush_r+0xb2>
 8001876:	602f      	str	r7, [r5, #0]
 8001878:	e7b2      	b.n	80017e0 <__sflush_r+0x18>
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001880:	81a3      	strh	r3, [r4, #12]
 8001882:	e7ae      	b.n	80017e2 <__sflush_r+0x1a>
 8001884:	690f      	ldr	r7, [r1, #16]
 8001886:	2f00      	cmp	r7, #0
 8001888:	d0aa      	beq.n	80017e0 <__sflush_r+0x18>
 800188a:	0793      	lsls	r3, r2, #30
 800188c:	680e      	ldr	r6, [r1, #0]
 800188e:	bf08      	it	eq
 8001890:	694b      	ldreq	r3, [r1, #20]
 8001892:	600f      	str	r7, [r1, #0]
 8001894:	bf18      	it	ne
 8001896:	2300      	movne	r3, #0
 8001898:	1bf6      	subs	r6, r6, r7
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	2e00      	cmp	r6, #0
 800189e:	dd9f      	ble.n	80017e0 <__sflush_r+0x18>
 80018a0:	6a21      	ldr	r1, [r4, #32]
 80018a2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80018a6:	4633      	mov	r3, r6
 80018a8:	463a      	mov	r2, r7
 80018aa:	4628      	mov	r0, r5
 80018ac:	47e0      	blx	ip
 80018ae:	2800      	cmp	r0, #0
 80018b0:	dc06      	bgt.n	80018c0 <__sflush_r+0xf8>
 80018b2:	89a3      	ldrh	r3, [r4, #12]
 80018b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b8:	81a3      	strh	r3, [r4, #12]
 80018ba:	f04f 30ff 	mov.w	r0, #4294967295
 80018be:	e790      	b.n	80017e2 <__sflush_r+0x1a>
 80018c0:	4407      	add	r7, r0
 80018c2:	1a36      	subs	r6, r6, r0
 80018c4:	e7ea      	b.n	800189c <__sflush_r+0xd4>
 80018c6:	bf00      	nop
 80018c8:	20400001 	.word	0x20400001

080018cc <_fflush_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	690b      	ldr	r3, [r1, #16]
 80018d0:	4605      	mov	r5, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	b913      	cbnz	r3, 80018dc <_fflush_r+0x10>
 80018d6:	2500      	movs	r5, #0
 80018d8:	4628      	mov	r0, r5
 80018da:	bd38      	pop	{r3, r4, r5, pc}
 80018dc:	b118      	cbz	r0, 80018e6 <_fflush_r+0x1a>
 80018de:	6983      	ldr	r3, [r0, #24]
 80018e0:	b90b      	cbnz	r3, 80018e6 <_fflush_r+0x1a>
 80018e2:	f000 f887 	bl	80019f4 <__sinit>
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <_fflush_r+0x6c>)
 80018e8:	429c      	cmp	r4, r3
 80018ea:	d11b      	bne.n	8001924 <_fflush_r+0x58>
 80018ec:	686c      	ldr	r4, [r5, #4]
 80018ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ef      	beq.n	80018d6 <_fflush_r+0xa>
 80018f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018f8:	07d0      	lsls	r0, r2, #31
 80018fa:	d404      	bmi.n	8001906 <_fflush_r+0x3a>
 80018fc:	0599      	lsls	r1, r3, #22
 80018fe:	d402      	bmi.n	8001906 <_fflush_r+0x3a>
 8001900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001902:	f000 f915 	bl	8001b30 <__retarget_lock_acquire_recursive>
 8001906:	4628      	mov	r0, r5
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff ff5d 	bl	80017c8 <__sflush_r>
 800190e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001910:	07da      	lsls	r2, r3, #31
 8001912:	4605      	mov	r5, r0
 8001914:	d4e0      	bmi.n	80018d8 <_fflush_r+0xc>
 8001916:	89a3      	ldrh	r3, [r4, #12]
 8001918:	059b      	lsls	r3, r3, #22
 800191a:	d4dd      	bmi.n	80018d8 <_fflush_r+0xc>
 800191c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800191e:	f000 f908 	bl	8001b32 <__retarget_lock_release_recursive>
 8001922:	e7d9      	b.n	80018d8 <_fflush_r+0xc>
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <_fflush_r+0x70>)
 8001926:	429c      	cmp	r4, r3
 8001928:	d101      	bne.n	800192e <_fflush_r+0x62>
 800192a:	68ac      	ldr	r4, [r5, #8]
 800192c:	e7df      	b.n	80018ee <_fflush_r+0x22>
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <_fflush_r+0x74>)
 8001930:	429c      	cmp	r4, r3
 8001932:	bf08      	it	eq
 8001934:	68ec      	ldreq	r4, [r5, #12]
 8001936:	e7da      	b.n	80018ee <_fflush_r+0x22>
 8001938:	080025b8 	.word	0x080025b8
 800193c:	080025d8 	.word	0x080025d8
 8001940:	08002598 	.word	0x08002598

08001944 <std>:
 8001944:	2300      	movs	r3, #0
 8001946:	b510      	push	{r4, lr}
 8001948:	4604      	mov	r4, r0
 800194a:	e9c0 3300 	strd	r3, r3, [r0]
 800194e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001952:	6083      	str	r3, [r0, #8]
 8001954:	8181      	strh	r1, [r0, #12]
 8001956:	6643      	str	r3, [r0, #100]	; 0x64
 8001958:	81c2      	strh	r2, [r0, #14]
 800195a:	6183      	str	r3, [r0, #24]
 800195c:	4619      	mov	r1, r3
 800195e:	2208      	movs	r2, #8
 8001960:	305c      	adds	r0, #92	; 0x5c
 8001962:	f7ff fddb 	bl	800151c <memset>
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <std+0x38>)
 8001968:	6263      	str	r3, [r4, #36]	; 0x24
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <std+0x3c>)
 800196c:	62a3      	str	r3, [r4, #40]	; 0x28
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <std+0x40>)
 8001970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <std+0x44>)
 8001974:	6224      	str	r4, [r4, #32]
 8001976:	6323      	str	r3, [r4, #48]	; 0x30
 8001978:	bd10      	pop	{r4, pc}
 800197a:	bf00      	nop
 800197c:	080023b5 	.word	0x080023b5
 8001980:	080023d7 	.word	0x080023d7
 8001984:	0800240f 	.word	0x0800240f
 8001988:	08002433 	.word	0x08002433

0800198c <_cleanup_r>:
 800198c:	4901      	ldr	r1, [pc, #4]	; (8001994 <_cleanup_r+0x8>)
 800198e:	f000 b8af 	b.w	8001af0 <_fwalk_reent>
 8001992:	bf00      	nop
 8001994:	080018cd 	.word	0x080018cd

08001998 <__sfmoreglue>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	2268      	movs	r2, #104	; 0x68
 800199c:	1e4d      	subs	r5, r1, #1
 800199e:	4355      	muls	r5, r2
 80019a0:	460e      	mov	r6, r1
 80019a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80019a6:	f000 f995 	bl	8001cd4 <_malloc_r>
 80019aa:	4604      	mov	r4, r0
 80019ac:	b140      	cbz	r0, 80019c0 <__sfmoreglue+0x28>
 80019ae:	2100      	movs	r1, #0
 80019b0:	e9c0 1600 	strd	r1, r6, [r0]
 80019b4:	300c      	adds	r0, #12
 80019b6:	60a0      	str	r0, [r4, #8]
 80019b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019bc:	f7ff fdae 	bl	800151c <memset>
 80019c0:	4620      	mov	r0, r4
 80019c2:	bd70      	pop	{r4, r5, r6, pc}

080019c4 <__sfp_lock_acquire>:
 80019c4:	4801      	ldr	r0, [pc, #4]	; (80019cc <__sfp_lock_acquire+0x8>)
 80019c6:	f000 b8b3 	b.w	8001b30 <__retarget_lock_acquire_recursive>
 80019ca:	bf00      	nop
 80019cc:	200000cd 	.word	0x200000cd

080019d0 <__sfp_lock_release>:
 80019d0:	4801      	ldr	r0, [pc, #4]	; (80019d8 <__sfp_lock_release+0x8>)
 80019d2:	f000 b8ae 	b.w	8001b32 <__retarget_lock_release_recursive>
 80019d6:	bf00      	nop
 80019d8:	200000cd 	.word	0x200000cd

080019dc <__sinit_lock_acquire>:
 80019dc:	4801      	ldr	r0, [pc, #4]	; (80019e4 <__sinit_lock_acquire+0x8>)
 80019de:	f000 b8a7 	b.w	8001b30 <__retarget_lock_acquire_recursive>
 80019e2:	bf00      	nop
 80019e4:	200000ce 	.word	0x200000ce

080019e8 <__sinit_lock_release>:
 80019e8:	4801      	ldr	r0, [pc, #4]	; (80019f0 <__sinit_lock_release+0x8>)
 80019ea:	f000 b8a2 	b.w	8001b32 <__retarget_lock_release_recursive>
 80019ee:	bf00      	nop
 80019f0:	200000ce 	.word	0x200000ce

080019f4 <__sinit>:
 80019f4:	b510      	push	{r4, lr}
 80019f6:	4604      	mov	r4, r0
 80019f8:	f7ff fff0 	bl	80019dc <__sinit_lock_acquire>
 80019fc:	69a3      	ldr	r3, [r4, #24]
 80019fe:	b11b      	cbz	r3, 8001a08 <__sinit+0x14>
 8001a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a04:	f7ff bff0 	b.w	80019e8 <__sinit_lock_release>
 8001a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <__sinit+0x68>)
 8001a10:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <__sinit+0x6c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8001a16:	42a3      	cmp	r3, r4
 8001a18:	bf04      	itt	eq
 8001a1a:	2301      	moveq	r3, #1
 8001a1c:	61a3      	streq	r3, [r4, #24]
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f000 f820 	bl	8001a64 <__sfp>
 8001a24:	6060      	str	r0, [r4, #4]
 8001a26:	4620      	mov	r0, r4
 8001a28:	f000 f81c 	bl	8001a64 <__sfp>
 8001a2c:	60a0      	str	r0, [r4, #8]
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f000 f818 	bl	8001a64 <__sfp>
 8001a34:	2200      	movs	r2, #0
 8001a36:	60e0      	str	r0, [r4, #12]
 8001a38:	2104      	movs	r1, #4
 8001a3a:	6860      	ldr	r0, [r4, #4]
 8001a3c:	f7ff ff82 	bl	8001944 <std>
 8001a40:	68a0      	ldr	r0, [r4, #8]
 8001a42:	2201      	movs	r2, #1
 8001a44:	2109      	movs	r1, #9
 8001a46:	f7ff ff7d 	bl	8001944 <std>
 8001a4a:	68e0      	ldr	r0, [r4, #12]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	2112      	movs	r1, #18
 8001a50:	f7ff ff78 	bl	8001944 <std>
 8001a54:	2301      	movs	r3, #1
 8001a56:	61a3      	str	r3, [r4, #24]
 8001a58:	e7d2      	b.n	8001a00 <__sinit+0xc>
 8001a5a:	bf00      	nop
 8001a5c:	08002594 	.word	0x08002594
 8001a60:	0800198d 	.word	0x0800198d

08001a64 <__sfp>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	4607      	mov	r7, r0
 8001a68:	f7ff ffac 	bl	80019c4 <__sfp_lock_acquire>
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <__sfp+0x84>)
 8001a6e:	681e      	ldr	r6, [r3, #0]
 8001a70:	69b3      	ldr	r3, [r6, #24]
 8001a72:	b913      	cbnz	r3, 8001a7a <__sfp+0x16>
 8001a74:	4630      	mov	r0, r6
 8001a76:	f7ff ffbd 	bl	80019f4 <__sinit>
 8001a7a:	3648      	adds	r6, #72	; 0x48
 8001a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	d503      	bpl.n	8001a8c <__sfp+0x28>
 8001a84:	6833      	ldr	r3, [r6, #0]
 8001a86:	b30b      	cbz	r3, 8001acc <__sfp+0x68>
 8001a88:	6836      	ldr	r6, [r6, #0]
 8001a8a:	e7f7      	b.n	8001a7c <__sfp+0x18>
 8001a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a90:	b9d5      	cbnz	r5, 8001ac8 <__sfp+0x64>
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <__sfp+0x88>)
 8001a94:	60e3      	str	r3, [r4, #12]
 8001a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8001a9c:	f000 f847 	bl	8001b2e <__retarget_lock_init_recursive>
 8001aa0:	f7ff ff96 	bl	80019d0 <__sfp_lock_release>
 8001aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001aac:	6025      	str	r5, [r4, #0]
 8001aae:	61a5      	str	r5, [r4, #24]
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ab8:	f7ff fd30 	bl	800151c <memset>
 8001abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac8:	3468      	adds	r4, #104	; 0x68
 8001aca:	e7d9      	b.n	8001a80 <__sfp+0x1c>
 8001acc:	2104      	movs	r1, #4
 8001ace:	4638      	mov	r0, r7
 8001ad0:	f7ff ff62 	bl	8001998 <__sfmoreglue>
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	6030      	str	r0, [r6, #0]
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d1d5      	bne.n	8001a88 <__sfp+0x24>
 8001adc:	f7ff ff78 	bl	80019d0 <__sfp_lock_release>
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	e7ee      	b.n	8001ac4 <__sfp+0x60>
 8001ae6:	bf00      	nop
 8001ae8:	08002594 	.word	0x08002594
 8001aec:	ffff0001 	.word	0xffff0001

08001af0 <_fwalk_reent>:
 8001af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001af4:	4606      	mov	r6, r0
 8001af6:	4688      	mov	r8, r1
 8001af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001afc:	2700      	movs	r7, #0
 8001afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b02:	f1b9 0901 	subs.w	r9, r9, #1
 8001b06:	d505      	bpl.n	8001b14 <_fwalk_reent+0x24>
 8001b08:	6824      	ldr	r4, [r4, #0]
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	d1f7      	bne.n	8001afe <_fwalk_reent+0xe>
 8001b0e:	4638      	mov	r0, r7
 8001b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b14:	89ab      	ldrh	r3, [r5, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d907      	bls.n	8001b2a <_fwalk_reent+0x3a>
 8001b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	d003      	beq.n	8001b2a <_fwalk_reent+0x3a>
 8001b22:	4629      	mov	r1, r5
 8001b24:	4630      	mov	r0, r6
 8001b26:	47c0      	blx	r8
 8001b28:	4307      	orrs	r7, r0
 8001b2a:	3568      	adds	r5, #104	; 0x68
 8001b2c:	e7e9      	b.n	8001b02 <_fwalk_reent+0x12>

08001b2e <__retarget_lock_init_recursive>:
 8001b2e:	4770      	bx	lr

08001b30 <__retarget_lock_acquire_recursive>:
 8001b30:	4770      	bx	lr

08001b32 <__retarget_lock_release_recursive>:
 8001b32:	4770      	bx	lr

08001b34 <__swhatbuf_r>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	460e      	mov	r6, r1
 8001b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	b096      	sub	sp, #88	; 0x58
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	da08      	bge.n	8001b58 <__swhatbuf_r+0x24>
 8001b46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	602a      	str	r2, [r5, #0]
 8001b4e:	061a      	lsls	r2, r3, #24
 8001b50:	d410      	bmi.n	8001b74 <__swhatbuf_r+0x40>
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	e00e      	b.n	8001b76 <__swhatbuf_r+0x42>
 8001b58:	466a      	mov	r2, sp
 8001b5a:	f000 fc91 	bl	8002480 <_fstat_r>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	dbf1      	blt.n	8001b46 <__swhatbuf_r+0x12>
 8001b62:	9a01      	ldr	r2, [sp, #4]
 8001b64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b6c:	425a      	negs	r2, r3
 8001b6e:	415a      	adcs	r2, r3
 8001b70:	602a      	str	r2, [r5, #0]
 8001b72:	e7ee      	b.n	8001b52 <__swhatbuf_r+0x1e>
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	2000      	movs	r0, #0
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	b016      	add	sp, #88	; 0x58
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b80 <__smakebuf_r>:
 8001b80:	898b      	ldrh	r3, [r1, #12]
 8001b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b84:	079d      	lsls	r5, r3, #30
 8001b86:	4606      	mov	r6, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	d507      	bpl.n	8001b9c <__smakebuf_r+0x1c>
 8001b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b90:	6023      	str	r3, [r4, #0]
 8001b92:	6123      	str	r3, [r4, #16]
 8001b94:	2301      	movs	r3, #1
 8001b96:	6163      	str	r3, [r4, #20]
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
 8001b9c:	ab01      	add	r3, sp, #4
 8001b9e:	466a      	mov	r2, sp
 8001ba0:	f7ff ffc8 	bl	8001b34 <__swhatbuf_r>
 8001ba4:	9900      	ldr	r1, [sp, #0]
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f000 f893 	bl	8001cd4 <_malloc_r>
 8001bae:	b948      	cbnz	r0, 8001bc4 <__smakebuf_r+0x44>
 8001bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bb4:	059a      	lsls	r2, r3, #22
 8001bb6:	d4ef      	bmi.n	8001b98 <__smakebuf_r+0x18>
 8001bb8:	f023 0303 	bic.w	r3, r3, #3
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	81a3      	strh	r3, [r4, #12]
 8001bc2:	e7e3      	b.n	8001b8c <__smakebuf_r+0xc>
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <__smakebuf_r+0x7c>)
 8001bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001bc8:	89a3      	ldrh	r3, [r4, #12]
 8001bca:	6020      	str	r0, [r4, #0]
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	81a3      	strh	r3, [r4, #12]
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	6163      	str	r3, [r4, #20]
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	6120      	str	r0, [r4, #16]
 8001bda:	b15b      	cbz	r3, 8001bf4 <__smakebuf_r+0x74>
 8001bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001be0:	4630      	mov	r0, r6
 8001be2:	f000 fc5f 	bl	80024a4 <_isatty_r>
 8001be6:	b128      	cbz	r0, 8001bf4 <__smakebuf_r+0x74>
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	81a3      	strh	r3, [r4, #12]
 8001bf4:	89a0      	ldrh	r0, [r4, #12]
 8001bf6:	4305      	orrs	r5, r0
 8001bf8:	81a5      	strh	r5, [r4, #12]
 8001bfa:	e7cd      	b.n	8001b98 <__smakebuf_r+0x18>
 8001bfc:	0800198d 	.word	0x0800198d

08001c00 <_free_r>:
 8001c00:	b538      	push	{r3, r4, r5, lr}
 8001c02:	4605      	mov	r5, r0
 8001c04:	2900      	cmp	r1, #0
 8001c06:	d041      	beq.n	8001c8c <_free_r+0x8c>
 8001c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c0c:	1f0c      	subs	r4, r1, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bfb8      	it	lt
 8001c12:	18e4      	addlt	r4, r4, r3
 8001c14:	f000 fc68 	bl	80024e8 <__malloc_lock>
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <_free_r+0x90>)
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	b933      	cbnz	r3, 8001c2c <_free_r+0x2c>
 8001c1e:	6063      	str	r3, [r4, #4]
 8001c20:	6014      	str	r4, [r2, #0]
 8001c22:	4628      	mov	r0, r5
 8001c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c28:	f000 bc64 	b.w	80024f4 <__malloc_unlock>
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d908      	bls.n	8001c42 <_free_r+0x42>
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	1821      	adds	r1, r4, r0
 8001c34:	428b      	cmp	r3, r1
 8001c36:	bf01      	itttt	eq
 8001c38:	6819      	ldreq	r1, [r3, #0]
 8001c3a:	685b      	ldreq	r3, [r3, #4]
 8001c3c:	1809      	addeq	r1, r1, r0
 8001c3e:	6021      	streq	r1, [r4, #0]
 8001c40:	e7ed      	b.n	8001c1e <_free_r+0x1e>
 8001c42:	461a      	mov	r2, r3
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	b10b      	cbz	r3, 8001c4c <_free_r+0x4c>
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	d9fa      	bls.n	8001c42 <_free_r+0x42>
 8001c4c:	6811      	ldr	r1, [r2, #0]
 8001c4e:	1850      	adds	r0, r2, r1
 8001c50:	42a0      	cmp	r0, r4
 8001c52:	d10b      	bne.n	8001c6c <_free_r+0x6c>
 8001c54:	6820      	ldr	r0, [r4, #0]
 8001c56:	4401      	add	r1, r0
 8001c58:	1850      	adds	r0, r2, r1
 8001c5a:	4283      	cmp	r3, r0
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	d1e0      	bne.n	8001c22 <_free_r+0x22>
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	6053      	str	r3, [r2, #4]
 8001c66:	4401      	add	r1, r0
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	e7da      	b.n	8001c22 <_free_r+0x22>
 8001c6c:	d902      	bls.n	8001c74 <_free_r+0x74>
 8001c6e:	230c      	movs	r3, #12
 8001c70:	602b      	str	r3, [r5, #0]
 8001c72:	e7d6      	b.n	8001c22 <_free_r+0x22>
 8001c74:	6820      	ldr	r0, [r4, #0]
 8001c76:	1821      	adds	r1, r4, r0
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	bf04      	itt	eq
 8001c7c:	6819      	ldreq	r1, [r3, #0]
 8001c7e:	685b      	ldreq	r3, [r3, #4]
 8001c80:	6063      	str	r3, [r4, #4]
 8001c82:	bf04      	itt	eq
 8001c84:	1809      	addeq	r1, r1, r0
 8001c86:	6021      	streq	r1, [r4, #0]
 8001c88:	6054      	str	r4, [r2, #4]
 8001c8a:	e7ca      	b.n	8001c22 <_free_r+0x22>
 8001c8c:	bd38      	pop	{r3, r4, r5, pc}
 8001c8e:	bf00      	nop
 8001c90:	200000d0 	.word	0x200000d0

08001c94 <sbrk_aligned>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	4e0e      	ldr	r6, [pc, #56]	; (8001cd0 <sbrk_aligned+0x3c>)
 8001c98:	460c      	mov	r4, r1
 8001c9a:	6831      	ldr	r1, [r6, #0]
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	b911      	cbnz	r1, 8001ca6 <sbrk_aligned+0x12>
 8001ca0:	f000 fb78 	bl	8002394 <_sbrk_r>
 8001ca4:	6030      	str	r0, [r6, #0]
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f000 fb73 	bl	8002394 <_sbrk_r>
 8001cae:	1c43      	adds	r3, r0, #1
 8001cb0:	d00a      	beq.n	8001cc8 <sbrk_aligned+0x34>
 8001cb2:	1cc4      	adds	r4, r0, #3
 8001cb4:	f024 0403 	bic.w	r4, r4, #3
 8001cb8:	42a0      	cmp	r0, r4
 8001cba:	d007      	beq.n	8001ccc <sbrk_aligned+0x38>
 8001cbc:	1a21      	subs	r1, r4, r0
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	f000 fb68 	bl	8002394 <_sbrk_r>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d101      	bne.n	8001ccc <sbrk_aligned+0x38>
 8001cc8:	f04f 34ff 	mov.w	r4, #4294967295
 8001ccc:	4620      	mov	r0, r4
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	200000d4 	.word	0x200000d4

08001cd4 <_malloc_r>:
 8001cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd8:	1ccd      	adds	r5, r1, #3
 8001cda:	f025 0503 	bic.w	r5, r5, #3
 8001cde:	3508      	adds	r5, #8
 8001ce0:	2d0c      	cmp	r5, #12
 8001ce2:	bf38      	it	cc
 8001ce4:	250c      	movcc	r5, #12
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	4607      	mov	r7, r0
 8001cea:	db01      	blt.n	8001cf0 <_malloc_r+0x1c>
 8001cec:	42a9      	cmp	r1, r5
 8001cee:	d905      	bls.n	8001cfc <_malloc_r+0x28>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	2600      	movs	r6, #0
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cfc:	4e2e      	ldr	r6, [pc, #184]	; (8001db8 <_malloc_r+0xe4>)
 8001cfe:	f000 fbf3 	bl	80024e8 <__malloc_lock>
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	461c      	mov	r4, r3
 8001d06:	bb34      	cbnz	r4, 8001d56 <_malloc_r+0x82>
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f7ff ffc2 	bl	8001c94 <sbrk_aligned>
 8001d10:	1c43      	adds	r3, r0, #1
 8001d12:	4604      	mov	r4, r0
 8001d14:	d14d      	bne.n	8001db2 <_malloc_r+0xde>
 8001d16:	6834      	ldr	r4, [r6, #0]
 8001d18:	4626      	mov	r6, r4
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	d140      	bne.n	8001da0 <_malloc_r+0xcc>
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	4631      	mov	r1, r6
 8001d22:	4638      	mov	r0, r7
 8001d24:	eb04 0803 	add.w	r8, r4, r3
 8001d28:	f000 fb34 	bl	8002394 <_sbrk_r>
 8001d2c:	4580      	cmp	r8, r0
 8001d2e:	d13a      	bne.n	8001da6 <_malloc_r+0xd2>
 8001d30:	6821      	ldr	r1, [r4, #0]
 8001d32:	3503      	adds	r5, #3
 8001d34:	1a6d      	subs	r5, r5, r1
 8001d36:	f025 0503 	bic.w	r5, r5, #3
 8001d3a:	3508      	adds	r5, #8
 8001d3c:	2d0c      	cmp	r5, #12
 8001d3e:	bf38      	it	cc
 8001d40:	250c      	movcc	r5, #12
 8001d42:	4629      	mov	r1, r5
 8001d44:	4638      	mov	r0, r7
 8001d46:	f7ff ffa5 	bl	8001c94 <sbrk_aligned>
 8001d4a:	3001      	adds	r0, #1
 8001d4c:	d02b      	beq.n	8001da6 <_malloc_r+0xd2>
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	442b      	add	r3, r5
 8001d52:	6023      	str	r3, [r4, #0]
 8001d54:	e00e      	b.n	8001d74 <_malloc_r+0xa0>
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	1b52      	subs	r2, r2, r5
 8001d5a:	d41e      	bmi.n	8001d9a <_malloc_r+0xc6>
 8001d5c:	2a0b      	cmp	r2, #11
 8001d5e:	d916      	bls.n	8001d8e <_malloc_r+0xba>
 8001d60:	1961      	adds	r1, r4, r5
 8001d62:	42a3      	cmp	r3, r4
 8001d64:	6025      	str	r5, [r4, #0]
 8001d66:	bf18      	it	ne
 8001d68:	6059      	strne	r1, [r3, #4]
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	bf08      	it	eq
 8001d6e:	6031      	streq	r1, [r6, #0]
 8001d70:	5162      	str	r2, [r4, r5]
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	4638      	mov	r0, r7
 8001d76:	f104 060b 	add.w	r6, r4, #11
 8001d7a:	f000 fbbb 	bl	80024f4 <__malloc_unlock>
 8001d7e:	f026 0607 	bic.w	r6, r6, #7
 8001d82:	1d23      	adds	r3, r4, #4
 8001d84:	1af2      	subs	r2, r6, r3
 8001d86:	d0b6      	beq.n	8001cf6 <_malloc_r+0x22>
 8001d88:	1b9b      	subs	r3, r3, r6
 8001d8a:	50a3      	str	r3, [r4, r2]
 8001d8c:	e7b3      	b.n	8001cf6 <_malloc_r+0x22>
 8001d8e:	6862      	ldr	r2, [r4, #4]
 8001d90:	42a3      	cmp	r3, r4
 8001d92:	bf0c      	ite	eq
 8001d94:	6032      	streq	r2, [r6, #0]
 8001d96:	605a      	strne	r2, [r3, #4]
 8001d98:	e7ec      	b.n	8001d74 <_malloc_r+0xa0>
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	6864      	ldr	r4, [r4, #4]
 8001d9e:	e7b2      	b.n	8001d06 <_malloc_r+0x32>
 8001da0:	4634      	mov	r4, r6
 8001da2:	6876      	ldr	r6, [r6, #4]
 8001da4:	e7b9      	b.n	8001d1a <_malloc_r+0x46>
 8001da6:	230c      	movs	r3, #12
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4638      	mov	r0, r7
 8001dac:	f000 fba2 	bl	80024f4 <__malloc_unlock>
 8001db0:	e7a1      	b.n	8001cf6 <_malloc_r+0x22>
 8001db2:	6025      	str	r5, [r4, #0]
 8001db4:	e7de      	b.n	8001d74 <_malloc_r+0xa0>
 8001db6:	bf00      	nop
 8001db8:	200000d0 	.word	0x200000d0

08001dbc <__sfputc_r>:
 8001dbc:	6893      	ldr	r3, [r2, #8]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	b410      	push	{r4}
 8001dc4:	6093      	str	r3, [r2, #8]
 8001dc6:	da07      	bge.n	8001dd8 <__sfputc_r+0x1c>
 8001dc8:	6994      	ldr	r4, [r2, #24]
 8001dca:	42a3      	cmp	r3, r4
 8001dcc:	db01      	blt.n	8001dd2 <__sfputc_r+0x16>
 8001dce:	290a      	cmp	r1, #10
 8001dd0:	d102      	bne.n	8001dd8 <__sfputc_r+0x1c>
 8001dd2:	bc10      	pop	{r4}
 8001dd4:	f7ff bc38 	b.w	8001648 <__swbuf_r>
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	1c58      	adds	r0, r3, #1
 8001ddc:	6010      	str	r0, [r2, #0]
 8001dde:	7019      	strb	r1, [r3, #0]
 8001de0:	4608      	mov	r0, r1
 8001de2:	bc10      	pop	{r4}
 8001de4:	4770      	bx	lr

08001de6 <__sfputs_r>:
 8001de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de8:	4606      	mov	r6, r0
 8001dea:	460f      	mov	r7, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	18d5      	adds	r5, r2, r3
 8001df0:	42ac      	cmp	r4, r5
 8001df2:	d101      	bne.n	8001df8 <__sfputs_r+0x12>
 8001df4:	2000      	movs	r0, #0
 8001df6:	e007      	b.n	8001e08 <__sfputs_r+0x22>
 8001df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dfc:	463a      	mov	r2, r7
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f7ff ffdc 	bl	8001dbc <__sfputc_r>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d1f3      	bne.n	8001df0 <__sfputs_r+0xa>
 8001e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e0c <_vfiprintf_r>:
 8001e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e10:	460d      	mov	r5, r1
 8001e12:	b09d      	sub	sp, #116	; 0x74
 8001e14:	4614      	mov	r4, r2
 8001e16:	4698      	mov	r8, r3
 8001e18:	4606      	mov	r6, r0
 8001e1a:	b118      	cbz	r0, 8001e24 <_vfiprintf_r+0x18>
 8001e1c:	6983      	ldr	r3, [r0, #24]
 8001e1e:	b90b      	cbnz	r3, 8001e24 <_vfiprintf_r+0x18>
 8001e20:	f7ff fde8 	bl	80019f4 <__sinit>
 8001e24:	4b89      	ldr	r3, [pc, #548]	; (800204c <_vfiprintf_r+0x240>)
 8001e26:	429d      	cmp	r5, r3
 8001e28:	d11b      	bne.n	8001e62 <_vfiprintf_r+0x56>
 8001e2a:	6875      	ldr	r5, [r6, #4]
 8001e2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e2e:	07d9      	lsls	r1, r3, #31
 8001e30:	d405      	bmi.n	8001e3e <_vfiprintf_r+0x32>
 8001e32:	89ab      	ldrh	r3, [r5, #12]
 8001e34:	059a      	lsls	r2, r3, #22
 8001e36:	d402      	bmi.n	8001e3e <_vfiprintf_r+0x32>
 8001e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e3a:	f7ff fe79 	bl	8001b30 <__retarget_lock_acquire_recursive>
 8001e3e:	89ab      	ldrh	r3, [r5, #12]
 8001e40:	071b      	lsls	r3, r3, #28
 8001e42:	d501      	bpl.n	8001e48 <_vfiprintf_r+0x3c>
 8001e44:	692b      	ldr	r3, [r5, #16]
 8001e46:	b9eb      	cbnz	r3, 8001e84 <_vfiprintf_r+0x78>
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f7ff fc4e 	bl	80016ec <__swsetup_r>
 8001e50:	b1c0      	cbz	r0, 8001e84 <_vfiprintf_r+0x78>
 8001e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e54:	07dc      	lsls	r4, r3, #31
 8001e56:	d50e      	bpl.n	8001e76 <_vfiprintf_r+0x6a>
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	b01d      	add	sp, #116	; 0x74
 8001e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <_vfiprintf_r+0x244>)
 8001e64:	429d      	cmp	r5, r3
 8001e66:	d101      	bne.n	8001e6c <_vfiprintf_r+0x60>
 8001e68:	68b5      	ldr	r5, [r6, #8]
 8001e6a:	e7df      	b.n	8001e2c <_vfiprintf_r+0x20>
 8001e6c:	4b79      	ldr	r3, [pc, #484]	; (8002054 <_vfiprintf_r+0x248>)
 8001e6e:	429d      	cmp	r5, r3
 8001e70:	bf08      	it	eq
 8001e72:	68f5      	ldreq	r5, [r6, #12]
 8001e74:	e7da      	b.n	8001e2c <_vfiprintf_r+0x20>
 8001e76:	89ab      	ldrh	r3, [r5, #12]
 8001e78:	0598      	lsls	r0, r3, #22
 8001e7a:	d4ed      	bmi.n	8001e58 <_vfiprintf_r+0x4c>
 8001e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e7e:	f7ff fe58 	bl	8001b32 <__retarget_lock_release_recursive>
 8001e82:	e7e9      	b.n	8001e58 <_vfiprintf_r+0x4c>
 8001e84:	2300      	movs	r3, #0
 8001e86:	9309      	str	r3, [sp, #36]	; 0x24
 8001e88:	2320      	movs	r3, #32
 8001e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e92:	2330      	movs	r3, #48	; 0x30
 8001e94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002058 <_vfiprintf_r+0x24c>
 8001e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e9c:	f04f 0901 	mov.w	r9, #1
 8001ea0:	4623      	mov	r3, r4
 8001ea2:	469a      	mov	sl, r3
 8001ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ea8:	b10a      	cbz	r2, 8001eae <_vfiprintf_r+0xa2>
 8001eaa:	2a25      	cmp	r2, #37	; 0x25
 8001eac:	d1f9      	bne.n	8001ea2 <_vfiprintf_r+0x96>
 8001eae:	ebba 0b04 	subs.w	fp, sl, r4
 8001eb2:	d00b      	beq.n	8001ecc <_vfiprintf_r+0xc0>
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f7ff ff93 	bl	8001de6 <__sfputs_r>
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	f000 80aa 	beq.w	800201a <_vfiprintf_r+0x20e>
 8001ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ec8:	445a      	add	r2, fp
 8001eca:	9209      	str	r2, [sp, #36]	; 0x24
 8001ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a2 	beq.w	800201a <_vfiprintf_r+0x20e>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ee0:	f10a 0a01 	add.w	sl, sl, #1
 8001ee4:	9304      	str	r3, [sp, #16]
 8001ee6:	9307      	str	r3, [sp, #28]
 8001ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001eec:	931a      	str	r3, [sp, #104]	; 0x68
 8001eee:	4654      	mov	r4, sl
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ef6:	4858      	ldr	r0, [pc, #352]	; (8002058 <_vfiprintf_r+0x24c>)
 8001ef8:	f7fe f97a 	bl	80001f0 <memchr>
 8001efc:	9a04      	ldr	r2, [sp, #16]
 8001efe:	b9d8      	cbnz	r0, 8001f38 <_vfiprintf_r+0x12c>
 8001f00:	06d1      	lsls	r1, r2, #27
 8001f02:	bf44      	itt	mi
 8001f04:	2320      	movmi	r3, #32
 8001f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f0a:	0713      	lsls	r3, r2, #28
 8001f0c:	bf44      	itt	mi
 8001f0e:	232b      	movmi	r3, #43	; 0x2b
 8001f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f14:	f89a 3000 	ldrb.w	r3, [sl]
 8001f18:	2b2a      	cmp	r3, #42	; 0x2a
 8001f1a:	d015      	beq.n	8001f48 <_vfiprintf_r+0x13c>
 8001f1c:	9a07      	ldr	r2, [sp, #28]
 8001f1e:	4654      	mov	r4, sl
 8001f20:	2000      	movs	r0, #0
 8001f22:	f04f 0c0a 	mov.w	ip, #10
 8001f26:	4621      	mov	r1, r4
 8001f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f2c:	3b30      	subs	r3, #48	; 0x30
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d94e      	bls.n	8001fd0 <_vfiprintf_r+0x1c4>
 8001f32:	b1b0      	cbz	r0, 8001f62 <_vfiprintf_r+0x156>
 8001f34:	9207      	str	r2, [sp, #28]
 8001f36:	e014      	b.n	8001f62 <_vfiprintf_r+0x156>
 8001f38:	eba0 0308 	sub.w	r3, r0, r8
 8001f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8001f40:	4313      	orrs	r3, r2
 8001f42:	9304      	str	r3, [sp, #16]
 8001f44:	46a2      	mov	sl, r4
 8001f46:	e7d2      	b.n	8001eee <_vfiprintf_r+0xe2>
 8001f48:	9b03      	ldr	r3, [sp, #12]
 8001f4a:	1d19      	adds	r1, r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	9103      	str	r1, [sp, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bfbb      	ittet	lt
 8001f54:	425b      	neglt	r3, r3
 8001f56:	f042 0202 	orrlt.w	r2, r2, #2
 8001f5a:	9307      	strge	r3, [sp, #28]
 8001f5c:	9307      	strlt	r3, [sp, #28]
 8001f5e:	bfb8      	it	lt
 8001f60:	9204      	strlt	r2, [sp, #16]
 8001f62:	7823      	ldrb	r3, [r4, #0]
 8001f64:	2b2e      	cmp	r3, #46	; 0x2e
 8001f66:	d10c      	bne.n	8001f82 <_vfiprintf_r+0x176>
 8001f68:	7863      	ldrb	r3, [r4, #1]
 8001f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f6c:	d135      	bne.n	8001fda <_vfiprintf_r+0x1ce>
 8001f6e:	9b03      	ldr	r3, [sp, #12]
 8001f70:	1d1a      	adds	r2, r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	9203      	str	r2, [sp, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfb8      	it	lt
 8001f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f7e:	3402      	adds	r4, #2
 8001f80:	9305      	str	r3, [sp, #20]
 8001f82:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800205c <_vfiprintf_r+0x250>
 8001f86:	7821      	ldrb	r1, [r4, #0]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4650      	mov	r0, sl
 8001f8c:	f7fe f930 	bl	80001f0 <memchr>
 8001f90:	b140      	cbz	r0, 8001fa4 <_vfiprintf_r+0x198>
 8001f92:	2340      	movs	r3, #64	; 0x40
 8001f94:	eba0 000a 	sub.w	r0, r0, sl
 8001f98:	fa03 f000 	lsl.w	r0, r3, r0
 8001f9c:	9b04      	ldr	r3, [sp, #16]
 8001f9e:	4303      	orrs	r3, r0
 8001fa0:	3401      	adds	r4, #1
 8001fa2:	9304      	str	r3, [sp, #16]
 8001fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa8:	482d      	ldr	r0, [pc, #180]	; (8002060 <_vfiprintf_r+0x254>)
 8001faa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fae:	2206      	movs	r2, #6
 8001fb0:	f7fe f91e 	bl	80001f0 <memchr>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d03f      	beq.n	8002038 <_vfiprintf_r+0x22c>
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <_vfiprintf_r+0x258>)
 8001fba:	bb1b      	cbnz	r3, 8002004 <_vfiprintf_r+0x1f8>
 8001fbc:	9b03      	ldr	r3, [sp, #12]
 8001fbe:	3307      	adds	r3, #7
 8001fc0:	f023 0307 	bic.w	r3, r3, #7
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	9303      	str	r3, [sp, #12]
 8001fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fca:	443b      	add	r3, r7
 8001fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8001fce:	e767      	b.n	8001ea0 <_vfiprintf_r+0x94>
 8001fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e7a5      	b.n	8001f26 <_vfiprintf_r+0x11a>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	3401      	adds	r4, #1
 8001fde:	9305      	str	r3, [sp, #20]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0c0a 	mov.w	ip, #10
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fec:	3a30      	subs	r2, #48	; 0x30
 8001fee:	2a09      	cmp	r2, #9
 8001ff0:	d903      	bls.n	8001ffa <_vfiprintf_r+0x1ee>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0c5      	beq.n	8001f82 <_vfiprintf_r+0x176>
 8001ff6:	9105      	str	r1, [sp, #20]
 8001ff8:	e7c3      	b.n	8001f82 <_vfiprintf_r+0x176>
 8001ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ffe:	4604      	mov	r4, r0
 8002000:	2301      	movs	r3, #1
 8002002:	e7f0      	b.n	8001fe6 <_vfiprintf_r+0x1da>
 8002004:	ab03      	add	r3, sp, #12
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	462a      	mov	r2, r5
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <_vfiprintf_r+0x25c>)
 800200c:	a904      	add	r1, sp, #16
 800200e:	4630      	mov	r0, r6
 8002010:	f3af 8000 	nop.w
 8002014:	4607      	mov	r7, r0
 8002016:	1c78      	adds	r0, r7, #1
 8002018:	d1d6      	bne.n	8001fc8 <_vfiprintf_r+0x1bc>
 800201a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800201c:	07d9      	lsls	r1, r3, #31
 800201e:	d405      	bmi.n	800202c <_vfiprintf_r+0x220>
 8002020:	89ab      	ldrh	r3, [r5, #12]
 8002022:	059a      	lsls	r2, r3, #22
 8002024:	d402      	bmi.n	800202c <_vfiprintf_r+0x220>
 8002026:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002028:	f7ff fd83 	bl	8001b32 <__retarget_lock_release_recursive>
 800202c:	89ab      	ldrh	r3, [r5, #12]
 800202e:	065b      	lsls	r3, r3, #25
 8002030:	f53f af12 	bmi.w	8001e58 <_vfiprintf_r+0x4c>
 8002034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002036:	e711      	b.n	8001e5c <_vfiprintf_r+0x50>
 8002038:	ab03      	add	r3, sp, #12
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	462a      	mov	r2, r5
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <_vfiprintf_r+0x25c>)
 8002040:	a904      	add	r1, sp, #16
 8002042:	4630      	mov	r0, r6
 8002044:	f000 f880 	bl	8002148 <_printf_i>
 8002048:	e7e4      	b.n	8002014 <_vfiprintf_r+0x208>
 800204a:	bf00      	nop
 800204c:	080025b8 	.word	0x080025b8
 8002050:	080025d8 	.word	0x080025d8
 8002054:	08002598 	.word	0x08002598
 8002058:	080025f8 	.word	0x080025f8
 800205c:	080025fe 	.word	0x080025fe
 8002060:	08002602 	.word	0x08002602
 8002064:	00000000 	.word	0x00000000
 8002068:	08001de7 	.word	0x08001de7

0800206c <_printf_common>:
 800206c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002070:	4616      	mov	r6, r2
 8002072:	4699      	mov	r9, r3
 8002074:	688a      	ldr	r2, [r1, #8]
 8002076:	690b      	ldr	r3, [r1, #16]
 8002078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800207c:	4293      	cmp	r3, r2
 800207e:	bfb8      	it	lt
 8002080:	4613      	movlt	r3, r2
 8002082:	6033      	str	r3, [r6, #0]
 8002084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002088:	4607      	mov	r7, r0
 800208a:	460c      	mov	r4, r1
 800208c:	b10a      	cbz	r2, 8002092 <_printf_common+0x26>
 800208e:	3301      	adds	r3, #1
 8002090:	6033      	str	r3, [r6, #0]
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	0699      	lsls	r1, r3, #26
 8002096:	bf42      	ittt	mi
 8002098:	6833      	ldrmi	r3, [r6, #0]
 800209a:	3302      	addmi	r3, #2
 800209c:	6033      	strmi	r3, [r6, #0]
 800209e:	6825      	ldr	r5, [r4, #0]
 80020a0:	f015 0506 	ands.w	r5, r5, #6
 80020a4:	d106      	bne.n	80020b4 <_printf_common+0x48>
 80020a6:	f104 0a19 	add.w	sl, r4, #25
 80020aa:	68e3      	ldr	r3, [r4, #12]
 80020ac:	6832      	ldr	r2, [r6, #0]
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	42ab      	cmp	r3, r5
 80020b2:	dc26      	bgt.n	8002102 <_printf_common+0x96>
 80020b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020b8:	1e13      	subs	r3, r2, #0
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	bf18      	it	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	0692      	lsls	r2, r2, #26
 80020c2:	d42b      	bmi.n	800211c <_printf_common+0xb0>
 80020c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020c8:	4649      	mov	r1, r9
 80020ca:	4638      	mov	r0, r7
 80020cc:	47c0      	blx	r8
 80020ce:	3001      	adds	r0, #1
 80020d0:	d01e      	beq.n	8002110 <_printf_common+0xa4>
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	68e5      	ldr	r5, [r4, #12]
 80020d6:	6832      	ldr	r2, [r6, #0]
 80020d8:	f003 0306 	and.w	r3, r3, #6
 80020dc:	2b04      	cmp	r3, #4
 80020de:	bf08      	it	eq
 80020e0:	1aad      	subeq	r5, r5, r2
 80020e2:	68a3      	ldr	r3, [r4, #8]
 80020e4:	6922      	ldr	r2, [r4, #16]
 80020e6:	bf0c      	ite	eq
 80020e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020ec:	2500      	movne	r5, #0
 80020ee:	4293      	cmp	r3, r2
 80020f0:	bfc4      	itt	gt
 80020f2:	1a9b      	subgt	r3, r3, r2
 80020f4:	18ed      	addgt	r5, r5, r3
 80020f6:	2600      	movs	r6, #0
 80020f8:	341a      	adds	r4, #26
 80020fa:	42b5      	cmp	r5, r6
 80020fc:	d11a      	bne.n	8002134 <_printf_common+0xc8>
 80020fe:	2000      	movs	r0, #0
 8002100:	e008      	b.n	8002114 <_printf_common+0xa8>
 8002102:	2301      	movs	r3, #1
 8002104:	4652      	mov	r2, sl
 8002106:	4649      	mov	r1, r9
 8002108:	4638      	mov	r0, r7
 800210a:	47c0      	blx	r8
 800210c:	3001      	adds	r0, #1
 800210e:	d103      	bne.n	8002118 <_printf_common+0xac>
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002118:	3501      	adds	r5, #1
 800211a:	e7c6      	b.n	80020aa <_printf_common+0x3e>
 800211c:	18e1      	adds	r1, r4, r3
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	2030      	movs	r0, #48	; 0x30
 8002122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002126:	4422      	add	r2, r4
 8002128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800212c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002130:	3302      	adds	r3, #2
 8002132:	e7c7      	b.n	80020c4 <_printf_common+0x58>
 8002134:	2301      	movs	r3, #1
 8002136:	4622      	mov	r2, r4
 8002138:	4649      	mov	r1, r9
 800213a:	4638      	mov	r0, r7
 800213c:	47c0      	blx	r8
 800213e:	3001      	adds	r0, #1
 8002140:	d0e6      	beq.n	8002110 <_printf_common+0xa4>
 8002142:	3601      	adds	r6, #1
 8002144:	e7d9      	b.n	80020fa <_printf_common+0x8e>
	...

08002148 <_printf_i>:
 8002148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800214c:	7e0f      	ldrb	r7, [r1, #24]
 800214e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002150:	2f78      	cmp	r7, #120	; 0x78
 8002152:	4691      	mov	r9, r2
 8002154:	4680      	mov	r8, r0
 8002156:	460c      	mov	r4, r1
 8002158:	469a      	mov	sl, r3
 800215a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800215e:	d807      	bhi.n	8002170 <_printf_i+0x28>
 8002160:	2f62      	cmp	r7, #98	; 0x62
 8002162:	d80a      	bhi.n	800217a <_printf_i+0x32>
 8002164:	2f00      	cmp	r7, #0
 8002166:	f000 80d8 	beq.w	800231a <_printf_i+0x1d2>
 800216a:	2f58      	cmp	r7, #88	; 0x58
 800216c:	f000 80a3 	beq.w	80022b6 <_printf_i+0x16e>
 8002170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002178:	e03a      	b.n	80021f0 <_printf_i+0xa8>
 800217a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800217e:	2b15      	cmp	r3, #21
 8002180:	d8f6      	bhi.n	8002170 <_printf_i+0x28>
 8002182:	a101      	add	r1, pc, #4	; (adr r1, 8002188 <_printf_i+0x40>)
 8002184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002188:	080021e1 	.word	0x080021e1
 800218c:	080021f5 	.word	0x080021f5
 8002190:	08002171 	.word	0x08002171
 8002194:	08002171 	.word	0x08002171
 8002198:	08002171 	.word	0x08002171
 800219c:	08002171 	.word	0x08002171
 80021a0:	080021f5 	.word	0x080021f5
 80021a4:	08002171 	.word	0x08002171
 80021a8:	08002171 	.word	0x08002171
 80021ac:	08002171 	.word	0x08002171
 80021b0:	08002171 	.word	0x08002171
 80021b4:	08002301 	.word	0x08002301
 80021b8:	08002225 	.word	0x08002225
 80021bc:	080022e3 	.word	0x080022e3
 80021c0:	08002171 	.word	0x08002171
 80021c4:	08002171 	.word	0x08002171
 80021c8:	08002323 	.word	0x08002323
 80021cc:	08002171 	.word	0x08002171
 80021d0:	08002225 	.word	0x08002225
 80021d4:	08002171 	.word	0x08002171
 80021d8:	08002171 	.word	0x08002171
 80021dc:	080022eb 	.word	0x080022eb
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	1d1a      	adds	r2, r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	602a      	str	r2, [r5, #0]
 80021e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0a3      	b.n	800233c <_printf_i+0x1f4>
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	6829      	ldr	r1, [r5, #0]
 80021f8:	0606      	lsls	r6, r0, #24
 80021fa:	f101 0304 	add.w	r3, r1, #4
 80021fe:	d50a      	bpl.n	8002216 <_printf_i+0xce>
 8002200:	680e      	ldr	r6, [r1, #0]
 8002202:	602b      	str	r3, [r5, #0]
 8002204:	2e00      	cmp	r6, #0
 8002206:	da03      	bge.n	8002210 <_printf_i+0xc8>
 8002208:	232d      	movs	r3, #45	; 0x2d
 800220a:	4276      	negs	r6, r6
 800220c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002210:	485e      	ldr	r0, [pc, #376]	; (800238c <_printf_i+0x244>)
 8002212:	230a      	movs	r3, #10
 8002214:	e019      	b.n	800224a <_printf_i+0x102>
 8002216:	680e      	ldr	r6, [r1, #0]
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800221e:	bf18      	it	ne
 8002220:	b236      	sxthne	r6, r6
 8002222:	e7ef      	b.n	8002204 <_printf_i+0xbc>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	6820      	ldr	r0, [r4, #0]
 8002228:	1d19      	adds	r1, r3, #4
 800222a:	6029      	str	r1, [r5, #0]
 800222c:	0601      	lsls	r1, r0, #24
 800222e:	d501      	bpl.n	8002234 <_printf_i+0xec>
 8002230:	681e      	ldr	r6, [r3, #0]
 8002232:	e002      	b.n	800223a <_printf_i+0xf2>
 8002234:	0646      	lsls	r6, r0, #25
 8002236:	d5fb      	bpl.n	8002230 <_printf_i+0xe8>
 8002238:	881e      	ldrh	r6, [r3, #0]
 800223a:	4854      	ldr	r0, [pc, #336]	; (800238c <_printf_i+0x244>)
 800223c:	2f6f      	cmp	r7, #111	; 0x6f
 800223e:	bf0c      	ite	eq
 8002240:	2308      	moveq	r3, #8
 8002242:	230a      	movne	r3, #10
 8002244:	2100      	movs	r1, #0
 8002246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800224a:	6865      	ldr	r5, [r4, #4]
 800224c:	60a5      	str	r5, [r4, #8]
 800224e:	2d00      	cmp	r5, #0
 8002250:	bfa2      	ittt	ge
 8002252:	6821      	ldrge	r1, [r4, #0]
 8002254:	f021 0104 	bicge.w	r1, r1, #4
 8002258:	6021      	strge	r1, [r4, #0]
 800225a:	b90e      	cbnz	r6, 8002260 <_printf_i+0x118>
 800225c:	2d00      	cmp	r5, #0
 800225e:	d04d      	beq.n	80022fc <_printf_i+0x1b4>
 8002260:	4615      	mov	r5, r2
 8002262:	fbb6 f1f3 	udiv	r1, r6, r3
 8002266:	fb03 6711 	mls	r7, r3, r1, r6
 800226a:	5dc7      	ldrb	r7, [r0, r7]
 800226c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002270:	4637      	mov	r7, r6
 8002272:	42bb      	cmp	r3, r7
 8002274:	460e      	mov	r6, r1
 8002276:	d9f4      	bls.n	8002262 <_printf_i+0x11a>
 8002278:	2b08      	cmp	r3, #8
 800227a:	d10b      	bne.n	8002294 <_printf_i+0x14c>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	07de      	lsls	r6, r3, #31
 8002280:	d508      	bpl.n	8002294 <_printf_i+0x14c>
 8002282:	6923      	ldr	r3, [r4, #16]
 8002284:	6861      	ldr	r1, [r4, #4]
 8002286:	4299      	cmp	r1, r3
 8002288:	bfde      	ittt	le
 800228a:	2330      	movle	r3, #48	; 0x30
 800228c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002294:	1b52      	subs	r2, r2, r5
 8002296:	6122      	str	r2, [r4, #16]
 8002298:	f8cd a000 	str.w	sl, [sp]
 800229c:	464b      	mov	r3, r9
 800229e:	aa03      	add	r2, sp, #12
 80022a0:	4621      	mov	r1, r4
 80022a2:	4640      	mov	r0, r8
 80022a4:	f7ff fee2 	bl	800206c <_printf_common>
 80022a8:	3001      	adds	r0, #1
 80022aa:	d14c      	bne.n	8002346 <_printf_i+0x1fe>
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	b004      	add	sp, #16
 80022b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022b6:	4835      	ldr	r0, [pc, #212]	; (800238c <_printf_i+0x244>)
 80022b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80022bc:	6829      	ldr	r1, [r5, #0]
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80022c4:	6029      	str	r1, [r5, #0]
 80022c6:	061d      	lsls	r5, r3, #24
 80022c8:	d514      	bpl.n	80022f4 <_printf_i+0x1ac>
 80022ca:	07df      	lsls	r7, r3, #31
 80022cc:	bf44      	itt	mi
 80022ce:	f043 0320 	orrmi.w	r3, r3, #32
 80022d2:	6023      	strmi	r3, [r4, #0]
 80022d4:	b91e      	cbnz	r6, 80022de <_printf_i+0x196>
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f023 0320 	bic.w	r3, r3, #32
 80022dc:	6023      	str	r3, [r4, #0]
 80022de:	2310      	movs	r3, #16
 80022e0:	e7b0      	b.n	8002244 <_printf_i+0xfc>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f043 0320 	orr.w	r3, r3, #32
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	2378      	movs	r3, #120	; 0x78
 80022ec:	4828      	ldr	r0, [pc, #160]	; (8002390 <_printf_i+0x248>)
 80022ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022f2:	e7e3      	b.n	80022bc <_printf_i+0x174>
 80022f4:	0659      	lsls	r1, r3, #25
 80022f6:	bf48      	it	mi
 80022f8:	b2b6      	uxthmi	r6, r6
 80022fa:	e7e6      	b.n	80022ca <_printf_i+0x182>
 80022fc:	4615      	mov	r5, r2
 80022fe:	e7bb      	b.n	8002278 <_printf_i+0x130>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	6826      	ldr	r6, [r4, #0]
 8002304:	6961      	ldr	r1, [r4, #20]
 8002306:	1d18      	adds	r0, r3, #4
 8002308:	6028      	str	r0, [r5, #0]
 800230a:	0635      	lsls	r5, r6, #24
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	d501      	bpl.n	8002314 <_printf_i+0x1cc>
 8002310:	6019      	str	r1, [r3, #0]
 8002312:	e002      	b.n	800231a <_printf_i+0x1d2>
 8002314:	0670      	lsls	r0, r6, #25
 8002316:	d5fb      	bpl.n	8002310 <_printf_i+0x1c8>
 8002318:	8019      	strh	r1, [r3, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	6123      	str	r3, [r4, #16]
 800231e:	4615      	mov	r5, r2
 8002320:	e7ba      	b.n	8002298 <_printf_i+0x150>
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	1d1a      	adds	r2, r3, #4
 8002326:	602a      	str	r2, [r5, #0]
 8002328:	681d      	ldr	r5, [r3, #0]
 800232a:	6862      	ldr	r2, [r4, #4]
 800232c:	2100      	movs	r1, #0
 800232e:	4628      	mov	r0, r5
 8002330:	f7fd ff5e 	bl	80001f0 <memchr>
 8002334:	b108      	cbz	r0, 800233a <_printf_i+0x1f2>
 8002336:	1b40      	subs	r0, r0, r5
 8002338:	6060      	str	r0, [r4, #4]
 800233a:	6863      	ldr	r3, [r4, #4]
 800233c:	6123      	str	r3, [r4, #16]
 800233e:	2300      	movs	r3, #0
 8002340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002344:	e7a8      	b.n	8002298 <_printf_i+0x150>
 8002346:	6923      	ldr	r3, [r4, #16]
 8002348:	462a      	mov	r2, r5
 800234a:	4649      	mov	r1, r9
 800234c:	4640      	mov	r0, r8
 800234e:	47d0      	blx	sl
 8002350:	3001      	adds	r0, #1
 8002352:	d0ab      	beq.n	80022ac <_printf_i+0x164>
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	079b      	lsls	r3, r3, #30
 8002358:	d413      	bmi.n	8002382 <_printf_i+0x23a>
 800235a:	68e0      	ldr	r0, [r4, #12]
 800235c:	9b03      	ldr	r3, [sp, #12]
 800235e:	4298      	cmp	r0, r3
 8002360:	bfb8      	it	lt
 8002362:	4618      	movlt	r0, r3
 8002364:	e7a4      	b.n	80022b0 <_printf_i+0x168>
 8002366:	2301      	movs	r3, #1
 8002368:	4632      	mov	r2, r6
 800236a:	4649      	mov	r1, r9
 800236c:	4640      	mov	r0, r8
 800236e:	47d0      	blx	sl
 8002370:	3001      	adds	r0, #1
 8002372:	d09b      	beq.n	80022ac <_printf_i+0x164>
 8002374:	3501      	adds	r5, #1
 8002376:	68e3      	ldr	r3, [r4, #12]
 8002378:	9903      	ldr	r1, [sp, #12]
 800237a:	1a5b      	subs	r3, r3, r1
 800237c:	42ab      	cmp	r3, r5
 800237e:	dcf2      	bgt.n	8002366 <_printf_i+0x21e>
 8002380:	e7eb      	b.n	800235a <_printf_i+0x212>
 8002382:	2500      	movs	r5, #0
 8002384:	f104 0619 	add.w	r6, r4, #25
 8002388:	e7f5      	b.n	8002376 <_printf_i+0x22e>
 800238a:	bf00      	nop
 800238c:	08002609 	.word	0x08002609
 8002390:	0800261a 	.word	0x0800261a

08002394 <_sbrk_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d06      	ldr	r5, [pc, #24]	; (80023b0 <_sbrk_r+0x1c>)
 8002398:	2300      	movs	r3, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	f7fe fa06 	bl	80007b0 <_sbrk>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d102      	bne.n	80023ae <_sbrk_r+0x1a>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	b103      	cbz	r3, 80023ae <_sbrk_r+0x1a>
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	200000d8 	.word	0x200000d8

080023b4 <__sread>:
 80023b4:	b510      	push	{r4, lr}
 80023b6:	460c      	mov	r4, r1
 80023b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023bc:	f000 f8a0 	bl	8002500 <_read_r>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	bfab      	itete	ge
 80023c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023c6:	89a3      	ldrhlt	r3, [r4, #12]
 80023c8:	181b      	addge	r3, r3, r0
 80023ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023ce:	bfac      	ite	ge
 80023d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80023d2:	81a3      	strhlt	r3, [r4, #12]
 80023d4:	bd10      	pop	{r4, pc}

080023d6 <__swrite>:
 80023d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023da:	461f      	mov	r7, r3
 80023dc:	898b      	ldrh	r3, [r1, #12]
 80023de:	05db      	lsls	r3, r3, #23
 80023e0:	4605      	mov	r5, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4616      	mov	r6, r2
 80023e6:	d505      	bpl.n	80023f4 <__swrite+0x1e>
 80023e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ec:	2302      	movs	r3, #2
 80023ee:	2200      	movs	r2, #0
 80023f0:	f000 f868 	bl	80024c4 <_lseek_r>
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fe:	81a3      	strh	r3, [r4, #12]
 8002400:	4632      	mov	r2, r6
 8002402:	463b      	mov	r3, r7
 8002404:	4628      	mov	r0, r5
 8002406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800240a:	f000 b817 	b.w	800243c <_write_r>

0800240e <__sseek>:
 800240e:	b510      	push	{r4, lr}
 8002410:	460c      	mov	r4, r1
 8002412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002416:	f000 f855 	bl	80024c4 <_lseek_r>
 800241a:	1c43      	adds	r3, r0, #1
 800241c:	89a3      	ldrh	r3, [r4, #12]
 800241e:	bf15      	itete	ne
 8002420:	6560      	strne	r0, [r4, #84]	; 0x54
 8002422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800242a:	81a3      	strheq	r3, [r4, #12]
 800242c:	bf18      	it	ne
 800242e:	81a3      	strhne	r3, [r4, #12]
 8002430:	bd10      	pop	{r4, pc}

08002432 <__sclose>:
 8002432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002436:	f000 b813 	b.w	8002460 <_close_r>
	...

0800243c <_write_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4d07      	ldr	r5, [pc, #28]	; (800245c <_write_r+0x20>)
 8002440:	4604      	mov	r4, r0
 8002442:	4608      	mov	r0, r1
 8002444:	4611      	mov	r1, r2
 8002446:	2200      	movs	r2, #0
 8002448:	602a      	str	r2, [r5, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	f7fe f963 	bl	8000716 <_write>
 8002450:	1c43      	adds	r3, r0, #1
 8002452:	d102      	bne.n	800245a <_write_r+0x1e>
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	b103      	cbz	r3, 800245a <_write_r+0x1e>
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	200000d8 	.word	0x200000d8

08002460 <_close_r>:
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4d06      	ldr	r5, [pc, #24]	; (800247c <_close_r+0x1c>)
 8002464:	2300      	movs	r3, #0
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	602b      	str	r3, [r5, #0]
 800246c:	f7fe f96f 	bl	800074e <_close>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d102      	bne.n	800247a <_close_r+0x1a>
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	b103      	cbz	r3, 800247a <_close_r+0x1a>
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	200000d8 	.word	0x200000d8

08002480 <_fstat_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4d07      	ldr	r5, [pc, #28]	; (80024a0 <_fstat_r+0x20>)
 8002484:	2300      	movs	r3, #0
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	602b      	str	r3, [r5, #0]
 800248e:	f7fe f969 	bl	8000764 <_fstat>
 8002492:	1c43      	adds	r3, r0, #1
 8002494:	d102      	bne.n	800249c <_fstat_r+0x1c>
 8002496:	682b      	ldr	r3, [r5, #0]
 8002498:	b103      	cbz	r3, 800249c <_fstat_r+0x1c>
 800249a:	6023      	str	r3, [r4, #0]
 800249c:	bd38      	pop	{r3, r4, r5, pc}
 800249e:	bf00      	nop
 80024a0:	200000d8 	.word	0x200000d8

080024a4 <_isatty_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4d06      	ldr	r5, [pc, #24]	; (80024c0 <_isatty_r+0x1c>)
 80024a8:	2300      	movs	r3, #0
 80024aa:	4604      	mov	r4, r0
 80024ac:	4608      	mov	r0, r1
 80024ae:	602b      	str	r3, [r5, #0]
 80024b0:	f7fe f967 	bl	8000782 <_isatty>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d102      	bne.n	80024be <_isatty_r+0x1a>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	b103      	cbz	r3, 80024be <_isatty_r+0x1a>
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	200000d8 	.word	0x200000d8

080024c4 <_lseek_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4d07      	ldr	r5, [pc, #28]	; (80024e4 <_lseek_r+0x20>)
 80024c8:	4604      	mov	r4, r0
 80024ca:	4608      	mov	r0, r1
 80024cc:	4611      	mov	r1, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	602a      	str	r2, [r5, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7fe f95f 	bl	8000796 <_lseek>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d102      	bne.n	80024e2 <_lseek_r+0x1e>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	b103      	cbz	r3, 80024e2 <_lseek_r+0x1e>
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
 80024e4:	200000d8 	.word	0x200000d8

080024e8 <__malloc_lock>:
 80024e8:	4801      	ldr	r0, [pc, #4]	; (80024f0 <__malloc_lock+0x8>)
 80024ea:	f7ff bb21 	b.w	8001b30 <__retarget_lock_acquire_recursive>
 80024ee:	bf00      	nop
 80024f0:	200000cc 	.word	0x200000cc

080024f4 <__malloc_unlock>:
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <__malloc_unlock+0x8>)
 80024f6:	f7ff bb1c 	b.w	8001b32 <__retarget_lock_release_recursive>
 80024fa:	bf00      	nop
 80024fc:	200000cc 	.word	0x200000cc

08002500 <_read_r>:
 8002500:	b538      	push	{r3, r4, r5, lr}
 8002502:	4d07      	ldr	r5, [pc, #28]	; (8002520 <_read_r+0x20>)
 8002504:	4604      	mov	r4, r0
 8002506:	4608      	mov	r0, r1
 8002508:	4611      	mov	r1, r2
 800250a:	2200      	movs	r2, #0
 800250c:	602a      	str	r2, [r5, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	f7fe f8e4 	bl	80006dc <_read>
 8002514:	1c43      	adds	r3, r0, #1
 8002516:	d102      	bne.n	800251e <_read_r+0x1e>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	b103      	cbz	r3, 800251e <_read_r+0x1e>
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	bd38      	pop	{r3, r4, r5, pc}
 8002520:	200000d8 	.word	0x200000d8

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
