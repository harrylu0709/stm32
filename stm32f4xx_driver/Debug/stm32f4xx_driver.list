
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000080  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022d6  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000800  00000000  00000000  0002238c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00022b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000278  00000000  00000000  00022e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bcd  00000000  00000000  000230d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003085  00000000  00000000  00026ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c249  00000000  00000000  00029d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00035f73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012d4  00000000  00000000  00035fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002764 	.word	0x08002764

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08002764 	.word	0x08002764

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <delay>:
#define MY_ADDR 0x61

#define SLAVE_ADDR  0x68

void delay(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;//,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <GPIO_ButtonInit+0x2c>)
 80002d4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002da:	2300      	movs	r3, #0
 80002dc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fb0b 	bl	8000904 <GPIO_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <I2C1_GPIOinits>:

void I2C1_GPIOinits(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1Pins;

    I2C1Pins.pGPIOx = GPIOB;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <I2C1_GPIOinits+0x40>)
 8000304:	607b      	str	r3, [r7, #4]
    I2C1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000306:	2302      	movs	r3, #2
 8000308:	727b      	strb	r3, [r7, #9]
    I2C1Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800030a:	2301      	movs	r3, #1
 800030c:	733b      	strb	r3, [r7, #12]
    I2C1Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800030e:	2301      	movs	r3, #1
 8000310:	72fb      	strb	r3, [r7, #11]
    I2C1Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000312:	2304      	movs	r3, #4
 8000314:	737b      	strb	r3, [r7, #13]
    I2C1Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000316:	2302      	movs	r3, #2
 8000318:	72bb      	strb	r3, [r7, #10]

    //scl
    I2C1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800031a:	2306      	movs	r3, #6
 800031c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C1Pins);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 faef 	bl	8000904 <GPIO_Init>
    // //scl
    // I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
    // GPIO_Init(&I2CPins);

    //sda
    I2C1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000326:	2307      	movs	r3, #7
 8000328:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C1Pins);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fae9 	bl	8000904 <GPIO_Init>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40020400 	.word	0x40020400

08000340 <I2C2_GPIOinits>:

void I2C2_GPIOinits(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C2Pins;

    I2C2Pins.pGPIOx = GPIOB;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <I2C2_GPIOinits+0x40>)
 8000348:	607b      	str	r3, [r7, #4]
    I2C2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800034a:	2302      	movs	r3, #2
 800034c:	727b      	strb	r3, [r7, #9]
    I2C2Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800034e:	2301      	movs	r3, #1
 8000350:	733b      	strb	r3, [r7, #12]
    I2C2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000352:	2301      	movs	r3, #1
 8000354:	72fb      	strb	r3, [r7, #11]
    I2C2Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000356:	2304      	movs	r3, #4
 8000358:	737b      	strb	r3, [r7, #13]
    I2C2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	72bb      	strb	r3, [r7, #10]

    //scl
    I2C2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800035e:	230a      	movs	r3, #10
 8000360:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C2Pins);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 facd 	bl	8000904 <GPIO_Init>

    //sda
    I2C2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800036a:	230b      	movs	r3, #11
 800036c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2C2Pins);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fac7 	bl	8000904 <GPIO_Init>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40020400 	.word	0x40020400

08000384 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <I2C1_Inits+0x2c>)
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <I2C1_Inits+0x30>)
 800038c:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <I2C1_Inits+0x2c>)
 8000390:	2201      	movs	r2, #1
 8000392:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <I2C1_Inits+0x2c>)
 8000396:	2261      	movs	r2, #97	; 0x61
 8000398:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <I2C1_Inits+0x2c>)
 800039c:	2200      	movs	r2, #0
 800039e:	815a      	strh	r2, [r3, #10]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <I2C1_Inits+0x2c>)
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <I2C1_Inits+0x34>)
 80003a4:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C1Handle);
 80003a6:	4802      	ldr	r0, [pc, #8]	; (80003b0 <I2C1_Inits+0x2c>)
 80003a8:	f000 fd8a 	bl	8000ec0 <I2C_Init>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200000a8 	.word	0x200000a8
 80003b4:	40005400 	.word	0x40005400
 80003b8:	000186a0 	.word	0x000186a0

080003bc <I2C2_Inits>:

void I2C2_Inits(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    I2C2Handle.pI2Cx = I2C2;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <I2C2_Inits+0x2c>)
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <I2C2_Inits+0x30>)
 80003c4:	601a      	str	r2, [r3, #0]
    I2C2Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <I2C2_Inits+0x2c>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	725a      	strb	r2, [r3, #9]
    I2C2Handle.I2C_Config.I2C_DeviceAddress = SLAVE_ADDR;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <I2C2_Inits+0x2c>)
 80003ce:	2268      	movs	r2, #104	; 0x68
 80003d0:	721a      	strb	r2, [r3, #8]
    I2C2Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <I2C2_Inits+0x2c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	815a      	strh	r2, [r3, #10]
    I2C2Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <I2C2_Inits+0x2c>)
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <I2C2_Inits+0x34>)
 80003dc:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C2Handle);
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <I2C2_Inits+0x2c>)
 80003e0:	f000 fd6e 	bl	8000ec0 <I2C_Init>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000d0 	.word	0x200000d0
 80003ec:	40005800 	.word	0x40005800
 80003f0:	000186a0 	.word	0x000186a0

080003f4 <main>:

int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af02      	add	r7, sp, #8
	// printf("start\n");
    GPIO_ButtonInit();
 80003fa:	f7ff ff67 	bl	80002cc <GPIO_ButtonInit>

    I2C1_GPIOinits();
 80003fe:	f7ff ff7d 	bl	80002fc <I2C1_GPIOinits>

    I2C1_Inits();
 8000402:	f7ff ffbf 	bl	8000384 <I2C1_Inits>


    //I2C IRQ configuration
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000406:	2101      	movs	r1, #1
 8000408:	201f      	movs	r0, #31
 800040a:	f000 fecb 	bl	80011a4 <I2C_IRQInterruptConfig>
    I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 800040e:	2101      	movs	r1, #1
 8000410:	2020      	movs	r0, #32
 8000412:	f000 fec7 	bl	80011a4 <I2C_IRQInterruptConfig>
    I2C_PeripheralControl(I2C1, ENABLE);
 8000416:	2101      	movs	r1, #1
 8000418:	481a      	ldr	r0, [pc, #104]	; (8000484 <main+0x90>)
 800041a:	f000 fd36 	bl	8000e8a <I2C_PeripheralControl>


    //ack bit is made 1 after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800041e:	2101      	movs	r1, #1
 8000420:	4818      	ldr	r0, [pc, #96]	; (8000484 <main+0x90>)
 8000422:	f000 fe4b 	bl	80010bc <I2C_ManageAcking>


    I2C2_GPIOinits();
 8000426:	f7ff ff8b 	bl	8000340 <I2C2_GPIOinits>

    I2C2_Inits();
 800042a:	f7ff ffc7 	bl	80003bc <I2C2_Inits>
    //I2C IRQ configuration
    I2C_IRQInterruptConfig(IRQ_NO_I2C2_EV, ENABLE);
 800042e:	2101      	movs	r1, #1
 8000430:	2021      	movs	r0, #33	; 0x21
 8000432:	f000 feb7 	bl	80011a4 <I2C_IRQInterruptConfig>
    I2C_IRQInterruptConfig(IRQ_NO_I2C2_ER, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	2022      	movs	r0, #34	; 0x22
 800043a:	f000 feb3 	bl	80011a4 <I2C_IRQInterruptConfig>
    I2C_PeripheralControl(I2C2, ENABLE);
 800043e:	2101      	movs	r1, #1
 8000440:	4811      	ldr	r0, [pc, #68]	; (8000488 <main+0x94>)
 8000442:	f000 fd22 	bl	8000e8a <I2C_PeripheralControl>

    //ack bit is made 1 after PE = 1
    I2C_ManageAcking(I2C2, I2C_ACK_ENABLE);
 8000446:	2101      	movs	r1, #1
 8000448:	480f      	ldr	r0, [pc, #60]	; (8000488 <main+0x94>)
 800044a:	f000 fe37 	bl	80010bc <I2C_ManageAcking>

    while(1)
    {
 //		//wait till button is pressed
 		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800044e:	bf00      	nop
 8000450:	2100      	movs	r1, #0
 8000452:	480e      	ldr	r0, [pc, #56]	; (800048c <main+0x98>)
 8000454:	f000 fbf2 	bl	8000c3c <GPIO_ReadFromInputPin>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f8      	beq.n	8000450 <main+0x5c>

 		//to avoid button de-bouncing related issues 200ms of delay
 		delay();
 800045e:	f7ff ff1f 	bl	80002a0 <delay>

 		//send some data to the slave

 		// I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data), SLAVE_ADDR, 0);
        while(I2C_MasterSendDataIT(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR, 0) != I2C_READY);
 8000462:	bf00      	nop
 8000464:	480a      	ldr	r0, [pc, #40]	; (8000490 <main+0x9c>)
 8000466:	f7ff fec3 	bl	80001f0 <strlen>
 800046a:	4602      	mov	r2, r0
 800046c:	2300      	movs	r3, #0
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2368      	movs	r3, #104	; 0x68
 8000472:	4907      	ldr	r1, [pc, #28]	; (8000490 <main+0x9c>)
 8000474:	4807      	ldr	r0, [pc, #28]	; (8000494 <main+0xa0>)
 8000476:	f000 fdcb 	bl	8001010 <I2C_MasterSendDataIT>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f1      	bne.n	8000464 <main+0x70>
 		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000480:	e7e5      	b.n	800044e <main+0x5a>
 8000482:	bf00      	nop
 8000484:	40005400 	.word	0x40005400
 8000488:	40005800 	.word	0x40005800
 800048c:	40020000 	.word	0x40020000
 8000490:	20000004 	.word	0x20000004
 8000494:	200000a8 	.word	0x200000a8

08000498 <I2C1_EV_IRQHandler>:

    }
}

void I2C1_EV_IRQHandler(void)
{   
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    // printf("i2c1 ev\n");
    I2C_EV_IRQHandling(&I2C1Handle, &I2C2Handle);
 800049c:	4902      	ldr	r1, [pc, #8]	; (80004a8 <I2C1_EV_IRQHandler+0x10>)
 800049e:	4803      	ldr	r0, [pc, #12]	; (80004ac <I2C1_EV_IRQHandler+0x14>)
 80004a0:	f000 ff78 	bl	8001394 <I2C_EV_IRQHandling>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200000d0 	.word	0x200000d0
 80004ac:	200000a8 	.word	0x200000a8

080004b0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    // printf("i2c1 ev\n");
    I2C_ER_IRQHandling(&I2C1Handle);
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <I2C1_ER_IRQHandler+0x10>)
 80004b6:	f001 f8a1 	bl	80015fc <I2C_ER_IRQHandling>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200000a8 	.word	0x200000a8

080004c4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{   
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    // printf("i2c2 ev\n");
    I2C_EV_IRQHandling(&I2C2Handle, &I2C1Handle);
 80004c8:	4902      	ldr	r1, [pc, #8]	; (80004d4 <I2C2_EV_IRQHandler+0x10>)
 80004ca:	4803      	ldr	r0, [pc, #12]	; (80004d8 <I2C2_EV_IRQHandler+0x14>)
 80004cc:	f000 ff62 	bl	8001394 <I2C_EV_IRQHandling>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000a8 	.word	0x200000a8
 80004d8:	200000d0 	.word	0x200000d0

080004dc <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    // printf("i2c2 er\n");
    I2C_ER_IRQHandling(&I2C2Handle);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <I2C2_ER_IRQHandler+0x10>)
 80004e2:	f001 f88b 	bl	80015fc <I2C_ER_IRQHandling>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000d0 	.word	0x200000d0

080004f0 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	70fb      	strb	r3, [r7, #3]
    if(AppEv == I2C_EV_TX_CMPLT)
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <I2C_ApplicationEventCallback+0x1a>
    {
        printf("Tx is complete\n");
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <I2C_ApplicationEventCallback+0x50>)
 8000504:	f001 f9b8 	bl	8001878 <puts>
        I2C_GenerateStopCondition(I2C1);

        //Hang in infinite loop
        while(1);
    } 
}
 8000508:	e016      	b.n	8000538 <I2C_ApplicationEventCallback+0x48>
    else if(AppEv == I2C_EV_RX_CMPLT)
 800050a:	78fb      	ldrb	r3, [r7, #3]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d106      	bne.n	800051e <I2C_ApplicationEventCallback+0x2e>
        printf("Rx is complete\n");
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <I2C_ApplicationEventCallback+0x54>)
 8000512:	f001 f9b1 	bl	8001878 <puts>
        RxComplt = SET;
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <I2C_ApplicationEventCallback+0x58>)
 8000518:	2201      	movs	r2, #1
 800051a:	701a      	strb	r2, [r3, #0]
}
 800051c:	e00c      	b.n	8000538 <I2C_ApplicationEventCallback+0x48>
    else if(AppEv == I2C_ERROR_AF)
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	2b05      	cmp	r3, #5
 8000522:	d109      	bne.n	8000538 <I2C_ApplicationEventCallback+0x48>
        printf("Error: Ack failure\n");
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <I2C_ApplicationEventCallback+0x5c>)
 8000526:	f001 f9a7 	bl	8001878 <puts>
        I2C_CloseSendData(pI2CHandle);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f001 f844 	bl	80015b8 <I2C_CloseSendData>
        I2C_GenerateStopCondition(I2C1);
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <I2C_ApplicationEventCallback+0x60>)
 8000532:	f000 fc08 	bl	8000d46 <I2C_GenerateStopCondition>
        while(1);
 8000536:	e7fe      	b.n	8000536 <I2C_ApplicationEventCallback+0x46>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	0800277c 	.word	0x0800277c
 8000544:	0800278c 	.word	0x0800278c
 8000548:	20000000 	.word	0x20000000
 800054c:	0800279c 	.word	0x0800279c
 8000550:	40005400 	.word	0x40005400

08000554 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <ITM_SendChar+0x44>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <ITM_SendChar+0x44>)
 8000564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000568:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <ITM_SendChar+0x48>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0b      	ldr	r2, [pc, #44]	; (800059c <ITM_SendChar+0x48>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000576:	bf00      	nop
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f8      	beq.n	8000578 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000586:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	e000edfc 	.word	0xe000edfc
 800059c:	e0000e00 	.word	0xe0000e00

080005a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	e00a      	b.n	80005c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005b2:	f3af 8000 	nop.w
 80005b6:	4601      	mov	r1, r0
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	60ba      	str	r2, [r7, #8]
 80005be:	b2ca      	uxtb	r2, r1
 80005c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	3301      	adds	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dbf0      	blt.n	80005b2 <_read+0x12>
	}

return len;
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e009      	b.n	8000600 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffad 	bl	8000554 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbf1      	blt.n	80005ec <_write+0x12>
	}
	return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_close>:

int _close(int file)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	return -1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000638:	605a      	str	r2, [r3, #4]
	return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <_isatty>:

int _isatty(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	return 1;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
	...

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f001 f830 	bl	8001708 <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20020000 	.word	0x20020000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	200000f8 	.word	0x200000f8
 80006dc:	20000110 	.word	0x20000110

080006e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070e:	f001 f801 	bl	8001714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff fe6f 	bl	80003f4 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   r0, =_estack
 8000718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000724:	08002860 	.word	0x08002860
  ldr r2, =_sbss
 8000728:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800072c:	2000010c 	.word	0x2000010c

08000730 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC_IRQHandler>
	...

08000734 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d162      	bne.n	800080c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a64      	ldr	r2, [pc, #400]	; (80008dc <GPIO_PeriClockControl+0x1a8>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d106      	bne.n	800075c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800074e:	4b64      	ldr	r3, [pc, #400]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a63      	ldr	r2, [pc, #396]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}
	}

}
 800075a:	e0b9      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a61      	ldr	r2, [pc, #388]	; (80008e4 <GPIO_PeriClockControl+0x1b0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d106      	bne.n	8000772 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000764:	4b5e      	ldr	r3, [pc, #376]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	4a5d      	ldr	r2, [pc, #372]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000770:	e0ae      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a5c      	ldr	r2, [pc, #368]	; (80008e8 <GPIO_PeriClockControl+0x1b4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d106      	bne.n	8000788 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800077a:	4b59      	ldr	r3, [pc, #356]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a58      	ldr	r2, [pc, #352]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000786:	e0a3      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a58      	ldr	r2, [pc, #352]	; (80008ec <GPIO_PeriClockControl+0x1b8>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000790:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a52      	ldr	r2, [pc, #328]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800079c:	e098      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a53      	ldr	r2, [pc, #332]	; (80008f0 <GPIO_PeriClockControl+0x1bc>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d106      	bne.n	80007b4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007a6:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a4d      	ldr	r2, [pc, #308]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b2:	e08d      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a4f      	ldr	r2, [pc, #316]	; (80008f4 <GPIO_PeriClockControl+0x1c0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d106      	bne.n	80007ca <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80007bc:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a47      	ldr	r2, [pc, #284]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007c2:	f043 0320 	orr.w	r3, r3, #32
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c8:	e082      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a4a      	ldr	r2, [pc, #296]	; (80008f8 <GPIO_PeriClockControl+0x1c4>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d106      	bne.n	80007e0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007de:	e077      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a46      	ldr	r2, [pc, #280]	; (80008fc <GPIO_PeriClockControl+0x1c8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d106      	bne.n	80007f6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80007e8:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4a3c      	ldr	r2, [pc, #240]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80007ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f4:	e06c      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a41      	ldr	r2, [pc, #260]	; (8000900 <GPIO_PeriClockControl+0x1cc>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d168      	bne.n	80008d0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a37      	ldr	r2, [pc, #220]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
}
 800080a:	e061      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <GPIO_PeriClockControl+0x1a8>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	4a31      	ldr	r2, [pc, #196]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000820:	e056      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <GPIO_PeriClockControl+0x1b0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000830:	f023 0302 	bic.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000836:	e04b      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <GPIO_PeriClockControl+0x1b4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000846:	f023 0304 	bic.w	r3, r3, #4
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800084c:	e040      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <GPIO_PeriClockControl+0x1b8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800085c:	f023 0308 	bic.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000862:	e035      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <GPIO_PeriClockControl+0x1bc>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d106      	bne.n	800087a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000872:	f023 0310 	bic.w	r3, r3, #16
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000878:	e02a      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <GPIO_PeriClockControl+0x1c0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 8000888:	f023 0320 	bic.w	r3, r3, #32
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088e:	e01f      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <GPIO_PeriClockControl+0x1c4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 800089e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a4:	e014      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <GPIO_PeriClockControl+0x1c8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80008b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ba:	e009      	b.n	80008d0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <GPIO_PeriClockControl+0x1cc>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d105      	bne.n	80008d0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <GPIO_PeriClockControl+0x1ac>)
 80008ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40021c00 	.word	0x40021c00
 8000900:	40022000 	.word	0x40022000

08000904 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff0c 	bl	8000734 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	795b      	ldrb	r3, [r3, #5]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d820      	bhi.n	8000966 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	461a      	mov	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2103      	movs	r1, #3
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	400a      	ands	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6819      	ldr	r1, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	430a      	orrs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	e0cb      	b.n	8000afe <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	2b04      	cmp	r3, #4
 800096c:	d117      	bne.n	800099e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <GPIO_Init+0x198>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	7912      	ldrb	r2, [r2, #4]
 8000976:	4611      	mov	r1, r2
 8000978:	2201      	movs	r2, #1
 800097a:	408a      	lsls	r2, r1
 800097c:	4611      	mov	r1, r2
 800097e:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <GPIO_Init+0x198>)
 8000980:	430b      	orrs	r3, r1
 8000982:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <GPIO_Init+0x198>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	7912      	ldrb	r2, [r2, #4]
 800098c:	4611      	mov	r1, r2
 800098e:	2201      	movs	r2, #1
 8000990:	408a      	lsls	r2, r1
 8000992:	43d2      	mvns	r2, r2
 8000994:	4611      	mov	r1, r2
 8000996:	4a41      	ldr	r2, [pc, #260]	; (8000a9c <GPIO_Init+0x198>)
 8000998:	400b      	ands	r3, r1
 800099a:	6093      	str	r3, [r2, #8]
 800099c:	e035      	b.n	8000a0a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d117      	bne.n	80009d6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <GPIO_Init+0x198>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	7912      	ldrb	r2, [r2, #4]
 80009ae:	4611      	mov	r1, r2
 80009b0:	2201      	movs	r2, #1
 80009b2:	408a      	lsls	r2, r1
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a39      	ldr	r2, [pc, #228]	; (8000a9c <GPIO_Init+0x198>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <GPIO_Init+0x198>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	7912      	ldrb	r2, [r2, #4]
 80009c4:	4611      	mov	r1, r2
 80009c6:	2201      	movs	r2, #1
 80009c8:	408a      	lsls	r2, r1
 80009ca:	43d2      	mvns	r2, r2
 80009cc:	4611      	mov	r1, r2
 80009ce:	4a33      	ldr	r2, [pc, #204]	; (8000a9c <GPIO_Init+0x198>)
 80009d0:	400b      	ands	r3, r1
 80009d2:	60d3      	str	r3, [r2, #12]
 80009d4:	e019      	b.n	8000a0a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d115      	bne.n	8000a0a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <GPIO_Init+0x198>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	7912      	ldrb	r2, [r2, #4]
 80009e6:	4611      	mov	r1, r2
 80009e8:	2201      	movs	r2, #1
 80009ea:	408a      	lsls	r2, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <GPIO_Init+0x198>)
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <GPIO_Init+0x198>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	7912      	ldrb	r2, [r2, #4]
 80009fc:	4611      	mov	r1, r2
 80009fe:	2201      	movs	r2, #1
 8000a00:	408a      	lsls	r2, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <GPIO_Init+0x198>)
 8000a06:	430b      	orrs	r3, r1
 8000a08:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <GPIO_Init+0x19c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d04e      	beq.n	8000ac4 <GPIO_Init+0x1c0>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <GPIO_Init+0x1a0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d032      	beq.n	8000a96 <GPIO_Init+0x192>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <GPIO_Init+0x1a4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d02b      	beq.n	8000a92 <GPIO_Init+0x18e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <GPIO_Init+0x1a8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d024      	beq.n	8000a8e <GPIO_Init+0x18a>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <GPIO_Init+0x1ac>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d01d      	beq.n	8000a8a <GPIO_Init+0x186>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <GPIO_Init+0x1b0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d016      	beq.n	8000a86 <GPIO_Init+0x182>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <GPIO_Init+0x1b4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00f      	beq.n	8000a82 <GPIO_Init+0x17e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <GPIO_Init+0x1b8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d008      	beq.n	8000a7e <GPIO_Init+0x17a>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <GPIO_Init+0x1bc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <GPIO_Init+0x176>
 8000a76:	2308      	movs	r3, #8
 8000a78:	e025      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e023      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a7e:	2307      	movs	r3, #7
 8000a80:	e021      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a82:	2306      	movs	r3, #6
 8000a84:	e01f      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a86:	2305      	movs	r3, #5
 8000a88:	e01d      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e01b      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e019      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e017      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e015      	b.n	8000ac6 <GPIO_Init+0x1c2>
 8000a9a:	bf00      	nop
 8000a9c:	40013c00 	.word	0x40013c00
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40021400 	.word	0x40021400
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	40021c00 	.word	0x40021c00
 8000ac0:	40022000 	.word	0x40022000
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000ac8:	4b59      	ldr	r3, [pc, #356]	; (8000c30 <GPIO_Init+0x32c>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	4a58      	ldr	r2, [pc, #352]	; (8000c30 <GPIO_Init+0x32c>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000ad4:	7c7a      	ldrb	r2, [r7, #17]
 8000ad6:	7cbb      	ldrb	r3, [r7, #18]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	fa02 f103 	lsl.w	r1, r2, r3
 8000ade:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <GPIO_Init+0x330>)
 8000ae0:	7cfb      	ldrb	r3, [r7, #19]
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000ae8:	4b53      	ldr	r3, [pc, #332]	; (8000c38 <GPIO_Init+0x334>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	7912      	ldrb	r2, [r2, #4]
 8000af0:	4611      	mov	r1, r2
 8000af2:	2201      	movs	r2, #1
 8000af4:	408a      	lsls	r2, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	4a4f      	ldr	r2, [pc, #316]	; (8000c38 <GPIO_Init+0x334>)
 8000afa:	430b      	orrs	r3, r1
 8000afc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	799b      	ldrb	r3, [r3, #6]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4619      	mov	r1, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	6899      	ldr	r1, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	79db      	ldrb	r3, [r3, #7]
 8000b42:	461a      	mov	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4619      	mov	r1, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68d9      	ldr	r1, [r3, #12]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7a1b      	ldrb	r3, [r3, #8]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	408b      	lsls	r3, r1
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	795b      	ldrb	r3, [r3, #5]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d131      	bne.n	8000c26 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	791b      	ldrb	r3, [r3, #4]
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	7c3a      	ldrb	r2, [r7, #16]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	220f      	movs	r2, #15
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	7c3a      	ldrb	r2, [r7, #16]
 8000bf4:	4001      	ands	r1, r0
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	7c3a      	ldrb	r2, [r7, #16]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7a5b      	ldrb	r3, [r3, #9]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	7c3a      	ldrb	r2, [r7, #16]
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	3208      	adds	r2, #8
 8000c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40013c00 	.word	0x40013c00

08000c3c <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]

   return value;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	611a      	str	r2, [r3, #16]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	// uint32_t dummyRead = pI2Cx->SR1;
	// dummyRead = pI2Cx->SR2;
	// (void)dummyRead;
	uint32_t dummyRead;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01f      	beq.n	8000d2e <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7f1b      	ldrb	r3, [r3, #28]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d112      	bne.n	8000d1c <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d11f      	bne.n	8000d3e <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f9d9 	bl	80010bc <I2C_ManageAcking>

				//clear ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	60fb      	str	r3, [r7, #12]
		//clear ADDR flag
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
}
 8000d1a:	e010      	b.n	8000d3e <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	60fb      	str	r3, [r7, #12]
}
 8000d2c:	e007      	b.n	8000d3e <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	60fb      	str	r3, [r7, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
	...

08000d74 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <RCC_GetPCLK1Value+0x9c>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000d88:	7a7b      	ldrb	r3, [r7, #9]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;	
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <RCC_GetPCLK1Value+0xa0>)
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e00b      	b.n	8000dac <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000d94:	7a7b      	ldrb	r3, [r7, #9]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d102      	bne.n	8000da0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;	
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <RCC_GetPCLK1Value+0xa4>)
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	e005      	b.n	8000dac <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 8000da0:	7a7b      	ldrb	r3, [r7, #9]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d102      	bne.n	8000dac <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();	
 8000da6:	f7ff ffdd 	bl	8000d64 <RCC_GetPLLOutputClock>
 8000daa:	60f8      	str	r0, [r7, #12]
	}

	//for ahb

	temp = ((RCC->CFGR >> 4) & 0xF);
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <RCC_GetPCLK1Value+0x9c>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f003 030f 	and.w	r3, r3, #15
 8000db8:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000dba:	7a3b      	ldrb	r3, [r7, #8]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d802      	bhi.n	8000dc6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	72fb      	strb	r3, [r7, #11]
 8000dc4:	e005      	b.n	8000dd2 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];	
 8000dc6:	7a3b      	ldrb	r3, [r7, #8]
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <RCC_GetPCLK1Value+0xa8>)
 8000dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd0:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1

	temp = ((RCC->CFGR >> 10) & 0x7);
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <RCC_GetPCLK1Value+0x9c>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	0a9b      	lsrs	r3, r3, #10
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000de0:	7a3b      	ldrb	r3, [r7, #8]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d802      	bhi.n	8000dec <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	72bb      	strb	r3, [r7, #10]
 8000dea:	e004      	b.n	8000df6 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];	
 8000dec:	7a3b      	ldrb	r3, [r7, #8]
 8000dee:	3b04      	subs	r3, #4
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <RCC_GetPCLK1Value+0xac>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahbp) / apb1p;
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dfe:	7abb      	ldrb	r3, [r7, #10]
 8000e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e04:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000e06:	687b      	ldr	r3, [r7, #4]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	00f42400 	.word	0x00f42400
 8000e18:	007a1200 	.word	0x007a1200
 8000e1c:	20000014 	.word	0x20000014
 8000e20:	20000024 	.word	0x20000024

08000e24 <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d112      	bne.n	8000e5c <I2C_SlaveEnableDisableCallbackEvents+0x38>
	{
		pI2Cx->CR2 |=  (1 << I2C_CR2_ITBUFEN);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |=  (1 << I2C_CR2_ITEVTEN);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |=  (1 << I2C_CR2_ITERREN);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITERREN);

	}

}
 8000e5a:	e011      	b.n	8000e80 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITBUFEN);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITEVTEN);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &=  ~(1 << I2C_CR2_ITERREN);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	605a      	str	r2, [r3, #4]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |=  (1 << I2C_CR1_PE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
	}
}
 8000ea8:	e005      	b.n	8000eb6 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_PE);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 0201 	bic.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]


	//enable clock for i2c peripheral

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f90e 	bl	80010f4 <I2C_PeriClockControl>
	
	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7a5b      	ldrb	r3, [r3, #9]
 8000edc:	029b      	lsls	r3, r3, #10
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000ef2:	f7ff ff3f 	bl	8000d74 <RCC_GetPCLK1Value>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a43      	ldr	r2, [pc, #268]	; (8001008 <I2C_Init+0x148>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0c9b      	lsrs	r3, r3, #18
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg & (0X3F);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f10:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7a1b      	ldrb	r3, [r3, #8]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	609a      	str	r2, [r3, #8]

	//CCR calculation clock control register
	uint16_t ccr_value = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4a32      	ldr	r2, [pc, #200]	; (800100c <I2C_Init+0x14c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d80f      	bhi.n	8000f66 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000f46:	f7ff ff15 	bl	8000d74 <RCC_GetPCLK1Value>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000f58:	897b      	ldrh	r3, [r7, #10]
 8000f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e027      	b.n	8000fb6 <I2C_Init+0xf6>
	}
	else
	{
		//mode is fast mode
		tempreg |= (1<<15);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	895b      	ldrh	r3, [r3, #10]
 8000f72:	039b      	lsls	r3, r3, #14
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	895b      	ldrh	r3, [r3, #10]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10b      	bne.n	8000f9c <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000f84:	f7ff fef6 	bl	8000d74 <RCC_GetPCLK1Value>
 8000f88:	4601      	mov	r1, r0
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f98:	817b      	strh	r3, [r7, #10]
 8000f9a:	e00c      	b.n	8000fb6 <I2C_Init+0xf6>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000f9c:	f7ff feea 	bl	8000d74 <RCC_GetPCLK1Value>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	009a      	lsls	r2, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb4:	817b      	strh	r3, [r7, #10]
		}
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	61da      	str	r2, [r3, #28]

	//TRISE configuration Fpclk1 * Trise(max) + 1
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <I2C_Init+0x14c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d809      	bhi.n	8000fdc <I2C_Init+0x11c>
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1;
 8000fc8:	f7ff fed4 	bl	8000d74 <RCC_GetPCLK1Value>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <I2C_Init+0x148>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	0c9b      	lsrs	r3, r3, #18
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e00c      	b.n	8000ff6 <I2C_Init+0x136>
	}
	else
	{
		//mode is fast mode
		tempreg = (RCC_GetPCLK1Value() * 300/1000000U) + 1;
 8000fdc:	f7ff feca 	bl	8000d74 <RCC_GetPCLK1Value>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <I2C_Init+0x148>)
 8000fec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff0:	0c9b      	lsrs	r3, r3, #18
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = tempreg;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	621a      	str	r2, [r3, #32]
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	431bde83 	.word	0x431bde83
 800100c:	000186a0 	.word	0x000186a0

08001010 <I2C_MasterSendDataIT>:
 * @Note              -  Complete the below code . Also include the function prototype in header file

 */
//just trigger the start condition
uint8_t  I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	7f1b      	ldrb	r3, [r3, #28]
 8001022:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d034      	beq.n	8001094 <I2C_MasterSendDataIT+0x84>
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d031      	beq.n	8001094 <I2C_MasterSendDataIT+0x84>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2202      	movs	r2, #2
 8001040:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe05 	bl	8000c66 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800106a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800107a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800108a:	605a      	str	r2, [r3, #4]


		I2C_SlaveEnableDisableCallbackEvents(I2C2, ENABLE);
 800108c:	2101      	movs	r1, #1
 800108e:	4804      	ldr	r0, [pc, #16]	; (80010a0 <I2C_MasterSendDataIT+0x90>)
 8001090:	f7ff fec8 	bl	8000e24 <I2C_SlaveEnableDisableCallbackEvents>
	}

	return busystate;
 8001094:	7dfb      	ldrb	r3, [r7, #23]

}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40005800 	.word	0x40005800

080010a4 <I2C_SlaveReceiveData>:
{
	pI2Cx->DR = data;
}

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b2db      	uxtb	r3, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d106      	bne.n	80010dc <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1<<I2C_CR1_ACK);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
	}
}
 80010da:	e005      	b.n	80010e8 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d120      	bne.n	8001148 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <I2C_PeriClockControl+0xa0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d106      	bne.n	800111c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 800111a:	e035      	b.n	8001188 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <I2C_PeriClockControl+0xa8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d106      	bne.n	8001132 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <I2C_PeriClockControl+0xa4>)
 800112a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001130:	e02a      	b.n	8001188 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <I2C_PeriClockControl+0xac>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d126      	bne.n	8001188 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <I2C_PeriClockControl+0xa4>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001140:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001146:	e01f      	b.n	8001188 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <I2C_PeriClockControl+0xa0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d106      	bne.n	800115e <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001156:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800115c:	e014      	b.n	8001188 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <I2C_PeriClockControl+0xa8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d106      	bne.n	8001174 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <I2C_PeriClockControl+0xa4>)
 800116c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001172:	e009      	b.n	8001188 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <I2C_PeriClockControl+0xac>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d105      	bne.n	8001188 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <I2C_PeriClockControl+0xa4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <I2C_PeriClockControl+0xa4>)
 8001182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40005400 	.word	0x40005400
 8001198:	40023800 	.word	0x40023800
 800119c:	40005800 	.word	0x40005800
 80011a0:	40005c00 	.word	0x40005c00

080011a4 <I2C_IRQInterruptConfig>:


void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d133      	bne.n	8001222 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	d80a      	bhi.n	80011d6 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <I2C_IRQInterruptConfig+0xf0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4a31      	ldr	r2, [pc, #196]	; (8001294 <I2C_IRQInterruptConfig+0xf0>)
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80011d4:	e059      	b.n	800128a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b1f      	cmp	r3, #31
 80011da:	d90f      	bls.n	80011fc <I2C_IRQInterruptConfig+0x58>
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b3f      	cmp	r3, #63	; 0x3f
 80011e0:	d80c      	bhi.n	80011fc <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <I2C_IRQInterruptConfig+0xf4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4611      	mov	r1, r2
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <I2C_IRQInterruptConfig+0xf4>)
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e046      	b.n	800128a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001200:	d943      	bls.n	800128a <I2C_IRQInterruptConfig+0xe6>
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b5f      	cmp	r3, #95	; 0x5f
 8001206:	d840      	bhi.n	800128a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <I2C_IRQInterruptConfig+0xf8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	4611      	mov	r1, r2
 800121a:	4a20      	ldr	r2, [pc, #128]	; (800129c <I2C_IRQInterruptConfig+0xf8>)
 800121c:	430b      	orrs	r3, r1
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	e033      	b.n	800128a <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b1f      	cmp	r3, #31
 8001226:	d80a      	bhi.n	800123e <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <I2C_IRQInterruptConfig+0xfc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	4611      	mov	r1, r2
 8001236:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <I2C_IRQInterruptConfig+0xfc>)
 8001238:	430b      	orrs	r3, r1
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	e025      	b.n	800128a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b1f      	cmp	r3, #31
 8001242:	d90f      	bls.n	8001264 <I2C_IRQInterruptConfig+0xc0>
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b3f      	cmp	r3, #63	; 0x3f
 8001248:	d80c      	bhi.n	8001264 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <I2C_IRQInterruptConfig+0x100>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	f002 021f 	and.w	r2, r2, #31
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	4611      	mov	r1, r2
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <I2C_IRQInterruptConfig+0x100>)
 800125e:	430b      	orrs	r3, r1
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e012      	b.n	800128a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d90f      	bls.n	800128a <I2C_IRQInterruptConfig+0xe6>
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b5f      	cmp	r3, #95	; 0x5f
 800126e:	d80c      	bhi.n	800128a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <I2C_IRQInterruptConfig+0x104>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4611      	mov	r1, r2
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <I2C_IRQInterruptConfig+0x104>)
 8001284:	430b      	orrs	r3, r1
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	e7ff      	b.n	800128a <I2C_IRQInterruptConfig+0xe6>
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000e104 	.word	0xe000e104
 800129c:	e000e10c 	.word	0xe000e10c
 80012a0:	e000e180 	.word	0xe000e180
 80012a4:	e000e184 	.word	0xe000e184
 80012a8:	e000e18c 	.word	0xe000e18c

080012ac <I2C_MasterHandleTXEInterrupt>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle,I2C_Handle_t *pI2CHandle2)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]

	if(pI2CHandle->TxLen > 0)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <I2C_MasterHandleTXEInterrupt+0x38>
	{
		printf("txe\n");
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <I2C_MasterHandleTXEInterrupt+0x40>)
 80012c0:	f000 fada 	bl	8001878 <puts>
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]
		// while(!I2C_GetFlagStatus(pI2CHandle2->pI2Cx, I2C_FLAG_RXNE)); //Wait till RXNE is set
		// int dummy_read = pI2CHandle2->pI2Cx->DR; //DR is read before next byte is received
		// (void)dummy_read; //avoid unused warning
	}

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	080027b0 	.word	0x080027b0

080012f0 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	printf("rxne\n");
 80012f8:	4825      	ldr	r0, [pc, #148]	; (8001390 <I2C_MasterHandleRXNEInterrupt+0xa0>)
 80012fa:	f000 fabd 	bl	8001878 <puts>
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <I2C_MasterHandleRXNEInterrupt+0x2e>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxSize > 1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d91a      	bls.n	800135c <I2C_MasterHandleRXNEInterrupt+0x6c>
	{
		if(pI2CHandle->RxLen == 2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d105      	bne.n	800133a <I2C_MasterHandleRXNEInterrupt+0x4a>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fec1 	bl	80010bc <I2C_ManageAcking>
		}

			//read DR
			*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	1e5a      	subs	r2, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0 )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d110      	bne.n	8001386 <I2C_MasterHandleRXNEInterrupt+0x96>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800136a:	2b00      	cmp	r3, #0
 800136c:	d104      	bne.n	8001378 <I2C_MasterHandleRXNEInterrupt+0x88>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fce7 	bl	8000d46 <I2C_GenerateStopCondition>

		//2 . Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8f3 	bl	8001564 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 800137e:	2101      	movs	r1, #1
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff f8b5 	bl	80004f0 <I2C_ApplicationEventCallback>
	}
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	080027b4 	.word	0x080027b4

08001394 <I2C_EV_IRQHandling>:


void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle, I2C_Handle_t *pI2CHandle2)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	//Interrupt handling for master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a8:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	613b      	str	r3, [r7, #16]
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]

	//1. Handle for interrupt generated by SB event
	// Note: SB flag is only applicable in master mode
	if(temp1 && temp3)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01b      	beq.n	8001400 <I2C_EV_IRQHandling+0x6c>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d018      	beq.n	8001400 <I2C_EV_IRQHandling+0x6c>
	{
		//SB flag is set
		//the interrupt is generated because of SB event
		//the block will not executed in slave mode because for slave SB is always zero
		//in this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7f1b      	ldrb	r3, [r3, #28]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d108      	bne.n	80013e8 <I2C_EV_IRQHandling+0x54>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7f5b      	ldrb	r3, [r3, #29]
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f7ff fc4f 	bl	8000c84 <I2C_ExecuteAddressPhaseWrite>
 80013e6:	e00b      	b.n	8001400 <I2C_EV_IRQHandling+0x6c>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7f1b      	ldrb	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <I2C_EV_IRQHandling+0x6c>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7f5b      	ldrb	r3, [r3, #29]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f7ff fc57 	bl	8000cae <I2C_ExecuteAddressPhaseRead>


	//2. handle for interrupt generated by ADDR event
	//Note: when master mode: address is sent
	//Note: when slave mode: address matched with own address
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <I2C_EV_IRQHandling+0x8a>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <I2C_EV_IRQHandling+0x8a>
	{
		//ADDR flag is set
		//the interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fc5d 	bl	8000cd8 <I2C_ClearADDRFlag>
	}


	//3. handle for interrupt generated by BTF(Byte Transfer Finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01b      	beq.n	8001468 <I2C_EV_IRQHandling+0xd4>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d018      	beq.n	8001468 <I2C_EV_IRQHandling+0xd4>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7f1b      	ldrb	r3, [r3, #28]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d114      	bne.n	8001468 <I2C_EV_IRQHandling+0xd4>
		{
			//BTF, TXE = 1
			if(pI2CHandle->TxLen == 0)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d110      	bne.n	8001468 <I2C_EV_IRQHandling+0xd4>
			{
				//1. generate STOP condition
				if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <I2C_EV_IRQHandling+0xc6>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc76 	bl	8000d46 <I2C_GenerateStopCondition>

				//2. reset all the	member elements of the handle structure
				I2C_CloseSendData(pI2CHandle);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f8ac 	bl	80015b8 <I2C_CloseSendData>

				//3. notify the application about transmission complete	
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);			
 8001460:	2100      	movs	r1, #0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff f844 	bl	80004f0 <I2C_ApplicationEventCallback>


	//4. Handle for  interrupt generated by STOPF event
	//Note: Stop detection flag is applicable only slave mode. For master this flag will never be set
	// The below code block will not executed by the master since STOPF will not set in master mode
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp3)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00c      	beq.n	8001494 <I2C_EV_IRQHandling+0x100>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d009      	beq.n	8001494 <I2C_EV_IRQHandling+0x100>
	{
		//STOP flag is set
		//Clear the STOPF (i.e. 1)read SR1 2) Write to CR1)

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	601a      	str	r2, [r3, #0]

		//notify the application about transmission complete	
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);	
 800148c:	2102      	movs	r1, #2
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff f82e 	bl	80004f0 <I2C_ApplicationEventCallback>
	}


	//Handle for interrupt generated by TXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d015      	beq.n	80014d2 <I2C_EV_IRQHandling+0x13e>
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d012      	beq.n	80014d2 <I2C_EV_IRQHandling+0x13e>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00f      	beq.n	80014d2 <I2C_EV_IRQHandling+0x13e>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d014      	beq.n	80014ea <I2C_EV_IRQHandling+0x156>
		//TXE flag is set
		//we have to do the data transmission
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7f1b      	ldrb	r3, [r3, #28]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d110      	bne.n	80014ea <I2C_EV_IRQHandling+0x156>
		{
			//BTF, TXE = 1
			I2C_MasterHandleTXEInterrupt(pI2CHandle,pI2CHandle2);
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff feee 	bl	80012ac <I2C_MasterHandleTXEInterrupt>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80014d0:	e00b      	b.n	80014ea <I2C_EV_IRQHandling+0x156>
	}
	else
	{
		//slave
		//make sure that slave is really in transmitter mode
		if(pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_TRA))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <I2C_EV_IRQHandling+0x158>
		{
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 80014e0:	2108      	movs	r1, #8
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff f804 	bl	80004f0 <I2C_ApplicationEventCallback>
 80014e8:	e000      	b.n	80014ec <I2C_EV_IRQHandling+0x158>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80014ea:	bf00      	nop
		}
	}


	//Handle for interrupt generated by RXNE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	60fb      	str	r3, [r7, #12]
	if(temp1 && temp2 && temp3)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01f      	beq.n	800153e <I2C_EV_IRQHandling+0x1aa>
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01c      	beq.n	800153e <I2C_EV_IRQHandling+0x1aa>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <I2C_EV_IRQHandling+0x1aa>
	{
		//RXNE flag is set
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <I2C_EV_IRQHandling+0x194>
		{
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7f1b      	ldrb	r3, [r3, #28]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d11a      	bne.n	8001556 <I2C_EV_IRQHandling+0x1c2>
			{
				//we have to do the data reception
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);			
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fee5 	bl	80012f0 <I2C_MasterHandleRXNEInterrupt>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001526:	e016      	b.n	8001556 <I2C_EV_IRQHandling+0x1c2>
		}
		else
		{
			// I2C_MasterHandleRXNEInterrupt(pI2CHandle);
			// printf("slave rcv %d\n",pI2CHandle->DevAddr);	
			printf("%d\n",I2C_SlaveReceiveData(pI2CHandle->pI2Cx));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fdb9 	bl	80010a4 <I2C_SlaveReceiveData>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <I2C_EV_IRQHandling+0x1cc>)
 8001538:	f000 f918 	bl	800176c <iprintf>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800153c:	e00b      	b.n	8001556 <I2C_EV_IRQHandling+0x1c2>
	}
	else
	{
		//slave
		//make sure that slave is really in transmitter mode
		if((pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_TRA)) == 0)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <I2C_EV_IRQHandling+0x1c4>
		{
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 800154c:	2109      	movs	r1, #9
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7fe ffce 	bl	80004f0 <I2C_ApplicationEventCallback>
		}
	}

}
 8001554:	e000      	b.n	8001558 <I2C_EV_IRQHandling+0x1c4>
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001556:	bf00      	nop
}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	080027bc 	.word	0x080027bc

08001564 <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800157a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800158a:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
	{
	}
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd86 	bl	80010bc <I2C_ManageAcking>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_CloseSendData>:
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015de:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <I2C_ER_IRQHandling>:


void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/ 
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00e      	beq.n	8001640 <I2C_ER_IRQHandling+0x44>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error
		
		//Implement the code to clear the buss error flag 
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001636:	615a      	str	r2, [r3, #20]
		
		//Implement the code to notify the application about the error 
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8001638:	2103      	movs	r1, #3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7fe ff58 	bl	80004f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/ 
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00e      	beq.n	8001670 <I2C_ER_IRQHandling+0x74>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00b      	beq.n	8001670 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error
		
		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001666:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle,I2C_SR1_ARLO);
 8001668:	2109      	movs	r1, #9
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff40 	bl	80004f0 <I2C_ApplicationEventCallback>
	   
	}

/***********************Check for ACK failure  error************************************/ 

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00e      	beq.n	80016a0 <I2C_ER_IRQHandling+0xa4>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error
		
	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle,I2C_SR1_AF);
 8001698:	210a      	movs	r1, #10
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe ff28 	bl	80004f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016aa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00e      	beq.n	80016d0 <I2C_ER_IRQHandling+0xd4>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun
		
	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_OVR);
 80016c8:	210b      	movs	r1, #11
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe ff10 	bl	80004f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00e      	beq.n	8001700 <I2C_ER_IRQHandling+0x104>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error
		
	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016f6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error 
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_TIMEOUT);
 80016f8:	210e      	movs	r1, #14
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7fe fef8 	bl	80004f0 <I2C_ApplicationEventCallback>
	}

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <__errno>:
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <__errno+0x8>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000028 	.word	0x20000028

08001714 <__libc_init_array>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4d0d      	ldr	r5, [pc, #52]	; (800174c <__libc_init_array+0x38>)
 8001718:	4c0d      	ldr	r4, [pc, #52]	; (8001750 <__libc_init_array+0x3c>)
 800171a:	1b64      	subs	r4, r4, r5
 800171c:	10a4      	asrs	r4, r4, #2
 800171e:	2600      	movs	r6, #0
 8001720:	42a6      	cmp	r6, r4
 8001722:	d109      	bne.n	8001738 <__libc_init_array+0x24>
 8001724:	4d0b      	ldr	r5, [pc, #44]	; (8001754 <__libc_init_array+0x40>)
 8001726:	4c0c      	ldr	r4, [pc, #48]	; (8001758 <__libc_init_array+0x44>)
 8001728:	f001 f81c 	bl	8002764 <_init>
 800172c:	1b64      	subs	r4, r4, r5
 800172e:	10a4      	asrs	r4, r4, #2
 8001730:	2600      	movs	r6, #0
 8001732:	42a6      	cmp	r6, r4
 8001734:	d105      	bne.n	8001742 <__libc_init_array+0x2e>
 8001736:	bd70      	pop	{r4, r5, r6, pc}
 8001738:	f855 3b04 	ldr.w	r3, [r5], #4
 800173c:	4798      	blx	r3
 800173e:	3601      	adds	r6, #1
 8001740:	e7ee      	b.n	8001720 <__libc_init_array+0xc>
 8001742:	f855 3b04 	ldr.w	r3, [r5], #4
 8001746:	4798      	blx	r3
 8001748:	3601      	adds	r6, #1
 800174a:	e7f2      	b.n	8001732 <__libc_init_array+0x1e>
 800174c:	08002858 	.word	0x08002858
 8001750:	08002858 	.word	0x08002858
 8001754:	08002858 	.word	0x08002858
 8001758:	0800285c 	.word	0x0800285c

0800175c <memset>:
 800175c:	4402      	add	r2, r0
 800175e:	4603      	mov	r3, r0
 8001760:	4293      	cmp	r3, r2
 8001762:	d100      	bne.n	8001766 <memset+0xa>
 8001764:	4770      	bx	lr
 8001766:	f803 1b01 	strb.w	r1, [r3], #1
 800176a:	e7f9      	b.n	8001760 <memset+0x4>

0800176c <iprintf>:
 800176c:	b40f      	push	{r0, r1, r2, r3}
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <iprintf+0x2c>)
 8001770:	b513      	push	{r0, r1, r4, lr}
 8001772:	681c      	ldr	r4, [r3, #0]
 8001774:	b124      	cbz	r4, 8001780 <iprintf+0x14>
 8001776:	69a3      	ldr	r3, [r4, #24]
 8001778:	b913      	cbnz	r3, 8001780 <iprintf+0x14>
 800177a:	4620      	mov	r0, r4
 800177c:	f000 fa5a 	bl	8001c34 <__sinit>
 8001780:	ab05      	add	r3, sp, #20
 8001782:	9a04      	ldr	r2, [sp, #16]
 8001784:	68a1      	ldr	r1, [r4, #8]
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fc5f 	bl	800204c <_vfiprintf_r>
 800178e:	b002      	add	sp, #8
 8001790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001794:	b004      	add	sp, #16
 8001796:	4770      	bx	lr
 8001798:	20000028 	.word	0x20000028

0800179c <_puts_r>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	460e      	mov	r6, r1
 80017a0:	4605      	mov	r5, r0
 80017a2:	b118      	cbz	r0, 80017ac <_puts_r+0x10>
 80017a4:	6983      	ldr	r3, [r0, #24]
 80017a6:	b90b      	cbnz	r3, 80017ac <_puts_r+0x10>
 80017a8:	f000 fa44 	bl	8001c34 <__sinit>
 80017ac:	69ab      	ldr	r3, [r5, #24]
 80017ae:	68ac      	ldr	r4, [r5, #8]
 80017b0:	b913      	cbnz	r3, 80017b8 <_puts_r+0x1c>
 80017b2:	4628      	mov	r0, r5
 80017b4:	f000 fa3e 	bl	8001c34 <__sinit>
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <_puts_r+0xd0>)
 80017ba:	429c      	cmp	r4, r3
 80017bc:	d120      	bne.n	8001800 <_puts_r+0x64>
 80017be:	686c      	ldr	r4, [r5, #4]
 80017c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017c2:	07db      	lsls	r3, r3, #31
 80017c4:	d405      	bmi.n	80017d2 <_puts_r+0x36>
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	0598      	lsls	r0, r3, #22
 80017ca:	d402      	bmi.n	80017d2 <_puts_r+0x36>
 80017cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ce:	f000 facf 	bl	8001d70 <__retarget_lock_acquire_recursive>
 80017d2:	89a3      	ldrh	r3, [r4, #12]
 80017d4:	0719      	lsls	r1, r3, #28
 80017d6:	d51d      	bpl.n	8001814 <_puts_r+0x78>
 80017d8:	6923      	ldr	r3, [r4, #16]
 80017da:	b1db      	cbz	r3, 8001814 <_puts_r+0x78>
 80017dc:	3e01      	subs	r6, #1
 80017de:	68a3      	ldr	r3, [r4, #8]
 80017e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60a3      	str	r3, [r4, #8]
 80017e8:	bb39      	cbnz	r1, 800183a <_puts_r+0x9e>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da38      	bge.n	8001860 <_puts_r+0xc4>
 80017ee:	4622      	mov	r2, r4
 80017f0:	210a      	movs	r1, #10
 80017f2:	4628      	mov	r0, r5
 80017f4:	f000 f848 	bl	8001888 <__swbuf_r>
 80017f8:	3001      	adds	r0, #1
 80017fa:	d011      	beq.n	8001820 <_puts_r+0x84>
 80017fc:	250a      	movs	r5, #10
 80017fe:	e011      	b.n	8001824 <_puts_r+0x88>
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <_puts_r+0xd4>)
 8001802:	429c      	cmp	r4, r3
 8001804:	d101      	bne.n	800180a <_puts_r+0x6e>
 8001806:	68ac      	ldr	r4, [r5, #8]
 8001808:	e7da      	b.n	80017c0 <_puts_r+0x24>
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <_puts_r+0xd8>)
 800180c:	429c      	cmp	r4, r3
 800180e:	bf08      	it	eq
 8001810:	68ec      	ldreq	r4, [r5, #12]
 8001812:	e7d5      	b.n	80017c0 <_puts_r+0x24>
 8001814:	4621      	mov	r1, r4
 8001816:	4628      	mov	r0, r5
 8001818:	f000 f888 	bl	800192c <__swsetup_r>
 800181c:	2800      	cmp	r0, #0
 800181e:	d0dd      	beq.n	80017dc <_puts_r+0x40>
 8001820:	f04f 35ff 	mov.w	r5, #4294967295
 8001824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001826:	07da      	lsls	r2, r3, #31
 8001828:	d405      	bmi.n	8001836 <_puts_r+0x9a>
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	059b      	lsls	r3, r3, #22
 800182e:	d402      	bmi.n	8001836 <_puts_r+0x9a>
 8001830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001832:	f000 fa9e 	bl	8001d72 <__retarget_lock_release_recursive>
 8001836:	4628      	mov	r0, r5
 8001838:	bd70      	pop	{r4, r5, r6, pc}
 800183a:	2b00      	cmp	r3, #0
 800183c:	da04      	bge.n	8001848 <_puts_r+0xac>
 800183e:	69a2      	ldr	r2, [r4, #24]
 8001840:	429a      	cmp	r2, r3
 8001842:	dc06      	bgt.n	8001852 <_puts_r+0xb6>
 8001844:	290a      	cmp	r1, #10
 8001846:	d004      	beq.n	8001852 <_puts_r+0xb6>
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	6022      	str	r2, [r4, #0]
 800184e:	7019      	strb	r1, [r3, #0]
 8001850:	e7c5      	b.n	80017de <_puts_r+0x42>
 8001852:	4622      	mov	r2, r4
 8001854:	4628      	mov	r0, r5
 8001856:	f000 f817 	bl	8001888 <__swbuf_r>
 800185a:	3001      	adds	r0, #1
 800185c:	d1bf      	bne.n	80017de <_puts_r+0x42>
 800185e:	e7df      	b.n	8001820 <_puts_r+0x84>
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	250a      	movs	r5, #10
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	6022      	str	r2, [r4, #0]
 8001868:	701d      	strb	r5, [r3, #0]
 800186a:	e7db      	b.n	8001824 <_puts_r+0x88>
 800186c:	080027e4 	.word	0x080027e4
 8001870:	08002804 	.word	0x08002804
 8001874:	080027c4 	.word	0x080027c4

08001878 <puts>:
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <puts+0xc>)
 800187a:	4601      	mov	r1, r0
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	f7ff bf8d 	b.w	800179c <_puts_r>
 8001882:	bf00      	nop
 8001884:	20000028 	.word	0x20000028

08001888 <__swbuf_r>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	460e      	mov	r6, r1
 800188c:	4614      	mov	r4, r2
 800188e:	4605      	mov	r5, r0
 8001890:	b118      	cbz	r0, 800189a <__swbuf_r+0x12>
 8001892:	6983      	ldr	r3, [r0, #24]
 8001894:	b90b      	cbnz	r3, 800189a <__swbuf_r+0x12>
 8001896:	f000 f9cd 	bl	8001c34 <__sinit>
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <__swbuf_r+0x98>)
 800189c:	429c      	cmp	r4, r3
 800189e:	d12b      	bne.n	80018f8 <__swbuf_r+0x70>
 80018a0:	686c      	ldr	r4, [r5, #4]
 80018a2:	69a3      	ldr	r3, [r4, #24]
 80018a4:	60a3      	str	r3, [r4, #8]
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	071a      	lsls	r2, r3, #28
 80018aa:	d52f      	bpl.n	800190c <__swbuf_r+0x84>
 80018ac:	6923      	ldr	r3, [r4, #16]
 80018ae:	b36b      	cbz	r3, 800190c <__swbuf_r+0x84>
 80018b0:	6923      	ldr	r3, [r4, #16]
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	1ac0      	subs	r0, r0, r3
 80018b6:	6963      	ldr	r3, [r4, #20]
 80018b8:	b2f6      	uxtb	r6, r6
 80018ba:	4283      	cmp	r3, r0
 80018bc:	4637      	mov	r7, r6
 80018be:	dc04      	bgt.n	80018ca <__swbuf_r+0x42>
 80018c0:	4621      	mov	r1, r4
 80018c2:	4628      	mov	r0, r5
 80018c4:	f000 f922 	bl	8001b0c <_fflush_r>
 80018c8:	bb30      	cbnz	r0, 8001918 <__swbuf_r+0x90>
 80018ca:	68a3      	ldr	r3, [r4, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60a3      	str	r3, [r4, #8]
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	6022      	str	r2, [r4, #0]
 80018d6:	701e      	strb	r6, [r3, #0]
 80018d8:	6963      	ldr	r3, [r4, #20]
 80018da:	3001      	adds	r0, #1
 80018dc:	4283      	cmp	r3, r0
 80018de:	d004      	beq.n	80018ea <__swbuf_r+0x62>
 80018e0:	89a3      	ldrh	r3, [r4, #12]
 80018e2:	07db      	lsls	r3, r3, #31
 80018e4:	d506      	bpl.n	80018f4 <__swbuf_r+0x6c>
 80018e6:	2e0a      	cmp	r6, #10
 80018e8:	d104      	bne.n	80018f4 <__swbuf_r+0x6c>
 80018ea:	4621      	mov	r1, r4
 80018ec:	4628      	mov	r0, r5
 80018ee:	f000 f90d 	bl	8001b0c <_fflush_r>
 80018f2:	b988      	cbnz	r0, 8001918 <__swbuf_r+0x90>
 80018f4:	4638      	mov	r0, r7
 80018f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <__swbuf_r+0x9c>)
 80018fa:	429c      	cmp	r4, r3
 80018fc:	d101      	bne.n	8001902 <__swbuf_r+0x7a>
 80018fe:	68ac      	ldr	r4, [r5, #8]
 8001900:	e7cf      	b.n	80018a2 <__swbuf_r+0x1a>
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <__swbuf_r+0xa0>)
 8001904:	429c      	cmp	r4, r3
 8001906:	bf08      	it	eq
 8001908:	68ec      	ldreq	r4, [r5, #12]
 800190a:	e7ca      	b.n	80018a2 <__swbuf_r+0x1a>
 800190c:	4621      	mov	r1, r4
 800190e:	4628      	mov	r0, r5
 8001910:	f000 f80c 	bl	800192c <__swsetup_r>
 8001914:	2800      	cmp	r0, #0
 8001916:	d0cb      	beq.n	80018b0 <__swbuf_r+0x28>
 8001918:	f04f 37ff 	mov.w	r7, #4294967295
 800191c:	e7ea      	b.n	80018f4 <__swbuf_r+0x6c>
 800191e:	bf00      	nop
 8001920:	080027e4 	.word	0x080027e4
 8001924:	08002804 	.word	0x08002804
 8001928:	080027c4 	.word	0x080027c4

0800192c <__swsetup_r>:
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <__swsetup_r+0xcc>)
 800192e:	b570      	push	{r4, r5, r6, lr}
 8001930:	681d      	ldr	r5, [r3, #0]
 8001932:	4606      	mov	r6, r0
 8001934:	460c      	mov	r4, r1
 8001936:	b125      	cbz	r5, 8001942 <__swsetup_r+0x16>
 8001938:	69ab      	ldr	r3, [r5, #24]
 800193a:	b913      	cbnz	r3, 8001942 <__swsetup_r+0x16>
 800193c:	4628      	mov	r0, r5
 800193e:	f000 f979 	bl	8001c34 <__sinit>
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <__swsetup_r+0xd0>)
 8001944:	429c      	cmp	r4, r3
 8001946:	d10f      	bne.n	8001968 <__swsetup_r+0x3c>
 8001948:	686c      	ldr	r4, [r5, #4]
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001950:	0719      	lsls	r1, r3, #28
 8001952:	d42c      	bmi.n	80019ae <__swsetup_r+0x82>
 8001954:	06dd      	lsls	r5, r3, #27
 8001956:	d411      	bmi.n	800197c <__swsetup_r+0x50>
 8001958:	2309      	movs	r3, #9
 800195a:	6033      	str	r3, [r6, #0]
 800195c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001960:	81a3      	strh	r3, [r4, #12]
 8001962:	f04f 30ff 	mov.w	r0, #4294967295
 8001966:	e03e      	b.n	80019e6 <__swsetup_r+0xba>
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <__swsetup_r+0xd4>)
 800196a:	429c      	cmp	r4, r3
 800196c:	d101      	bne.n	8001972 <__swsetup_r+0x46>
 800196e:	68ac      	ldr	r4, [r5, #8]
 8001970:	e7eb      	b.n	800194a <__swsetup_r+0x1e>
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <__swsetup_r+0xd8>)
 8001974:	429c      	cmp	r4, r3
 8001976:	bf08      	it	eq
 8001978:	68ec      	ldreq	r4, [r5, #12]
 800197a:	e7e6      	b.n	800194a <__swsetup_r+0x1e>
 800197c:	0758      	lsls	r0, r3, #29
 800197e:	d512      	bpl.n	80019a6 <__swsetup_r+0x7a>
 8001980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001982:	b141      	cbz	r1, 8001996 <__swsetup_r+0x6a>
 8001984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001988:	4299      	cmp	r1, r3
 800198a:	d002      	beq.n	8001992 <__swsetup_r+0x66>
 800198c:	4630      	mov	r0, r6
 800198e:	f000 fa57 	bl	8001e40 <_free_r>
 8001992:	2300      	movs	r3, #0
 8001994:	6363      	str	r3, [r4, #52]	; 0x34
 8001996:	89a3      	ldrh	r3, [r4, #12]
 8001998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800199c:	81a3      	strh	r3, [r4, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	6923      	ldr	r3, [r4, #16]
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	89a3      	ldrh	r3, [r4, #12]
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	b94b      	cbnz	r3, 80019c6 <__swsetup_r+0x9a>
 80019b2:	89a3      	ldrh	r3, [r4, #12]
 80019b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019bc:	d003      	beq.n	80019c6 <__swsetup_r+0x9a>
 80019be:	4621      	mov	r1, r4
 80019c0:	4630      	mov	r0, r6
 80019c2:	f000 f9fd 	bl	8001dc0 <__smakebuf_r>
 80019c6:	89a0      	ldrh	r0, [r4, #12]
 80019c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019cc:	f010 0301 	ands.w	r3, r0, #1
 80019d0:	d00a      	beq.n	80019e8 <__swsetup_r+0xbc>
 80019d2:	2300      	movs	r3, #0
 80019d4:	60a3      	str	r3, [r4, #8]
 80019d6:	6963      	ldr	r3, [r4, #20]
 80019d8:	425b      	negs	r3, r3
 80019da:	61a3      	str	r3, [r4, #24]
 80019dc:	6923      	ldr	r3, [r4, #16]
 80019de:	b943      	cbnz	r3, 80019f2 <__swsetup_r+0xc6>
 80019e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80019e4:	d1ba      	bne.n	800195c <__swsetup_r+0x30>
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	0781      	lsls	r1, r0, #30
 80019ea:	bf58      	it	pl
 80019ec:	6963      	ldrpl	r3, [r4, #20]
 80019ee:	60a3      	str	r3, [r4, #8]
 80019f0:	e7f4      	b.n	80019dc <__swsetup_r+0xb0>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e7f7      	b.n	80019e6 <__swsetup_r+0xba>
 80019f6:	bf00      	nop
 80019f8:	20000028 	.word	0x20000028
 80019fc:	080027e4 	.word	0x080027e4
 8001a00:	08002804 	.word	0x08002804
 8001a04:	080027c4 	.word	0x080027c4

08001a08 <__sflush_r>:
 8001a08:	898a      	ldrh	r2, [r1, #12]
 8001a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0c:	4605      	mov	r5, r0
 8001a0e:	0710      	lsls	r0, r2, #28
 8001a10:	460c      	mov	r4, r1
 8001a12:	d457      	bmi.n	8001ac4 <__sflush_r+0xbc>
 8001a14:	684b      	ldr	r3, [r1, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	dc04      	bgt.n	8001a24 <__sflush_r+0x1c>
 8001a1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dc01      	bgt.n	8001a24 <__sflush_r+0x1c>
 8001a20:	2000      	movs	r0, #0
 8001a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d0fa      	beq.n	8001a20 <__sflush_r+0x18>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a30:	682f      	ldr	r7, [r5, #0]
 8001a32:	602b      	str	r3, [r5, #0]
 8001a34:	d032      	beq.n	8001a9c <__sflush_r+0x94>
 8001a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	075a      	lsls	r2, r3, #29
 8001a3c:	d505      	bpl.n	8001a4a <__sflush_r+0x42>
 8001a3e:	6863      	ldr	r3, [r4, #4]
 8001a40:	1ac0      	subs	r0, r0, r3
 8001a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a44:	b10b      	cbz	r3, 8001a4a <__sflush_r+0x42>
 8001a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a48:	1ac0      	subs	r0, r0, r3
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a50:	6a21      	ldr	r1, [r4, #32]
 8001a52:	4628      	mov	r0, r5
 8001a54:	47b0      	blx	r6
 8001a56:	1c43      	adds	r3, r0, #1
 8001a58:	89a3      	ldrh	r3, [r4, #12]
 8001a5a:	d106      	bne.n	8001a6a <__sflush_r+0x62>
 8001a5c:	6829      	ldr	r1, [r5, #0]
 8001a5e:	291d      	cmp	r1, #29
 8001a60:	d82c      	bhi.n	8001abc <__sflush_r+0xb4>
 8001a62:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <__sflush_r+0x100>)
 8001a64:	40ca      	lsrs	r2, r1
 8001a66:	07d6      	lsls	r6, r2, #31
 8001a68:	d528      	bpl.n	8001abc <__sflush_r+0xb4>
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	6062      	str	r2, [r4, #4]
 8001a6e:	04d9      	lsls	r1, r3, #19
 8001a70:	6922      	ldr	r2, [r4, #16]
 8001a72:	6022      	str	r2, [r4, #0]
 8001a74:	d504      	bpl.n	8001a80 <__sflush_r+0x78>
 8001a76:	1c42      	adds	r2, r0, #1
 8001a78:	d101      	bne.n	8001a7e <__sflush_r+0x76>
 8001a7a:	682b      	ldr	r3, [r5, #0]
 8001a7c:	b903      	cbnz	r3, 8001a80 <__sflush_r+0x78>
 8001a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8001a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a82:	602f      	str	r7, [r5, #0]
 8001a84:	2900      	cmp	r1, #0
 8001a86:	d0cb      	beq.n	8001a20 <__sflush_r+0x18>
 8001a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a8c:	4299      	cmp	r1, r3
 8001a8e:	d002      	beq.n	8001a96 <__sflush_r+0x8e>
 8001a90:	4628      	mov	r0, r5
 8001a92:	f000 f9d5 	bl	8001e40 <_free_r>
 8001a96:	2000      	movs	r0, #0
 8001a98:	6360      	str	r0, [r4, #52]	; 0x34
 8001a9a:	e7c2      	b.n	8001a22 <__sflush_r+0x1a>
 8001a9c:	6a21      	ldr	r1, [r4, #32]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	47b0      	blx	r6
 8001aa4:	1c41      	adds	r1, r0, #1
 8001aa6:	d1c7      	bne.n	8001a38 <__sflush_r+0x30>
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0c4      	beq.n	8001a38 <__sflush_r+0x30>
 8001aae:	2b1d      	cmp	r3, #29
 8001ab0:	d001      	beq.n	8001ab6 <__sflush_r+0xae>
 8001ab2:	2b16      	cmp	r3, #22
 8001ab4:	d101      	bne.n	8001aba <__sflush_r+0xb2>
 8001ab6:	602f      	str	r7, [r5, #0]
 8001ab8:	e7b2      	b.n	8001a20 <__sflush_r+0x18>
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac0:	81a3      	strh	r3, [r4, #12]
 8001ac2:	e7ae      	b.n	8001a22 <__sflush_r+0x1a>
 8001ac4:	690f      	ldr	r7, [r1, #16]
 8001ac6:	2f00      	cmp	r7, #0
 8001ac8:	d0aa      	beq.n	8001a20 <__sflush_r+0x18>
 8001aca:	0793      	lsls	r3, r2, #30
 8001acc:	680e      	ldr	r6, [r1, #0]
 8001ace:	bf08      	it	eq
 8001ad0:	694b      	ldreq	r3, [r1, #20]
 8001ad2:	600f      	str	r7, [r1, #0]
 8001ad4:	bf18      	it	ne
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	1bf6      	subs	r6, r6, r7
 8001ada:	608b      	str	r3, [r1, #8]
 8001adc:	2e00      	cmp	r6, #0
 8001ade:	dd9f      	ble.n	8001a20 <__sflush_r+0x18>
 8001ae0:	6a21      	ldr	r1, [r4, #32]
 8001ae2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001ae6:	4633      	mov	r3, r6
 8001ae8:	463a      	mov	r2, r7
 8001aea:	4628      	mov	r0, r5
 8001aec:	47e0      	blx	ip
 8001aee:	2800      	cmp	r0, #0
 8001af0:	dc06      	bgt.n	8001b00 <__sflush_r+0xf8>
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af8:	81a3      	strh	r3, [r4, #12]
 8001afa:	f04f 30ff 	mov.w	r0, #4294967295
 8001afe:	e790      	b.n	8001a22 <__sflush_r+0x1a>
 8001b00:	4407      	add	r7, r0
 8001b02:	1a36      	subs	r6, r6, r0
 8001b04:	e7ea      	b.n	8001adc <__sflush_r+0xd4>
 8001b06:	bf00      	nop
 8001b08:	20400001 	.word	0x20400001

08001b0c <_fflush_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	690b      	ldr	r3, [r1, #16]
 8001b10:	4605      	mov	r5, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	b913      	cbnz	r3, 8001b1c <_fflush_r+0x10>
 8001b16:	2500      	movs	r5, #0
 8001b18:	4628      	mov	r0, r5
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
 8001b1c:	b118      	cbz	r0, 8001b26 <_fflush_r+0x1a>
 8001b1e:	6983      	ldr	r3, [r0, #24]
 8001b20:	b90b      	cbnz	r3, 8001b26 <_fflush_r+0x1a>
 8001b22:	f000 f887 	bl	8001c34 <__sinit>
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <_fflush_r+0x6c>)
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	d11b      	bne.n	8001b64 <_fflush_r+0x58>
 8001b2c:	686c      	ldr	r4, [r5, #4]
 8001b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ef      	beq.n	8001b16 <_fflush_r+0xa>
 8001b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b38:	07d0      	lsls	r0, r2, #31
 8001b3a:	d404      	bmi.n	8001b46 <_fflush_r+0x3a>
 8001b3c:	0599      	lsls	r1, r3, #22
 8001b3e:	d402      	bmi.n	8001b46 <_fflush_r+0x3a>
 8001b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b42:	f000 f915 	bl	8001d70 <__retarget_lock_acquire_recursive>
 8001b46:	4628      	mov	r0, r5
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7ff ff5d 	bl	8001a08 <__sflush_r>
 8001b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b50:	07da      	lsls	r2, r3, #31
 8001b52:	4605      	mov	r5, r0
 8001b54:	d4e0      	bmi.n	8001b18 <_fflush_r+0xc>
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	059b      	lsls	r3, r3, #22
 8001b5a:	d4dd      	bmi.n	8001b18 <_fflush_r+0xc>
 8001b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b5e:	f000 f908 	bl	8001d72 <__retarget_lock_release_recursive>
 8001b62:	e7d9      	b.n	8001b18 <_fflush_r+0xc>
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <_fflush_r+0x70>)
 8001b66:	429c      	cmp	r4, r3
 8001b68:	d101      	bne.n	8001b6e <_fflush_r+0x62>
 8001b6a:	68ac      	ldr	r4, [r5, #8]
 8001b6c:	e7df      	b.n	8001b2e <_fflush_r+0x22>
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <_fflush_r+0x74>)
 8001b70:	429c      	cmp	r4, r3
 8001b72:	bf08      	it	eq
 8001b74:	68ec      	ldreq	r4, [r5, #12]
 8001b76:	e7da      	b.n	8001b2e <_fflush_r+0x22>
 8001b78:	080027e4 	.word	0x080027e4
 8001b7c:	08002804 	.word	0x08002804
 8001b80:	080027c4 	.word	0x080027c4

08001b84 <std>:
 8001b84:	2300      	movs	r3, #0
 8001b86:	b510      	push	{r4, lr}
 8001b88:	4604      	mov	r4, r0
 8001b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b92:	6083      	str	r3, [r0, #8]
 8001b94:	8181      	strh	r1, [r0, #12]
 8001b96:	6643      	str	r3, [r0, #100]	; 0x64
 8001b98:	81c2      	strh	r2, [r0, #14]
 8001b9a:	6183      	str	r3, [r0, #24]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	305c      	adds	r0, #92	; 0x5c
 8001ba2:	f7ff fddb 	bl	800175c <memset>
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <std+0x38>)
 8001ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <std+0x3c>)
 8001bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <std+0x40>)
 8001bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <std+0x44>)
 8001bb4:	6224      	str	r4, [r4, #32]
 8001bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop
 8001bbc:	080025f5 	.word	0x080025f5
 8001bc0:	08002617 	.word	0x08002617
 8001bc4:	0800264f 	.word	0x0800264f
 8001bc8:	08002673 	.word	0x08002673

08001bcc <_cleanup_r>:
 8001bcc:	4901      	ldr	r1, [pc, #4]	; (8001bd4 <_cleanup_r+0x8>)
 8001bce:	f000 b8af 	b.w	8001d30 <_fwalk_reent>
 8001bd2:	bf00      	nop
 8001bd4:	08001b0d 	.word	0x08001b0d

08001bd8 <__sfmoreglue>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	2268      	movs	r2, #104	; 0x68
 8001bdc:	1e4d      	subs	r5, r1, #1
 8001bde:	4355      	muls	r5, r2
 8001be0:	460e      	mov	r6, r1
 8001be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001be6:	f000 f995 	bl	8001f14 <_malloc_r>
 8001bea:	4604      	mov	r4, r0
 8001bec:	b140      	cbz	r0, 8001c00 <__sfmoreglue+0x28>
 8001bee:	2100      	movs	r1, #0
 8001bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8001bf4:	300c      	adds	r0, #12
 8001bf6:	60a0      	str	r0, [r4, #8]
 8001bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bfc:	f7ff fdae 	bl	800175c <memset>
 8001c00:	4620      	mov	r0, r4
 8001c02:	bd70      	pop	{r4, r5, r6, pc}

08001c04 <__sfp_lock_acquire>:
 8001c04:	4801      	ldr	r0, [pc, #4]	; (8001c0c <__sfp_lock_acquire+0x8>)
 8001c06:	f000 b8b3 	b.w	8001d70 <__retarget_lock_acquire_recursive>
 8001c0a:	bf00      	nop
 8001c0c:	200000fd 	.word	0x200000fd

08001c10 <__sfp_lock_release>:
 8001c10:	4801      	ldr	r0, [pc, #4]	; (8001c18 <__sfp_lock_release+0x8>)
 8001c12:	f000 b8ae 	b.w	8001d72 <__retarget_lock_release_recursive>
 8001c16:	bf00      	nop
 8001c18:	200000fd 	.word	0x200000fd

08001c1c <__sinit_lock_acquire>:
 8001c1c:	4801      	ldr	r0, [pc, #4]	; (8001c24 <__sinit_lock_acquire+0x8>)
 8001c1e:	f000 b8a7 	b.w	8001d70 <__retarget_lock_acquire_recursive>
 8001c22:	bf00      	nop
 8001c24:	200000fe 	.word	0x200000fe

08001c28 <__sinit_lock_release>:
 8001c28:	4801      	ldr	r0, [pc, #4]	; (8001c30 <__sinit_lock_release+0x8>)
 8001c2a:	f000 b8a2 	b.w	8001d72 <__retarget_lock_release_recursive>
 8001c2e:	bf00      	nop
 8001c30:	200000fe 	.word	0x200000fe

08001c34 <__sinit>:
 8001c34:	b510      	push	{r4, lr}
 8001c36:	4604      	mov	r4, r0
 8001c38:	f7ff fff0 	bl	8001c1c <__sinit_lock_acquire>
 8001c3c:	69a3      	ldr	r3, [r4, #24]
 8001c3e:	b11b      	cbz	r3, 8001c48 <__sinit+0x14>
 8001c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c44:	f7ff bff0 	b.w	8001c28 <__sinit_lock_release>
 8001c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <__sinit+0x68>)
 8001c50:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <__sinit+0x6c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c56:	42a3      	cmp	r3, r4
 8001c58:	bf04      	itt	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	61a3      	streq	r3, [r4, #24]
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f000 f820 	bl	8001ca4 <__sfp>
 8001c64:	6060      	str	r0, [r4, #4]
 8001c66:	4620      	mov	r0, r4
 8001c68:	f000 f81c 	bl	8001ca4 <__sfp>
 8001c6c:	60a0      	str	r0, [r4, #8]
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f000 f818 	bl	8001ca4 <__sfp>
 8001c74:	2200      	movs	r2, #0
 8001c76:	60e0      	str	r0, [r4, #12]
 8001c78:	2104      	movs	r1, #4
 8001c7a:	6860      	ldr	r0, [r4, #4]
 8001c7c:	f7ff ff82 	bl	8001b84 <std>
 8001c80:	68a0      	ldr	r0, [r4, #8]
 8001c82:	2201      	movs	r2, #1
 8001c84:	2109      	movs	r1, #9
 8001c86:	f7ff ff7d 	bl	8001b84 <std>
 8001c8a:	68e0      	ldr	r0, [r4, #12]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	2112      	movs	r1, #18
 8001c90:	f7ff ff78 	bl	8001b84 <std>
 8001c94:	2301      	movs	r3, #1
 8001c96:	61a3      	str	r3, [r4, #24]
 8001c98:	e7d2      	b.n	8001c40 <__sinit+0xc>
 8001c9a:	bf00      	nop
 8001c9c:	080027c0 	.word	0x080027c0
 8001ca0:	08001bcd 	.word	0x08001bcd

08001ca4 <__sfp>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	4607      	mov	r7, r0
 8001ca8:	f7ff ffac 	bl	8001c04 <__sfp_lock_acquire>
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <__sfp+0x84>)
 8001cae:	681e      	ldr	r6, [r3, #0]
 8001cb0:	69b3      	ldr	r3, [r6, #24]
 8001cb2:	b913      	cbnz	r3, 8001cba <__sfp+0x16>
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f7ff ffbd 	bl	8001c34 <__sinit>
 8001cba:	3648      	adds	r6, #72	; 0x48
 8001cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	d503      	bpl.n	8001ccc <__sfp+0x28>
 8001cc4:	6833      	ldr	r3, [r6, #0]
 8001cc6:	b30b      	cbz	r3, 8001d0c <__sfp+0x68>
 8001cc8:	6836      	ldr	r6, [r6, #0]
 8001cca:	e7f7      	b.n	8001cbc <__sfp+0x18>
 8001ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001cd0:	b9d5      	cbnz	r5, 8001d08 <__sfp+0x64>
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <__sfp+0x88>)
 8001cd4:	60e3      	str	r3, [r4, #12]
 8001cd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001cda:	6665      	str	r5, [r4, #100]	; 0x64
 8001cdc:	f000 f847 	bl	8001d6e <__retarget_lock_init_recursive>
 8001ce0:	f7ff ff96 	bl	8001c10 <__sfp_lock_release>
 8001ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001cec:	6025      	str	r5, [r4, #0]
 8001cee:	61a5      	str	r5, [r4, #24]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cf8:	f7ff fd30 	bl	800175c <memset>
 8001cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d04:	4620      	mov	r0, r4
 8001d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d08:	3468      	adds	r4, #104	; 0x68
 8001d0a:	e7d9      	b.n	8001cc0 <__sfp+0x1c>
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4638      	mov	r0, r7
 8001d10:	f7ff ff62 	bl	8001bd8 <__sfmoreglue>
 8001d14:	4604      	mov	r4, r0
 8001d16:	6030      	str	r0, [r6, #0]
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d1d5      	bne.n	8001cc8 <__sfp+0x24>
 8001d1c:	f7ff ff78 	bl	8001c10 <__sfp_lock_release>
 8001d20:	230c      	movs	r3, #12
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	e7ee      	b.n	8001d04 <__sfp+0x60>
 8001d26:	bf00      	nop
 8001d28:	080027c0 	.word	0x080027c0
 8001d2c:	ffff0001 	.word	0xffff0001

08001d30 <_fwalk_reent>:
 8001d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d34:	4606      	mov	r6, r0
 8001d36:	4688      	mov	r8, r1
 8001d38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d3c:	2700      	movs	r7, #0
 8001d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d42:	f1b9 0901 	subs.w	r9, r9, #1
 8001d46:	d505      	bpl.n	8001d54 <_fwalk_reent+0x24>
 8001d48:	6824      	ldr	r4, [r4, #0]
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d1f7      	bne.n	8001d3e <_fwalk_reent+0xe>
 8001d4e:	4638      	mov	r0, r7
 8001d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d54:	89ab      	ldrh	r3, [r5, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d907      	bls.n	8001d6a <_fwalk_reent+0x3a>
 8001d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	d003      	beq.n	8001d6a <_fwalk_reent+0x3a>
 8001d62:	4629      	mov	r1, r5
 8001d64:	4630      	mov	r0, r6
 8001d66:	47c0      	blx	r8
 8001d68:	4307      	orrs	r7, r0
 8001d6a:	3568      	adds	r5, #104	; 0x68
 8001d6c:	e7e9      	b.n	8001d42 <_fwalk_reent+0x12>

08001d6e <__retarget_lock_init_recursive>:
 8001d6e:	4770      	bx	lr

08001d70 <__retarget_lock_acquire_recursive>:
 8001d70:	4770      	bx	lr

08001d72 <__retarget_lock_release_recursive>:
 8001d72:	4770      	bx	lr

08001d74 <__swhatbuf_r>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	460e      	mov	r6, r1
 8001d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	b096      	sub	sp, #88	; 0x58
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	da08      	bge.n	8001d98 <__swhatbuf_r+0x24>
 8001d86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	602a      	str	r2, [r5, #0]
 8001d8e:	061a      	lsls	r2, r3, #24
 8001d90:	d410      	bmi.n	8001db4 <__swhatbuf_r+0x40>
 8001d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d96:	e00e      	b.n	8001db6 <__swhatbuf_r+0x42>
 8001d98:	466a      	mov	r2, sp
 8001d9a:	f000 fc91 	bl	80026c0 <_fstat_r>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	dbf1      	blt.n	8001d86 <__swhatbuf_r+0x12>
 8001da2:	9a01      	ldr	r2, [sp, #4]
 8001da4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001da8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001dac:	425a      	negs	r2, r3
 8001dae:	415a      	adcs	r2, r3
 8001db0:	602a      	str	r2, [r5, #0]
 8001db2:	e7ee      	b.n	8001d92 <__swhatbuf_r+0x1e>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	2000      	movs	r0, #0
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	b016      	add	sp, #88	; 0x58
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001dc0 <__smakebuf_r>:
 8001dc0:	898b      	ldrh	r3, [r1, #12]
 8001dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dc4:	079d      	lsls	r5, r3, #30
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	d507      	bpl.n	8001ddc <__smakebuf_r+0x1c>
 8001dcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	6123      	str	r3, [r4, #16]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	6163      	str	r3, [r4, #20]
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	ab01      	add	r3, sp, #4
 8001dde:	466a      	mov	r2, sp
 8001de0:	f7ff ffc8 	bl	8001d74 <__swhatbuf_r>
 8001de4:	9900      	ldr	r1, [sp, #0]
 8001de6:	4605      	mov	r5, r0
 8001de8:	4630      	mov	r0, r6
 8001dea:	f000 f893 	bl	8001f14 <_malloc_r>
 8001dee:	b948      	cbnz	r0, 8001e04 <__smakebuf_r+0x44>
 8001df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df4:	059a      	lsls	r2, r3, #22
 8001df6:	d4ef      	bmi.n	8001dd8 <__smakebuf_r+0x18>
 8001df8:	f023 0303 	bic.w	r3, r3, #3
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	e7e3      	b.n	8001dcc <__smakebuf_r+0xc>
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <__smakebuf_r+0x7c>)
 8001e06:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e08:	89a3      	ldrh	r3, [r4, #12]
 8001e0a:	6020      	str	r0, [r4, #0]
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	9b00      	ldr	r3, [sp, #0]
 8001e14:	6163      	str	r3, [r4, #20]
 8001e16:	9b01      	ldr	r3, [sp, #4]
 8001e18:	6120      	str	r0, [r4, #16]
 8001e1a:	b15b      	cbz	r3, 8001e34 <__smakebuf_r+0x74>
 8001e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e20:	4630      	mov	r0, r6
 8001e22:	f000 fc5f 	bl	80026e4 <_isatty_r>
 8001e26:	b128      	cbz	r0, 8001e34 <__smakebuf_r+0x74>
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	81a3      	strh	r3, [r4, #12]
 8001e34:	89a0      	ldrh	r0, [r4, #12]
 8001e36:	4305      	orrs	r5, r0
 8001e38:	81a5      	strh	r5, [r4, #12]
 8001e3a:	e7cd      	b.n	8001dd8 <__smakebuf_r+0x18>
 8001e3c:	08001bcd 	.word	0x08001bcd

08001e40 <_free_r>:
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	4605      	mov	r5, r0
 8001e44:	2900      	cmp	r1, #0
 8001e46:	d041      	beq.n	8001ecc <_free_r+0x8c>
 8001e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e4c:	1f0c      	subs	r4, r1, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bfb8      	it	lt
 8001e52:	18e4      	addlt	r4, r4, r3
 8001e54:	f000 fc68 	bl	8002728 <__malloc_lock>
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <_free_r+0x90>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	b933      	cbnz	r3, 8001e6c <_free_r+0x2c>
 8001e5e:	6063      	str	r3, [r4, #4]
 8001e60:	6014      	str	r4, [r2, #0]
 8001e62:	4628      	mov	r0, r5
 8001e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e68:	f000 bc64 	b.w	8002734 <__malloc_unlock>
 8001e6c:	42a3      	cmp	r3, r4
 8001e6e:	d908      	bls.n	8001e82 <_free_r+0x42>
 8001e70:	6820      	ldr	r0, [r4, #0]
 8001e72:	1821      	adds	r1, r4, r0
 8001e74:	428b      	cmp	r3, r1
 8001e76:	bf01      	itttt	eq
 8001e78:	6819      	ldreq	r1, [r3, #0]
 8001e7a:	685b      	ldreq	r3, [r3, #4]
 8001e7c:	1809      	addeq	r1, r1, r0
 8001e7e:	6021      	streq	r1, [r4, #0]
 8001e80:	e7ed      	b.n	8001e5e <_free_r+0x1e>
 8001e82:	461a      	mov	r2, r3
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	b10b      	cbz	r3, 8001e8c <_free_r+0x4c>
 8001e88:	42a3      	cmp	r3, r4
 8001e8a:	d9fa      	bls.n	8001e82 <_free_r+0x42>
 8001e8c:	6811      	ldr	r1, [r2, #0]
 8001e8e:	1850      	adds	r0, r2, r1
 8001e90:	42a0      	cmp	r0, r4
 8001e92:	d10b      	bne.n	8001eac <_free_r+0x6c>
 8001e94:	6820      	ldr	r0, [r4, #0]
 8001e96:	4401      	add	r1, r0
 8001e98:	1850      	adds	r0, r2, r1
 8001e9a:	4283      	cmp	r3, r0
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	d1e0      	bne.n	8001e62 <_free_r+0x22>
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	6053      	str	r3, [r2, #4]
 8001ea6:	4401      	add	r1, r0
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	e7da      	b.n	8001e62 <_free_r+0x22>
 8001eac:	d902      	bls.n	8001eb4 <_free_r+0x74>
 8001eae:	230c      	movs	r3, #12
 8001eb0:	602b      	str	r3, [r5, #0]
 8001eb2:	e7d6      	b.n	8001e62 <_free_r+0x22>
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	1821      	adds	r1, r4, r0
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	bf04      	itt	eq
 8001ebc:	6819      	ldreq	r1, [r3, #0]
 8001ebe:	685b      	ldreq	r3, [r3, #4]
 8001ec0:	6063      	str	r3, [r4, #4]
 8001ec2:	bf04      	itt	eq
 8001ec4:	1809      	addeq	r1, r1, r0
 8001ec6:	6021      	streq	r1, [r4, #0]
 8001ec8:	6054      	str	r4, [r2, #4]
 8001eca:	e7ca      	b.n	8001e62 <_free_r+0x22>
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000100 	.word	0x20000100

08001ed4 <sbrk_aligned>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	4e0e      	ldr	r6, [pc, #56]	; (8001f10 <sbrk_aligned+0x3c>)
 8001ed8:	460c      	mov	r4, r1
 8001eda:	6831      	ldr	r1, [r6, #0]
 8001edc:	4605      	mov	r5, r0
 8001ede:	b911      	cbnz	r1, 8001ee6 <sbrk_aligned+0x12>
 8001ee0:	f000 fb78 	bl	80025d4 <_sbrk_r>
 8001ee4:	6030      	str	r0, [r6, #0]
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f000 fb73 	bl	80025d4 <_sbrk_r>
 8001eee:	1c43      	adds	r3, r0, #1
 8001ef0:	d00a      	beq.n	8001f08 <sbrk_aligned+0x34>
 8001ef2:	1cc4      	adds	r4, r0, #3
 8001ef4:	f024 0403 	bic.w	r4, r4, #3
 8001ef8:	42a0      	cmp	r0, r4
 8001efa:	d007      	beq.n	8001f0c <sbrk_aligned+0x38>
 8001efc:	1a21      	subs	r1, r4, r0
 8001efe:	4628      	mov	r0, r5
 8001f00:	f000 fb68 	bl	80025d4 <_sbrk_r>
 8001f04:	3001      	adds	r0, #1
 8001f06:	d101      	bne.n	8001f0c <sbrk_aligned+0x38>
 8001f08:	f04f 34ff 	mov.w	r4, #4294967295
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	20000104 	.word	0x20000104

08001f14 <_malloc_r>:
 8001f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f18:	1ccd      	adds	r5, r1, #3
 8001f1a:	f025 0503 	bic.w	r5, r5, #3
 8001f1e:	3508      	adds	r5, #8
 8001f20:	2d0c      	cmp	r5, #12
 8001f22:	bf38      	it	cc
 8001f24:	250c      	movcc	r5, #12
 8001f26:	2d00      	cmp	r5, #0
 8001f28:	4607      	mov	r7, r0
 8001f2a:	db01      	blt.n	8001f30 <_malloc_r+0x1c>
 8001f2c:	42a9      	cmp	r1, r5
 8001f2e:	d905      	bls.n	8001f3c <_malloc_r+0x28>
 8001f30:	230c      	movs	r3, #12
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	2600      	movs	r6, #0
 8001f36:	4630      	mov	r0, r6
 8001f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f3c:	4e2e      	ldr	r6, [pc, #184]	; (8001ff8 <_malloc_r+0xe4>)
 8001f3e:	f000 fbf3 	bl	8002728 <__malloc_lock>
 8001f42:	6833      	ldr	r3, [r6, #0]
 8001f44:	461c      	mov	r4, r3
 8001f46:	bb34      	cbnz	r4, 8001f96 <_malloc_r+0x82>
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	f7ff ffc2 	bl	8001ed4 <sbrk_aligned>
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	4604      	mov	r4, r0
 8001f54:	d14d      	bne.n	8001ff2 <_malloc_r+0xde>
 8001f56:	6834      	ldr	r4, [r6, #0]
 8001f58:	4626      	mov	r6, r4
 8001f5a:	2e00      	cmp	r6, #0
 8001f5c:	d140      	bne.n	8001fe0 <_malloc_r+0xcc>
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	4631      	mov	r1, r6
 8001f62:	4638      	mov	r0, r7
 8001f64:	eb04 0803 	add.w	r8, r4, r3
 8001f68:	f000 fb34 	bl	80025d4 <_sbrk_r>
 8001f6c:	4580      	cmp	r8, r0
 8001f6e:	d13a      	bne.n	8001fe6 <_malloc_r+0xd2>
 8001f70:	6821      	ldr	r1, [r4, #0]
 8001f72:	3503      	adds	r5, #3
 8001f74:	1a6d      	subs	r5, r5, r1
 8001f76:	f025 0503 	bic.w	r5, r5, #3
 8001f7a:	3508      	adds	r5, #8
 8001f7c:	2d0c      	cmp	r5, #12
 8001f7e:	bf38      	it	cc
 8001f80:	250c      	movcc	r5, #12
 8001f82:	4629      	mov	r1, r5
 8001f84:	4638      	mov	r0, r7
 8001f86:	f7ff ffa5 	bl	8001ed4 <sbrk_aligned>
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	d02b      	beq.n	8001fe6 <_malloc_r+0xd2>
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	442b      	add	r3, r5
 8001f92:	6023      	str	r3, [r4, #0]
 8001f94:	e00e      	b.n	8001fb4 <_malloc_r+0xa0>
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	1b52      	subs	r2, r2, r5
 8001f9a:	d41e      	bmi.n	8001fda <_malloc_r+0xc6>
 8001f9c:	2a0b      	cmp	r2, #11
 8001f9e:	d916      	bls.n	8001fce <_malloc_r+0xba>
 8001fa0:	1961      	adds	r1, r4, r5
 8001fa2:	42a3      	cmp	r3, r4
 8001fa4:	6025      	str	r5, [r4, #0]
 8001fa6:	bf18      	it	ne
 8001fa8:	6059      	strne	r1, [r3, #4]
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	bf08      	it	eq
 8001fae:	6031      	streq	r1, [r6, #0]
 8001fb0:	5162      	str	r2, [r4, r5]
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	4638      	mov	r0, r7
 8001fb6:	f104 060b 	add.w	r6, r4, #11
 8001fba:	f000 fbbb 	bl	8002734 <__malloc_unlock>
 8001fbe:	f026 0607 	bic.w	r6, r6, #7
 8001fc2:	1d23      	adds	r3, r4, #4
 8001fc4:	1af2      	subs	r2, r6, r3
 8001fc6:	d0b6      	beq.n	8001f36 <_malloc_r+0x22>
 8001fc8:	1b9b      	subs	r3, r3, r6
 8001fca:	50a3      	str	r3, [r4, r2]
 8001fcc:	e7b3      	b.n	8001f36 <_malloc_r+0x22>
 8001fce:	6862      	ldr	r2, [r4, #4]
 8001fd0:	42a3      	cmp	r3, r4
 8001fd2:	bf0c      	ite	eq
 8001fd4:	6032      	streq	r2, [r6, #0]
 8001fd6:	605a      	strne	r2, [r3, #4]
 8001fd8:	e7ec      	b.n	8001fb4 <_malloc_r+0xa0>
 8001fda:	4623      	mov	r3, r4
 8001fdc:	6864      	ldr	r4, [r4, #4]
 8001fde:	e7b2      	b.n	8001f46 <_malloc_r+0x32>
 8001fe0:	4634      	mov	r4, r6
 8001fe2:	6876      	ldr	r6, [r6, #4]
 8001fe4:	e7b9      	b.n	8001f5a <_malloc_r+0x46>
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4638      	mov	r0, r7
 8001fec:	f000 fba2 	bl	8002734 <__malloc_unlock>
 8001ff0:	e7a1      	b.n	8001f36 <_malloc_r+0x22>
 8001ff2:	6025      	str	r5, [r4, #0]
 8001ff4:	e7de      	b.n	8001fb4 <_malloc_r+0xa0>
 8001ff6:	bf00      	nop
 8001ff8:	20000100 	.word	0x20000100

08001ffc <__sfputc_r>:
 8001ffc:	6893      	ldr	r3, [r2, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	b410      	push	{r4}
 8002004:	6093      	str	r3, [r2, #8]
 8002006:	da07      	bge.n	8002018 <__sfputc_r+0x1c>
 8002008:	6994      	ldr	r4, [r2, #24]
 800200a:	42a3      	cmp	r3, r4
 800200c:	db01      	blt.n	8002012 <__sfputc_r+0x16>
 800200e:	290a      	cmp	r1, #10
 8002010:	d102      	bne.n	8002018 <__sfputc_r+0x1c>
 8002012:	bc10      	pop	{r4}
 8002014:	f7ff bc38 	b.w	8001888 <__swbuf_r>
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	1c58      	adds	r0, r3, #1
 800201c:	6010      	str	r0, [r2, #0]
 800201e:	7019      	strb	r1, [r3, #0]
 8002020:	4608      	mov	r0, r1
 8002022:	bc10      	pop	{r4}
 8002024:	4770      	bx	lr

08002026 <__sfputs_r>:
 8002026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002028:	4606      	mov	r6, r0
 800202a:	460f      	mov	r7, r1
 800202c:	4614      	mov	r4, r2
 800202e:	18d5      	adds	r5, r2, r3
 8002030:	42ac      	cmp	r4, r5
 8002032:	d101      	bne.n	8002038 <__sfputs_r+0x12>
 8002034:	2000      	movs	r0, #0
 8002036:	e007      	b.n	8002048 <__sfputs_r+0x22>
 8002038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800203c:	463a      	mov	r2, r7
 800203e:	4630      	mov	r0, r6
 8002040:	f7ff ffdc 	bl	8001ffc <__sfputc_r>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d1f3      	bne.n	8002030 <__sfputs_r+0xa>
 8002048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800204c <_vfiprintf_r>:
 800204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002050:	460d      	mov	r5, r1
 8002052:	b09d      	sub	sp, #116	; 0x74
 8002054:	4614      	mov	r4, r2
 8002056:	4698      	mov	r8, r3
 8002058:	4606      	mov	r6, r0
 800205a:	b118      	cbz	r0, 8002064 <_vfiprintf_r+0x18>
 800205c:	6983      	ldr	r3, [r0, #24]
 800205e:	b90b      	cbnz	r3, 8002064 <_vfiprintf_r+0x18>
 8002060:	f7ff fde8 	bl	8001c34 <__sinit>
 8002064:	4b89      	ldr	r3, [pc, #548]	; (800228c <_vfiprintf_r+0x240>)
 8002066:	429d      	cmp	r5, r3
 8002068:	d11b      	bne.n	80020a2 <_vfiprintf_r+0x56>
 800206a:	6875      	ldr	r5, [r6, #4]
 800206c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800206e:	07d9      	lsls	r1, r3, #31
 8002070:	d405      	bmi.n	800207e <_vfiprintf_r+0x32>
 8002072:	89ab      	ldrh	r3, [r5, #12]
 8002074:	059a      	lsls	r2, r3, #22
 8002076:	d402      	bmi.n	800207e <_vfiprintf_r+0x32>
 8002078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800207a:	f7ff fe79 	bl	8001d70 <__retarget_lock_acquire_recursive>
 800207e:	89ab      	ldrh	r3, [r5, #12]
 8002080:	071b      	lsls	r3, r3, #28
 8002082:	d501      	bpl.n	8002088 <_vfiprintf_r+0x3c>
 8002084:	692b      	ldr	r3, [r5, #16]
 8002086:	b9eb      	cbnz	r3, 80020c4 <_vfiprintf_r+0x78>
 8002088:	4629      	mov	r1, r5
 800208a:	4630      	mov	r0, r6
 800208c:	f7ff fc4e 	bl	800192c <__swsetup_r>
 8002090:	b1c0      	cbz	r0, 80020c4 <_vfiprintf_r+0x78>
 8002092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002094:	07dc      	lsls	r4, r3, #31
 8002096:	d50e      	bpl.n	80020b6 <_vfiprintf_r+0x6a>
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	b01d      	add	sp, #116	; 0x74
 800209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <_vfiprintf_r+0x244>)
 80020a4:	429d      	cmp	r5, r3
 80020a6:	d101      	bne.n	80020ac <_vfiprintf_r+0x60>
 80020a8:	68b5      	ldr	r5, [r6, #8]
 80020aa:	e7df      	b.n	800206c <_vfiprintf_r+0x20>
 80020ac:	4b79      	ldr	r3, [pc, #484]	; (8002294 <_vfiprintf_r+0x248>)
 80020ae:	429d      	cmp	r5, r3
 80020b0:	bf08      	it	eq
 80020b2:	68f5      	ldreq	r5, [r6, #12]
 80020b4:	e7da      	b.n	800206c <_vfiprintf_r+0x20>
 80020b6:	89ab      	ldrh	r3, [r5, #12]
 80020b8:	0598      	lsls	r0, r3, #22
 80020ba:	d4ed      	bmi.n	8002098 <_vfiprintf_r+0x4c>
 80020bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020be:	f7ff fe58 	bl	8001d72 <__retarget_lock_release_recursive>
 80020c2:	e7e9      	b.n	8002098 <_vfiprintf_r+0x4c>
 80020c4:	2300      	movs	r3, #0
 80020c6:	9309      	str	r3, [sp, #36]	; 0x24
 80020c8:	2320      	movs	r3, #32
 80020ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80020d2:	2330      	movs	r3, #48	; 0x30
 80020d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002298 <_vfiprintf_r+0x24c>
 80020d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020dc:	f04f 0901 	mov.w	r9, #1
 80020e0:	4623      	mov	r3, r4
 80020e2:	469a      	mov	sl, r3
 80020e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020e8:	b10a      	cbz	r2, 80020ee <_vfiprintf_r+0xa2>
 80020ea:	2a25      	cmp	r2, #37	; 0x25
 80020ec:	d1f9      	bne.n	80020e2 <_vfiprintf_r+0x96>
 80020ee:	ebba 0b04 	subs.w	fp, sl, r4
 80020f2:	d00b      	beq.n	800210c <_vfiprintf_r+0xc0>
 80020f4:	465b      	mov	r3, fp
 80020f6:	4622      	mov	r2, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	4630      	mov	r0, r6
 80020fc:	f7ff ff93 	bl	8002026 <__sfputs_r>
 8002100:	3001      	adds	r0, #1
 8002102:	f000 80aa 	beq.w	800225a <_vfiprintf_r+0x20e>
 8002106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002108:	445a      	add	r2, fp
 800210a:	9209      	str	r2, [sp, #36]	; 0x24
 800210c:	f89a 3000 	ldrb.w	r3, [sl]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a2 	beq.w	800225a <_vfiprintf_r+0x20e>
 8002116:	2300      	movs	r3, #0
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002120:	f10a 0a01 	add.w	sl, sl, #1
 8002124:	9304      	str	r3, [sp, #16]
 8002126:	9307      	str	r3, [sp, #28]
 8002128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800212c:	931a      	str	r3, [sp, #104]	; 0x68
 800212e:	4654      	mov	r4, sl
 8002130:	2205      	movs	r2, #5
 8002132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002136:	4858      	ldr	r0, [pc, #352]	; (8002298 <_vfiprintf_r+0x24c>)
 8002138:	f7fe f862 	bl	8000200 <memchr>
 800213c:	9a04      	ldr	r2, [sp, #16]
 800213e:	b9d8      	cbnz	r0, 8002178 <_vfiprintf_r+0x12c>
 8002140:	06d1      	lsls	r1, r2, #27
 8002142:	bf44      	itt	mi
 8002144:	2320      	movmi	r3, #32
 8002146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800214a:	0713      	lsls	r3, r2, #28
 800214c:	bf44      	itt	mi
 800214e:	232b      	movmi	r3, #43	; 0x2b
 8002150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002154:	f89a 3000 	ldrb.w	r3, [sl]
 8002158:	2b2a      	cmp	r3, #42	; 0x2a
 800215a:	d015      	beq.n	8002188 <_vfiprintf_r+0x13c>
 800215c:	9a07      	ldr	r2, [sp, #28]
 800215e:	4654      	mov	r4, sl
 8002160:	2000      	movs	r0, #0
 8002162:	f04f 0c0a 	mov.w	ip, #10
 8002166:	4621      	mov	r1, r4
 8002168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800216c:	3b30      	subs	r3, #48	; 0x30
 800216e:	2b09      	cmp	r3, #9
 8002170:	d94e      	bls.n	8002210 <_vfiprintf_r+0x1c4>
 8002172:	b1b0      	cbz	r0, 80021a2 <_vfiprintf_r+0x156>
 8002174:	9207      	str	r2, [sp, #28]
 8002176:	e014      	b.n	80021a2 <_vfiprintf_r+0x156>
 8002178:	eba0 0308 	sub.w	r3, r0, r8
 800217c:	fa09 f303 	lsl.w	r3, r9, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	9304      	str	r3, [sp, #16]
 8002184:	46a2      	mov	sl, r4
 8002186:	e7d2      	b.n	800212e <_vfiprintf_r+0xe2>
 8002188:	9b03      	ldr	r3, [sp, #12]
 800218a:	1d19      	adds	r1, r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	9103      	str	r1, [sp, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	bfbb      	ittet	lt
 8002194:	425b      	neglt	r3, r3
 8002196:	f042 0202 	orrlt.w	r2, r2, #2
 800219a:	9307      	strge	r3, [sp, #28]
 800219c:	9307      	strlt	r3, [sp, #28]
 800219e:	bfb8      	it	lt
 80021a0:	9204      	strlt	r2, [sp, #16]
 80021a2:	7823      	ldrb	r3, [r4, #0]
 80021a4:	2b2e      	cmp	r3, #46	; 0x2e
 80021a6:	d10c      	bne.n	80021c2 <_vfiprintf_r+0x176>
 80021a8:	7863      	ldrb	r3, [r4, #1]
 80021aa:	2b2a      	cmp	r3, #42	; 0x2a
 80021ac:	d135      	bne.n	800221a <_vfiprintf_r+0x1ce>
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	9203      	str	r2, [sp, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bfb8      	it	lt
 80021ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80021be:	3402      	adds	r4, #2
 80021c0:	9305      	str	r3, [sp, #20]
 80021c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800229c <_vfiprintf_r+0x250>
 80021c6:	7821      	ldrb	r1, [r4, #0]
 80021c8:	2203      	movs	r2, #3
 80021ca:	4650      	mov	r0, sl
 80021cc:	f7fe f818 	bl	8000200 <memchr>
 80021d0:	b140      	cbz	r0, 80021e4 <_vfiprintf_r+0x198>
 80021d2:	2340      	movs	r3, #64	; 0x40
 80021d4:	eba0 000a 	sub.w	r0, r0, sl
 80021d8:	fa03 f000 	lsl.w	r0, r3, r0
 80021dc:	9b04      	ldr	r3, [sp, #16]
 80021de:	4303      	orrs	r3, r0
 80021e0:	3401      	adds	r4, #1
 80021e2:	9304      	str	r3, [sp, #16]
 80021e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021e8:	482d      	ldr	r0, [pc, #180]	; (80022a0 <_vfiprintf_r+0x254>)
 80021ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021ee:	2206      	movs	r2, #6
 80021f0:	f7fe f806 	bl	8000200 <memchr>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d03f      	beq.n	8002278 <_vfiprintf_r+0x22c>
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <_vfiprintf_r+0x258>)
 80021fa:	bb1b      	cbnz	r3, 8002244 <_vfiprintf_r+0x1f8>
 80021fc:	9b03      	ldr	r3, [sp, #12]
 80021fe:	3307      	adds	r3, #7
 8002200:	f023 0307 	bic.w	r3, r3, #7
 8002204:	3308      	adds	r3, #8
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220a:	443b      	add	r3, r7
 800220c:	9309      	str	r3, [sp, #36]	; 0x24
 800220e:	e767      	b.n	80020e0 <_vfiprintf_r+0x94>
 8002210:	fb0c 3202 	mla	r2, ip, r2, r3
 8002214:	460c      	mov	r4, r1
 8002216:	2001      	movs	r0, #1
 8002218:	e7a5      	b.n	8002166 <_vfiprintf_r+0x11a>
 800221a:	2300      	movs	r3, #0
 800221c:	3401      	adds	r4, #1
 800221e:	9305      	str	r3, [sp, #20]
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 0c0a 	mov.w	ip, #10
 8002226:	4620      	mov	r0, r4
 8002228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800222c:	3a30      	subs	r2, #48	; 0x30
 800222e:	2a09      	cmp	r2, #9
 8002230:	d903      	bls.n	800223a <_vfiprintf_r+0x1ee>
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0c5      	beq.n	80021c2 <_vfiprintf_r+0x176>
 8002236:	9105      	str	r1, [sp, #20]
 8002238:	e7c3      	b.n	80021c2 <_vfiprintf_r+0x176>
 800223a:	fb0c 2101 	mla	r1, ip, r1, r2
 800223e:	4604      	mov	r4, r0
 8002240:	2301      	movs	r3, #1
 8002242:	e7f0      	b.n	8002226 <_vfiprintf_r+0x1da>
 8002244:	ab03      	add	r3, sp, #12
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	462a      	mov	r2, r5
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <_vfiprintf_r+0x25c>)
 800224c:	a904      	add	r1, sp, #16
 800224e:	4630      	mov	r0, r6
 8002250:	f3af 8000 	nop.w
 8002254:	4607      	mov	r7, r0
 8002256:	1c78      	adds	r0, r7, #1
 8002258:	d1d6      	bne.n	8002208 <_vfiprintf_r+0x1bc>
 800225a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800225c:	07d9      	lsls	r1, r3, #31
 800225e:	d405      	bmi.n	800226c <_vfiprintf_r+0x220>
 8002260:	89ab      	ldrh	r3, [r5, #12]
 8002262:	059a      	lsls	r2, r3, #22
 8002264:	d402      	bmi.n	800226c <_vfiprintf_r+0x220>
 8002266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002268:	f7ff fd83 	bl	8001d72 <__retarget_lock_release_recursive>
 800226c:	89ab      	ldrh	r3, [r5, #12]
 800226e:	065b      	lsls	r3, r3, #25
 8002270:	f53f af12 	bmi.w	8002098 <_vfiprintf_r+0x4c>
 8002274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002276:	e711      	b.n	800209c <_vfiprintf_r+0x50>
 8002278:	ab03      	add	r3, sp, #12
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	462a      	mov	r2, r5
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <_vfiprintf_r+0x25c>)
 8002280:	a904      	add	r1, sp, #16
 8002282:	4630      	mov	r0, r6
 8002284:	f000 f880 	bl	8002388 <_printf_i>
 8002288:	e7e4      	b.n	8002254 <_vfiprintf_r+0x208>
 800228a:	bf00      	nop
 800228c:	080027e4 	.word	0x080027e4
 8002290:	08002804 	.word	0x08002804
 8002294:	080027c4 	.word	0x080027c4
 8002298:	08002824 	.word	0x08002824
 800229c:	0800282a 	.word	0x0800282a
 80022a0:	0800282e 	.word	0x0800282e
 80022a4:	00000000 	.word	0x00000000
 80022a8:	08002027 	.word	0x08002027

080022ac <_printf_common>:
 80022ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022b0:	4616      	mov	r6, r2
 80022b2:	4699      	mov	r9, r3
 80022b4:	688a      	ldr	r2, [r1, #8]
 80022b6:	690b      	ldr	r3, [r1, #16]
 80022b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022bc:	4293      	cmp	r3, r2
 80022be:	bfb8      	it	lt
 80022c0:	4613      	movlt	r3, r2
 80022c2:	6033      	str	r3, [r6, #0]
 80022c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022c8:	4607      	mov	r7, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	b10a      	cbz	r2, 80022d2 <_printf_common+0x26>
 80022ce:	3301      	adds	r3, #1
 80022d0:	6033      	str	r3, [r6, #0]
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	0699      	lsls	r1, r3, #26
 80022d6:	bf42      	ittt	mi
 80022d8:	6833      	ldrmi	r3, [r6, #0]
 80022da:	3302      	addmi	r3, #2
 80022dc:	6033      	strmi	r3, [r6, #0]
 80022de:	6825      	ldr	r5, [r4, #0]
 80022e0:	f015 0506 	ands.w	r5, r5, #6
 80022e4:	d106      	bne.n	80022f4 <_printf_common+0x48>
 80022e6:	f104 0a19 	add.w	sl, r4, #25
 80022ea:	68e3      	ldr	r3, [r4, #12]
 80022ec:	6832      	ldr	r2, [r6, #0]
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	42ab      	cmp	r3, r5
 80022f2:	dc26      	bgt.n	8002342 <_printf_common+0x96>
 80022f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022f8:	1e13      	subs	r3, r2, #0
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	bf18      	it	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	0692      	lsls	r2, r2, #26
 8002302:	d42b      	bmi.n	800235c <_printf_common+0xb0>
 8002304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002308:	4649      	mov	r1, r9
 800230a:	4638      	mov	r0, r7
 800230c:	47c0      	blx	r8
 800230e:	3001      	adds	r0, #1
 8002310:	d01e      	beq.n	8002350 <_printf_common+0xa4>
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	68e5      	ldr	r5, [r4, #12]
 8002316:	6832      	ldr	r2, [r6, #0]
 8002318:	f003 0306 	and.w	r3, r3, #6
 800231c:	2b04      	cmp	r3, #4
 800231e:	bf08      	it	eq
 8002320:	1aad      	subeq	r5, r5, r2
 8002322:	68a3      	ldr	r3, [r4, #8]
 8002324:	6922      	ldr	r2, [r4, #16]
 8002326:	bf0c      	ite	eq
 8002328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800232c:	2500      	movne	r5, #0
 800232e:	4293      	cmp	r3, r2
 8002330:	bfc4      	itt	gt
 8002332:	1a9b      	subgt	r3, r3, r2
 8002334:	18ed      	addgt	r5, r5, r3
 8002336:	2600      	movs	r6, #0
 8002338:	341a      	adds	r4, #26
 800233a:	42b5      	cmp	r5, r6
 800233c:	d11a      	bne.n	8002374 <_printf_common+0xc8>
 800233e:	2000      	movs	r0, #0
 8002340:	e008      	b.n	8002354 <_printf_common+0xa8>
 8002342:	2301      	movs	r3, #1
 8002344:	4652      	mov	r2, sl
 8002346:	4649      	mov	r1, r9
 8002348:	4638      	mov	r0, r7
 800234a:	47c0      	blx	r8
 800234c:	3001      	adds	r0, #1
 800234e:	d103      	bne.n	8002358 <_printf_common+0xac>
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002358:	3501      	adds	r5, #1
 800235a:	e7c6      	b.n	80022ea <_printf_common+0x3e>
 800235c:	18e1      	adds	r1, r4, r3
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	2030      	movs	r0, #48	; 0x30
 8002362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002366:	4422      	add	r2, r4
 8002368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800236c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002370:	3302      	adds	r3, #2
 8002372:	e7c7      	b.n	8002304 <_printf_common+0x58>
 8002374:	2301      	movs	r3, #1
 8002376:	4622      	mov	r2, r4
 8002378:	4649      	mov	r1, r9
 800237a:	4638      	mov	r0, r7
 800237c:	47c0      	blx	r8
 800237e:	3001      	adds	r0, #1
 8002380:	d0e6      	beq.n	8002350 <_printf_common+0xa4>
 8002382:	3601      	adds	r6, #1
 8002384:	e7d9      	b.n	800233a <_printf_common+0x8e>
	...

08002388 <_printf_i>:
 8002388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800238c:	7e0f      	ldrb	r7, [r1, #24]
 800238e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002390:	2f78      	cmp	r7, #120	; 0x78
 8002392:	4691      	mov	r9, r2
 8002394:	4680      	mov	r8, r0
 8002396:	460c      	mov	r4, r1
 8002398:	469a      	mov	sl, r3
 800239a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800239e:	d807      	bhi.n	80023b0 <_printf_i+0x28>
 80023a0:	2f62      	cmp	r7, #98	; 0x62
 80023a2:	d80a      	bhi.n	80023ba <_printf_i+0x32>
 80023a4:	2f00      	cmp	r7, #0
 80023a6:	f000 80d8 	beq.w	800255a <_printf_i+0x1d2>
 80023aa:	2f58      	cmp	r7, #88	; 0x58
 80023ac:	f000 80a3 	beq.w	80024f6 <_printf_i+0x16e>
 80023b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023b8:	e03a      	b.n	8002430 <_printf_i+0xa8>
 80023ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023be:	2b15      	cmp	r3, #21
 80023c0:	d8f6      	bhi.n	80023b0 <_printf_i+0x28>
 80023c2:	a101      	add	r1, pc, #4	; (adr r1, 80023c8 <_printf_i+0x40>)
 80023c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023c8:	08002421 	.word	0x08002421
 80023cc:	08002435 	.word	0x08002435
 80023d0:	080023b1 	.word	0x080023b1
 80023d4:	080023b1 	.word	0x080023b1
 80023d8:	080023b1 	.word	0x080023b1
 80023dc:	080023b1 	.word	0x080023b1
 80023e0:	08002435 	.word	0x08002435
 80023e4:	080023b1 	.word	0x080023b1
 80023e8:	080023b1 	.word	0x080023b1
 80023ec:	080023b1 	.word	0x080023b1
 80023f0:	080023b1 	.word	0x080023b1
 80023f4:	08002541 	.word	0x08002541
 80023f8:	08002465 	.word	0x08002465
 80023fc:	08002523 	.word	0x08002523
 8002400:	080023b1 	.word	0x080023b1
 8002404:	080023b1 	.word	0x080023b1
 8002408:	08002563 	.word	0x08002563
 800240c:	080023b1 	.word	0x080023b1
 8002410:	08002465 	.word	0x08002465
 8002414:	080023b1 	.word	0x080023b1
 8002418:	080023b1 	.word	0x080023b1
 800241c:	0800252b 	.word	0x0800252b
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	602a      	str	r2, [r5, #0]
 8002428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800242c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002430:	2301      	movs	r3, #1
 8002432:	e0a3      	b.n	800257c <_printf_i+0x1f4>
 8002434:	6820      	ldr	r0, [r4, #0]
 8002436:	6829      	ldr	r1, [r5, #0]
 8002438:	0606      	lsls	r6, r0, #24
 800243a:	f101 0304 	add.w	r3, r1, #4
 800243e:	d50a      	bpl.n	8002456 <_printf_i+0xce>
 8002440:	680e      	ldr	r6, [r1, #0]
 8002442:	602b      	str	r3, [r5, #0]
 8002444:	2e00      	cmp	r6, #0
 8002446:	da03      	bge.n	8002450 <_printf_i+0xc8>
 8002448:	232d      	movs	r3, #45	; 0x2d
 800244a:	4276      	negs	r6, r6
 800244c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002450:	485e      	ldr	r0, [pc, #376]	; (80025cc <_printf_i+0x244>)
 8002452:	230a      	movs	r3, #10
 8002454:	e019      	b.n	800248a <_printf_i+0x102>
 8002456:	680e      	ldr	r6, [r1, #0]
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800245e:	bf18      	it	ne
 8002460:	b236      	sxthne	r6, r6
 8002462:	e7ef      	b.n	8002444 <_printf_i+0xbc>
 8002464:	682b      	ldr	r3, [r5, #0]
 8002466:	6820      	ldr	r0, [r4, #0]
 8002468:	1d19      	adds	r1, r3, #4
 800246a:	6029      	str	r1, [r5, #0]
 800246c:	0601      	lsls	r1, r0, #24
 800246e:	d501      	bpl.n	8002474 <_printf_i+0xec>
 8002470:	681e      	ldr	r6, [r3, #0]
 8002472:	e002      	b.n	800247a <_printf_i+0xf2>
 8002474:	0646      	lsls	r6, r0, #25
 8002476:	d5fb      	bpl.n	8002470 <_printf_i+0xe8>
 8002478:	881e      	ldrh	r6, [r3, #0]
 800247a:	4854      	ldr	r0, [pc, #336]	; (80025cc <_printf_i+0x244>)
 800247c:	2f6f      	cmp	r7, #111	; 0x6f
 800247e:	bf0c      	ite	eq
 8002480:	2308      	moveq	r3, #8
 8002482:	230a      	movne	r3, #10
 8002484:	2100      	movs	r1, #0
 8002486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800248a:	6865      	ldr	r5, [r4, #4]
 800248c:	60a5      	str	r5, [r4, #8]
 800248e:	2d00      	cmp	r5, #0
 8002490:	bfa2      	ittt	ge
 8002492:	6821      	ldrge	r1, [r4, #0]
 8002494:	f021 0104 	bicge.w	r1, r1, #4
 8002498:	6021      	strge	r1, [r4, #0]
 800249a:	b90e      	cbnz	r6, 80024a0 <_printf_i+0x118>
 800249c:	2d00      	cmp	r5, #0
 800249e:	d04d      	beq.n	800253c <_printf_i+0x1b4>
 80024a0:	4615      	mov	r5, r2
 80024a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80024a6:	fb03 6711 	mls	r7, r3, r1, r6
 80024aa:	5dc7      	ldrb	r7, [r0, r7]
 80024ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024b0:	4637      	mov	r7, r6
 80024b2:	42bb      	cmp	r3, r7
 80024b4:	460e      	mov	r6, r1
 80024b6:	d9f4      	bls.n	80024a2 <_printf_i+0x11a>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d10b      	bne.n	80024d4 <_printf_i+0x14c>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	07de      	lsls	r6, r3, #31
 80024c0:	d508      	bpl.n	80024d4 <_printf_i+0x14c>
 80024c2:	6923      	ldr	r3, [r4, #16]
 80024c4:	6861      	ldr	r1, [r4, #4]
 80024c6:	4299      	cmp	r1, r3
 80024c8:	bfde      	ittt	le
 80024ca:	2330      	movle	r3, #48	; 0x30
 80024cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024d4:	1b52      	subs	r2, r2, r5
 80024d6:	6122      	str	r2, [r4, #16]
 80024d8:	f8cd a000 	str.w	sl, [sp]
 80024dc:	464b      	mov	r3, r9
 80024de:	aa03      	add	r2, sp, #12
 80024e0:	4621      	mov	r1, r4
 80024e2:	4640      	mov	r0, r8
 80024e4:	f7ff fee2 	bl	80022ac <_printf_common>
 80024e8:	3001      	adds	r0, #1
 80024ea:	d14c      	bne.n	8002586 <_printf_i+0x1fe>
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	b004      	add	sp, #16
 80024f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f6:	4835      	ldr	r0, [pc, #212]	; (80025cc <_printf_i+0x244>)
 80024f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80024fc:	6829      	ldr	r1, [r5, #0]
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	f851 6b04 	ldr.w	r6, [r1], #4
 8002504:	6029      	str	r1, [r5, #0]
 8002506:	061d      	lsls	r5, r3, #24
 8002508:	d514      	bpl.n	8002534 <_printf_i+0x1ac>
 800250a:	07df      	lsls	r7, r3, #31
 800250c:	bf44      	itt	mi
 800250e:	f043 0320 	orrmi.w	r3, r3, #32
 8002512:	6023      	strmi	r3, [r4, #0]
 8002514:	b91e      	cbnz	r6, 800251e <_printf_i+0x196>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	f023 0320 	bic.w	r3, r3, #32
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	2310      	movs	r3, #16
 8002520:	e7b0      	b.n	8002484 <_printf_i+0xfc>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	f043 0320 	orr.w	r3, r3, #32
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	2378      	movs	r3, #120	; 0x78
 800252c:	4828      	ldr	r0, [pc, #160]	; (80025d0 <_printf_i+0x248>)
 800252e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002532:	e7e3      	b.n	80024fc <_printf_i+0x174>
 8002534:	0659      	lsls	r1, r3, #25
 8002536:	bf48      	it	mi
 8002538:	b2b6      	uxthmi	r6, r6
 800253a:	e7e6      	b.n	800250a <_printf_i+0x182>
 800253c:	4615      	mov	r5, r2
 800253e:	e7bb      	b.n	80024b8 <_printf_i+0x130>
 8002540:	682b      	ldr	r3, [r5, #0]
 8002542:	6826      	ldr	r6, [r4, #0]
 8002544:	6961      	ldr	r1, [r4, #20]
 8002546:	1d18      	adds	r0, r3, #4
 8002548:	6028      	str	r0, [r5, #0]
 800254a:	0635      	lsls	r5, r6, #24
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	d501      	bpl.n	8002554 <_printf_i+0x1cc>
 8002550:	6019      	str	r1, [r3, #0]
 8002552:	e002      	b.n	800255a <_printf_i+0x1d2>
 8002554:	0670      	lsls	r0, r6, #25
 8002556:	d5fb      	bpl.n	8002550 <_printf_i+0x1c8>
 8002558:	8019      	strh	r1, [r3, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	6123      	str	r3, [r4, #16]
 800255e:	4615      	mov	r5, r2
 8002560:	e7ba      	b.n	80024d8 <_printf_i+0x150>
 8002562:	682b      	ldr	r3, [r5, #0]
 8002564:	1d1a      	adds	r2, r3, #4
 8002566:	602a      	str	r2, [r5, #0]
 8002568:	681d      	ldr	r5, [r3, #0]
 800256a:	6862      	ldr	r2, [r4, #4]
 800256c:	2100      	movs	r1, #0
 800256e:	4628      	mov	r0, r5
 8002570:	f7fd fe46 	bl	8000200 <memchr>
 8002574:	b108      	cbz	r0, 800257a <_printf_i+0x1f2>
 8002576:	1b40      	subs	r0, r0, r5
 8002578:	6060      	str	r0, [r4, #4]
 800257a:	6863      	ldr	r3, [r4, #4]
 800257c:	6123      	str	r3, [r4, #16]
 800257e:	2300      	movs	r3, #0
 8002580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002584:	e7a8      	b.n	80024d8 <_printf_i+0x150>
 8002586:	6923      	ldr	r3, [r4, #16]
 8002588:	462a      	mov	r2, r5
 800258a:	4649      	mov	r1, r9
 800258c:	4640      	mov	r0, r8
 800258e:	47d0      	blx	sl
 8002590:	3001      	adds	r0, #1
 8002592:	d0ab      	beq.n	80024ec <_printf_i+0x164>
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	079b      	lsls	r3, r3, #30
 8002598:	d413      	bmi.n	80025c2 <_printf_i+0x23a>
 800259a:	68e0      	ldr	r0, [r4, #12]
 800259c:	9b03      	ldr	r3, [sp, #12]
 800259e:	4298      	cmp	r0, r3
 80025a0:	bfb8      	it	lt
 80025a2:	4618      	movlt	r0, r3
 80025a4:	e7a4      	b.n	80024f0 <_printf_i+0x168>
 80025a6:	2301      	movs	r3, #1
 80025a8:	4632      	mov	r2, r6
 80025aa:	4649      	mov	r1, r9
 80025ac:	4640      	mov	r0, r8
 80025ae:	47d0      	blx	sl
 80025b0:	3001      	adds	r0, #1
 80025b2:	d09b      	beq.n	80024ec <_printf_i+0x164>
 80025b4:	3501      	adds	r5, #1
 80025b6:	68e3      	ldr	r3, [r4, #12]
 80025b8:	9903      	ldr	r1, [sp, #12]
 80025ba:	1a5b      	subs	r3, r3, r1
 80025bc:	42ab      	cmp	r3, r5
 80025be:	dcf2      	bgt.n	80025a6 <_printf_i+0x21e>
 80025c0:	e7eb      	b.n	800259a <_printf_i+0x212>
 80025c2:	2500      	movs	r5, #0
 80025c4:	f104 0619 	add.w	r6, r4, #25
 80025c8:	e7f5      	b.n	80025b6 <_printf_i+0x22e>
 80025ca:	bf00      	nop
 80025cc:	08002835 	.word	0x08002835
 80025d0:	08002846 	.word	0x08002846

080025d4 <_sbrk_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4d06      	ldr	r5, [pc, #24]	; (80025f0 <_sbrk_r+0x1c>)
 80025d8:	2300      	movs	r3, #0
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	f7fe f848 	bl	8000674 <_sbrk>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d102      	bne.n	80025ee <_sbrk_r+0x1a>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	b103      	cbz	r3, 80025ee <_sbrk_r+0x1a>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	20000108 	.word	0x20000108

080025f4 <__sread>:
 80025f4:	b510      	push	{r4, lr}
 80025f6:	460c      	mov	r4, r1
 80025f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025fc:	f000 f8a0 	bl	8002740 <_read_r>
 8002600:	2800      	cmp	r0, #0
 8002602:	bfab      	itete	ge
 8002604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002606:	89a3      	ldrhlt	r3, [r4, #12]
 8002608:	181b      	addge	r3, r3, r0
 800260a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800260e:	bfac      	ite	ge
 8002610:	6563      	strge	r3, [r4, #84]	; 0x54
 8002612:	81a3      	strhlt	r3, [r4, #12]
 8002614:	bd10      	pop	{r4, pc}

08002616 <__swrite>:
 8002616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800261a:	461f      	mov	r7, r3
 800261c:	898b      	ldrh	r3, [r1, #12]
 800261e:	05db      	lsls	r3, r3, #23
 8002620:	4605      	mov	r5, r0
 8002622:	460c      	mov	r4, r1
 8002624:	4616      	mov	r6, r2
 8002626:	d505      	bpl.n	8002634 <__swrite+0x1e>
 8002628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262c:	2302      	movs	r3, #2
 800262e:	2200      	movs	r2, #0
 8002630:	f000 f868 	bl	8002704 <_lseek_r>
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800263a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263e:	81a3      	strh	r3, [r4, #12]
 8002640:	4632      	mov	r2, r6
 8002642:	463b      	mov	r3, r7
 8002644:	4628      	mov	r0, r5
 8002646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	f000 b817 	b.w	800267c <_write_r>

0800264e <__sseek>:
 800264e:	b510      	push	{r4, lr}
 8002650:	460c      	mov	r4, r1
 8002652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002656:	f000 f855 	bl	8002704 <_lseek_r>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	bf15      	itete	ne
 8002660:	6560      	strne	r0, [r4, #84]	; 0x54
 8002662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800266a:	81a3      	strheq	r3, [r4, #12]
 800266c:	bf18      	it	ne
 800266e:	81a3      	strhne	r3, [r4, #12]
 8002670:	bd10      	pop	{r4, pc}

08002672 <__sclose>:
 8002672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002676:	f000 b813 	b.w	80026a0 <_close_r>
	...

0800267c <_write_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4d07      	ldr	r5, [pc, #28]	; (800269c <_write_r+0x20>)
 8002680:	4604      	mov	r4, r0
 8002682:	4608      	mov	r0, r1
 8002684:	4611      	mov	r1, r2
 8002686:	2200      	movs	r2, #0
 8002688:	602a      	str	r2, [r5, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f7fd ffa5 	bl	80005da <_write>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_write_r+0x1e>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	b103      	cbz	r3, 800269a <_write_r+0x1e>
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	20000108 	.word	0x20000108

080026a0 <_close_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4d06      	ldr	r5, [pc, #24]	; (80026bc <_close_r+0x1c>)
 80026a4:	2300      	movs	r3, #0
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	602b      	str	r3, [r5, #0]
 80026ac:	f7fd ffb1 	bl	8000612 <_close>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d102      	bne.n	80026ba <_close_r+0x1a>
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	b103      	cbz	r3, 80026ba <_close_r+0x1a>
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
 80026bc:	20000108 	.word	0x20000108

080026c0 <_fstat_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4d07      	ldr	r5, [pc, #28]	; (80026e0 <_fstat_r+0x20>)
 80026c4:	2300      	movs	r3, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	602b      	str	r3, [r5, #0]
 80026ce:	f7fd ffab 	bl	8000628 <_fstat>
 80026d2:	1c43      	adds	r3, r0, #1
 80026d4:	d102      	bne.n	80026dc <_fstat_r+0x1c>
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	b103      	cbz	r3, 80026dc <_fstat_r+0x1c>
 80026da:	6023      	str	r3, [r4, #0]
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
 80026de:	bf00      	nop
 80026e0:	20000108 	.word	0x20000108

080026e4 <_isatty_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4d06      	ldr	r5, [pc, #24]	; (8002700 <_isatty_r+0x1c>)
 80026e8:	2300      	movs	r3, #0
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	602b      	str	r3, [r5, #0]
 80026f0:	f7fd ffa9 	bl	8000646 <_isatty>
 80026f4:	1c43      	adds	r3, r0, #1
 80026f6:	d102      	bne.n	80026fe <_isatty_r+0x1a>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	b103      	cbz	r3, 80026fe <_isatty_r+0x1a>
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
 8002700:	20000108 	.word	0x20000108

08002704 <_lseek_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4d07      	ldr	r5, [pc, #28]	; (8002724 <_lseek_r+0x20>)
 8002708:	4604      	mov	r4, r0
 800270a:	4608      	mov	r0, r1
 800270c:	4611      	mov	r1, r2
 800270e:	2200      	movs	r2, #0
 8002710:	602a      	str	r2, [r5, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	f7fd ffa1 	bl	800065a <_lseek>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	d102      	bne.n	8002722 <_lseek_r+0x1e>
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	b103      	cbz	r3, 8002722 <_lseek_r+0x1e>
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	20000108 	.word	0x20000108

08002728 <__malloc_lock>:
 8002728:	4801      	ldr	r0, [pc, #4]	; (8002730 <__malloc_lock+0x8>)
 800272a:	f7ff bb21 	b.w	8001d70 <__retarget_lock_acquire_recursive>
 800272e:	bf00      	nop
 8002730:	200000fc 	.word	0x200000fc

08002734 <__malloc_unlock>:
 8002734:	4801      	ldr	r0, [pc, #4]	; (800273c <__malloc_unlock+0x8>)
 8002736:	f7ff bb1c 	b.w	8001d72 <__retarget_lock_release_recursive>
 800273a:	bf00      	nop
 800273c:	200000fc 	.word	0x200000fc

08002740 <_read_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4d07      	ldr	r5, [pc, #28]	; (8002760 <_read_r+0x20>)
 8002744:	4604      	mov	r4, r0
 8002746:	4608      	mov	r0, r1
 8002748:	4611      	mov	r1, r2
 800274a:	2200      	movs	r2, #0
 800274c:	602a      	str	r2, [r5, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f7fd ff26 	bl	80005a0 <_read>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d102      	bne.n	800275e <_read_r+0x1e>
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	b103      	cbz	r3, 800275e <_read_r+0x1e>
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	20000108 	.word	0x20000108

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr
